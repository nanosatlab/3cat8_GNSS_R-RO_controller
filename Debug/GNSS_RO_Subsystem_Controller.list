
GNSS_RO_Subsystem_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b484  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  0800b618  0800b618  0000c618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be18  0800be18  0000d1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800be18  0800be18  0000ce18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be20  0800be20  0000d1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be20  0800be20  0000ce20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be24  0800be24  0000ce24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800be28  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a64  200001f8  0800c020  0000d1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c5c  0800c020  0000dc5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012417  00000000  00000000  0000d228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e1e  00000000  00000000  0001f63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00022460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be2  00000000  00000000  000233e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b3d  00000000  00000000  00023fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001557d  00000000  00000000  0004cb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed7c2  00000000  00000000  00062084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f846  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000526c  00000000  00000000  0014f88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00154af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b5fc 	.word	0x0800b5fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800b5fc 	.word	0x0800b5fc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <Receiver_Cold_Restart>:
#include <stdlib.h>
#include "types.h"
#include "main.h"
#include "configure_receiver_commands.h"

uint8_t_array Receiver_Cold_Restart(uint8_t start_mode, uint8_t UTCday, uint8_t UTCmonth, uint16_t UTCyear, uint8_t UTChour, uint8_t UTCminute, uint8_t UTCsecond, signed int lat, signed int lon, signed int alt){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	70fb      	strb	r3, [r7, #3]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	70bb      	strb	r3, [r7, #2]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	707b      	strb	r3, [r7, #1]
    inputs: UTC day, month, year, hour, minute, second.
    latitude, longitude, altitude.
    All these can be input in decimal directly without issue.
    output: uint8_t_array containing the command. */
    uint8_t_array cmd;
    cmd.length = 22;
 8000ed2:	2316      	movs	r3, #22
 8000ed4:	823b      	strh	r3, [r7, #16]
    cmd.data = malloc(cmd.length*sizeof(uint8_t));
 8000ed6:	8a3b      	ldrh	r3, [r7, #16]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f007 fc03 	bl	80086e4 <malloc>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	60fb      	str	r3, [r7, #12]
    if(cmd.data==NULL){exit(-1);}
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d103      	bne.n	8000ef0 <Receiver_Cold_Restart+0x38>
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f007 fbe8 	bl	80086c0 <exit>
    cmd.data[0] = 0xA0, cmd.data[1] = 0xA1, cmd.data[2] = 0x00, cmd.data[3] = 0x0F, cmd.data[4] = 0x01;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	22a0      	movs	r2, #160	@ 0xa0
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	22a1      	movs	r2, #161	@ 0xa1
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3302      	adds	r3, #2
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3303      	adds	r3, #3
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
    cmd.data[5] = start_mode; //Cold start 0x03...
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3305      	adds	r3, #5
 8000f1a:	78fa      	ldrb	r2, [r7, #3]
 8000f1c:	701a      	strb	r2, [r3, #0]
    cmd.data[6] = (UTCyear>>8) & 0xFF, cmd.data[7] = UTCyear & 0xFF;
 8000f1e:	8c3b      	ldrh	r3, [r7, #32]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3306      	adds	r3, #6
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3307      	adds	r3, #7
 8000f30:	8c3a      	ldrh	r2, [r7, #32]
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	701a      	strb	r2, [r3, #0]
    cmd.data[8] = UTCmonth;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3308      	adds	r3, #8
 8000f3a:	787a      	ldrb	r2, [r7, #1]
 8000f3c:	701a      	strb	r2, [r3, #0]
    cmd.data[9] = UTCday;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3309      	adds	r3, #9
 8000f42:	78ba      	ldrb	r2, [r7, #2]
 8000f44:	701a      	strb	r2, [r3, #0]
    cmd.data[10] = UTChour, cmd.data[11] = UTCminute, cmd.data[12] = UTCsecond;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	330a      	adds	r3, #10
 8000f4a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	330b      	adds	r3, #11
 8000f54:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	330c      	adds	r3, #12
 8000f5e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f62:	701a      	strb	r2, [r3, #0]
    cmd.data[13] = (lat >> 8) & 0xFF, cmd.data[14] = lat & 0xFF;
 8000f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f66:	121a      	asrs	r2, r3, #8
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	330d      	adds	r3, #13
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	330e      	adds	r3, #14
 8000f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
    cmd.data[15] = (lon >> 8) & 0xFF, cmd.data[16] = lon & 0xFF;
 8000f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f7c:	121a      	asrs	r2, r3, #8
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	330f      	adds	r3, #15
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3310      	adds	r3, #16
 8000f8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]
    cmd.data[17] = (alt >> 8) & 0xFF, cmd.data[18] = alt & 0xFF;
 8000f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f92:	121a      	asrs	r2, r3, #8
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3311      	adds	r3, #17
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	3312      	adds	r3, #18
 8000fa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	701a      	strb	r2, [r3, #0]

    for(int i = 4; i<19; i++){
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e00e      	b.n	8000fca <Receiver_Cold_Restart+0x112>
        cmd.data[19] ^= cmd.data[i];
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3313      	adds	r3, #19
 8000fb0:	7819      	ldrb	r1, [r3, #0]
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781a      	ldrb	r2, [r3, #0]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3313      	adds	r3, #19
 8000fbe:	404a      	eors	r2, r1
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	701a      	strb	r2, [r3, #0]
    for(int i = 4; i<19; i++){
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	2b12      	cmp	r3, #18
 8000fce:	dded      	ble.n	8000fac <Receiver_Cold_Restart+0xf4>
    }

    cmd.data[20] = 0x0D;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3314      	adds	r3, #20
 8000fd4:	220d      	movs	r2, #13
 8000fd6:	701a      	strb	r2, [r3, #0]
    cmd.data[21] = 0x0A;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3315      	adds	r3, #21
 8000fdc:	220a      	movs	r2, #10
 8000fde:	701a      	strb	r2, [r3, #0]
    return cmd;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fec:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <Configure_RTK_Mode_and_Operational_Function>:

uint8_t_array Configure_RTK_Mode_and_Operational_Function(uint8_t mode, uint8_t function, uint32_t survey_length, uint32_t standard_deviation, double latitude, double longitude, float altitude, float baseline_length_constraint, uint8_t attributes){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b098      	sub	sp, #96	@ 0x60
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6278      	str	r0, [r7, #36]	@ 0x24
 8001000:	61fb      	str	r3, [r7, #28]
 8001002:	ed87 0b04 	vstr	d0, [r7, #16]
 8001006:	ed87 1b02 	vstr	d1, [r7, #8]
 800100a:	ed87 2a06 	vstr	s4, [r7, #24]
 800100e:	edc7 2a01 	vstr	s5, [r7, #4]
 8001012:	460b      	mov	r3, r1
 8001014:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001018:	4613      	mov	r3, r2
 800101a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint8_t_array cmd;
	uint8_t checksum = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint32_t survey_length_cpy = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint32_t standard_deviation_cpy = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	657b      	str	r3, [r7, #84]	@ 0x54
	cmd.length = 7+37;
 800102c:	232c      	movs	r3, #44	@ 0x2c
 800102e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	cmd.data = malloc(cmd.length*sizeof(uint8_t));
 8001030:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001032:	4618      	mov	r0, r3
 8001034:	f007 fb56 	bl	80086e4 <malloc>
 8001038:	4603      	mov	r3, r0
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
	cmd.data[0] = 0xA0;
 800103c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800103e:	22a0      	movs	r2, #160	@ 0xa0
 8001040:	701a      	strb	r2, [r3, #0]
	cmd.data[1] = 0xA1;
 8001042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001044:	3301      	adds	r3, #1
 8001046:	22a1      	movs	r2, #161	@ 0xa1
 8001048:	701a      	strb	r2, [r3, #0]
	cmd.data[2] = 0x00;
 800104a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104c:	3302      	adds	r3, #2
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
	cmd.data[3] = 0x25;
 8001052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001054:	3303      	adds	r3, #3
 8001056:	2225      	movs	r2, #37	@ 0x25
 8001058:	701a      	strb	r2, [r3, #0]
	cmd.data[4] = 0x6A;
 800105a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800105c:	3304      	adds	r3, #4
 800105e:	226a      	movs	r2, #106	@ 0x6a
 8001060:	701a      	strb	r2, [r3, #0]
	cmd.data[5] = 0x06;
 8001062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001064:	3305      	adds	r3, #5
 8001066:	2206      	movs	r2, #6
 8001068:	701a      	strb	r2, [r3, #0]
	cmd.data[6] = mode;
 800106a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800106c:	3306      	adds	r3, #6
 800106e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001072:	701a      	strb	r2, [r3, #0]
	cmd.data[7] = function;
 8001074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001076:	3307      	adds	r3, #7
 8001078:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800107c:	701a      	strb	r2, [r3, #0]

	if(mode != RTK_BASE){
 800107e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001082:	2b01      	cmp	r3, #1
 8001084:	d017      	beq.n	80010b6 <Configure_RTK_Mode_and_Operational_Function+0xbe>

		for(int i=8; i<cmd.length-4;i++){
 8001086:	2308      	movs	r3, #8
 8001088:	653b      	str	r3, [r7, #80]	@ 0x50
 800108a:	e007      	b.n	800109c <Configure_RTK_Mode_and_Operational_Function+0xa4>
			cmd.data[i] = 0x00;
 800108c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800108e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001090:	4413      	add	r3, r2
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
		for(int i=8; i<cmd.length-4;i++){
 8001096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001098:	3301      	adds	r3, #1
 800109a:	653b      	str	r3, [r7, #80]	@ 0x50
 800109c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800109e:	3b04      	subs	r3, #4
 80010a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbf2      	blt.n	800108c <Configure_RTK_Mode_and_Operational_Function+0x94>
		}
		cmd.data[cmd.length-4] = attributes;
 80010a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010a8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80010aa:	3b04      	subs	r3, #4
 80010ac:	4413      	add	r3, r2
 80010ae:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	e086      	b.n	80011c4 <Configure_RTK_Mode_and_Operational_Function+0x1cc>
	}

	else{

		if((survey_length >= 60) && (survey_length <= 1209600)){
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80010ba:	d906      	bls.n	80010ca <Configure_RTK_Mode_and_Operational_Function+0xd2>
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	4a5b      	ldr	r2, [pc, #364]	@ (800122c <Configure_RTK_Mode_and_Operational_Function+0x234>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d802      	bhi.n	80010ca <Configure_RTK_Mode_and_Operational_Function+0xd2>
			survey_length_cpy = survey_length;
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80010c8:	e001      	b.n	80010ce <Configure_RTK_Mode_and_Operational_Function+0xd6>
		}else{survey_length_cpy = 60;}
 80010ca:	233c      	movs	r3, #60	@ 0x3c
 80010cc:	65bb      	str	r3, [r7, #88]	@ 0x58

		if((standard_deviation >= 3) && (standard_deviation <= 100)){
 80010ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d905      	bls.n	80010e0 <Configure_RTK_Mode_and_Operational_Function+0xe8>
 80010d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010d6:	2b64      	cmp	r3, #100	@ 0x64
 80010d8:	d802      	bhi.n	80010e0 <Configure_RTK_Mode_and_Operational_Function+0xe8>
			standard_deviation_cpy = standard_deviation;
 80010da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80010de:	e001      	b.n	80010e4 <Configure_RTK_Mode_and_Operational_Function+0xec>
		}else{standard_deviation_cpy = 3;}
 80010e0:	2303      	movs	r3, #3
 80010e2:	657b      	str	r3, [r7, #84]	@ 0x54

		for(int i=0; i<4; i++){
 80010e4:	2300      	movs	r3, #0
 80010e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80010e8:	e01c      	b.n	8001124 <Configure_RTK_Mode_and_Operational_Function+0x12c>
			cmd.data[i+8] = (survey_length_cpy>>(8*(3-i)) ) & 0xFF;
 80010ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010ec:	f1c3 0303 	rsb	r3, r3, #3
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80010f4:	fa22 f103 	lsr.w	r1, r2, r3
 80010f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010fc:	3308      	adds	r3, #8
 80010fe:	4413      	add	r3, r2
 8001100:	b2ca      	uxtb	r2, r1
 8001102:	701a      	strb	r2, [r3, #0]
			cmd.data[i+12] = (standard_deviation_cpy>>(8*(3-i)) ) & 0xFF;
 8001104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001106:	f1c3 0303 	rsb	r3, r3, #3
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800110e:	fa22 f103 	lsr.w	r1, r2, r3
 8001112:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001116:	330c      	adds	r3, #12
 8001118:	4413      	add	r3, r2
 800111a:	b2ca      	uxtb	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<4; i++){
 800111e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001120:	3301      	adds	r3, #1
 8001122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001126:	2b03      	cmp	r3, #3
 8001128:	dddf      	ble.n	80010ea <Configure_RTK_Mode_and_Operational_Function+0xf2>
		}

		uint8_t* lat_ptr = (uint8_t*) &latitude;
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		uint8_t* lon_ptr = (uint8_t*) &longitude;
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	63bb      	str	r3, [r7, #56]	@ 0x38
		uint8_t* alt_ptr = (uint8_t*) &altitude;
 8001136:	f107 0318 	add.w	r3, r7, #24
 800113a:	637b      	str	r3, [r7, #52]	@ 0x34
		uint8_t* blc_ptr = (uint8_t*) &baseline_length_constraint;
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
		//Has to be fed into the receiver as big endian!!!! Check when testing...
		for(int i=0; i<8; i++){
 8001140:	2300      	movs	r3, #0
 8001142:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001144:	e01a      	b.n	800117c <Configure_RTK_Mode_and_Operational_Function+0x184>
			cmd.data[i+16] = lat_ptr[7-i];
 8001146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001148:	f1c3 0307 	rsb	r3, r3, #7
 800114c:	461a      	mov	r2, r3
 800114e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001150:	441a      	add	r2, r3
 8001152:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001154:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001156:	3310      	adds	r3, #16
 8001158:	440b      	add	r3, r1
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	701a      	strb	r2, [r3, #0]
		    cmd.data[i+24] = lon_ptr[7-i];
 800115e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001160:	f1c3 0307 	rsb	r3, r3, #7
 8001164:	461a      	mov	r2, r3
 8001166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001168:	441a      	add	r2, r3
 800116a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800116c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800116e:	3318      	adds	r3, #24
 8001170:	440b      	add	r3, r1
 8001172:	7812      	ldrb	r2, [r2, #0]
 8001174:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<8; i++){
 8001176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001178:	3301      	adds	r3, #1
 800117a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800117c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800117e:	2b07      	cmp	r3, #7
 8001180:	dde1      	ble.n	8001146 <Configure_RTK_Mode_and_Operational_Function+0x14e>
		}
		for(int i=0; i<4; i++){
 8001182:	2300      	movs	r3, #0
 8001184:	647b      	str	r3, [r7, #68]	@ 0x44
 8001186:	e01a      	b.n	80011be <Configure_RTK_Mode_and_Operational_Function+0x1c6>
			cmd.data[i+32] = alt_ptr[7-i];
 8001188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	461a      	mov	r2, r3
 8001190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001192:	441a      	add	r2, r3
 8001194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001198:	3320      	adds	r3, #32
 800119a:	440b      	add	r3, r1
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	701a      	strb	r2, [r3, #0]
			cmd.data[i+36] = blc_ptr[7-i];
 80011a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	461a      	mov	r2, r3
 80011a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011aa:	441a      	add	r2, r3
 80011ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011b0:	3324      	adds	r3, #36	@ 0x24
 80011b2:	440b      	add	r3, r1
 80011b4:	7812      	ldrb	r2, [r2, #0]
 80011b6:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<4; i++){
 80011b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ba:	3301      	adds	r3, #1
 80011bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80011be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	dde1      	ble.n	8001188 <Configure_RTK_Mode_and_Operational_Function+0x190>
		}
	}

    for(int i=4; i<cmd.length-3; i++){
 80011c4:	2304      	movs	r3, #4
 80011c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80011c8:	e00b      	b.n	80011e2 <Configure_RTK_Mode_and_Operational_Function+0x1ea>
        checksum ^= cmd.data[i];
 80011ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011ce:	4413      	add	r3, r2
 80011d0:	781a      	ldrb	r2, [r3, #0]
 80011d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80011d6:	4053      	eors	r3, r2
 80011d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    for(int i=4; i<cmd.length-3; i++){
 80011dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011de:	3301      	adds	r3, #1
 80011e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80011e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011e4:	3b03      	subs	r3, #3
 80011e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbee      	blt.n	80011ca <Configure_RTK_Mode_and_Operational_Function+0x1d2>
    }

    cmd.data[cmd.length-3] = checksum;
 80011ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011f0:	3b03      	subs	r3, #3
 80011f2:	4413      	add	r3, r2
 80011f4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80011f8:	701a      	strb	r2, [r3, #0]
    cmd.data[cmd.length-2] = 0x0D;
 80011fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011fc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011fe:	3b02      	subs	r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	220d      	movs	r2, #13
 8001204:	701a      	strb	r2, [r3, #0]
    cmd.data[cmd.length-1] = 0x0A;
 8001206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001208:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800120a:	3b01      	subs	r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	220a      	movs	r2, #10
 8001210:	701a      	strb	r2, [r3, #0]

	return cmd;
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	461a      	mov	r2, r3
 8001216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800121e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001222:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001224:	3760      	adds	r7, #96	@ 0x60
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	00127500 	.word	0x00127500

08001230 <Configure_Binary_Measurement_Data_Output>:

uint8_t_array Configure_Binary_Measurement_Data_Output(uint8_t frequency, uint8_t MeasTimeEnabling, uint8_t RawMeasEnabling, uint8_t SV_CH_StatusEnabling, uint8_t RCVEnabling, uint8_t SubframeDifferentCV, uint8_t ExtendedRawMeas, uint8_t attr){
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	4608      	mov	r0, r1
 800123a:	4611      	mov	r1, r2
 800123c:	461a      	mov	r2, r3
 800123e:	4603      	mov	r3, r0
 8001240:	70fb      	strb	r3, [r7, #3]
 8001242:	460b      	mov	r3, r1
 8001244:	70bb      	strb	r3, [r7, #2]
 8001246:	4613      	mov	r3, r2
 8001248:	707b      	strb	r3, [r7, #1]
    /*Builds the command to configure binary measurement data output on B16/17. Takes the frequency in form of int. */
    uint8_t_array command;
    command.length = 16;
 800124a:	2310      	movs	r3, #16
 800124c:	81bb      	strh	r3, [r7, #12]
    command.data = (uint8_t*)malloc(command.length*sizeof(uint8_t));
 800124e:	89bb      	ldrh	r3, [r7, #12]
 8001250:	4618      	mov	r0, r3
 8001252:	f007 fa47 	bl	80086e4 <malloc>
 8001256:	4603      	mov	r3, r0
 8001258:	60bb      	str	r3, [r7, #8]
    uint8_t checksum = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	75fb      	strb	r3, [r7, #23]
    int i = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
    //prologue of command message (payload length 9).
    command.data[0] = 0xA0;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	22a0      	movs	r2, #160	@ 0xa0
 8001266:	701a      	strb	r2, [r3, #0]
    command.data[1] = 0xA1;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3301      	adds	r3, #1
 800126c:	22a1      	movs	r2, #161	@ 0xa1
 800126e:	701a      	strb	r2, [r3, #0]
    command.data[2] = 0x00;
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	3302      	adds	r3, #2
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
    command.data[3] = 0x09;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	3303      	adds	r3, #3
 800127c:	2209      	movs	r2, #9
 800127e:	701a      	strb	r2, [r3, #0]
    command.data[4] = 0x1E;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	3304      	adds	r3, #4
 8001284:	221e      	movs	r2, #30
 8001286:	701a      	strb	r2, [r3, #0]
    switch(frequency){
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	3b01      	subs	r3, #1
 800128c:	2b13      	cmp	r3, #19
 800128e:	d84e      	bhi.n	800132e <Configure_Binary_Measurement_Data_Output+0xfe>
 8001290:	a201      	add	r2, pc, #4	@ (adr r2, 8001298 <Configure_Binary_Measurement_Data_Output+0x68>)
 8001292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001296:	bf00      	nop
 8001298:	080012e9 	.word	0x080012e9
 800129c:	080012f3 	.word	0x080012f3
 80012a0:	0800132f 	.word	0x0800132f
 80012a4:	080012fd 	.word	0x080012fd
 80012a8:	08001307 	.word	0x08001307
 80012ac:	0800132f 	.word	0x0800132f
 80012b0:	0800132f 	.word	0x0800132f
 80012b4:	08001325 	.word	0x08001325
 80012b8:	0800132f 	.word	0x0800132f
 80012bc:	08001311 	.word	0x08001311
 80012c0:	0800132f 	.word	0x0800132f
 80012c4:	0800132f 	.word	0x0800132f
 80012c8:	0800132f 	.word	0x0800132f
 80012cc:	0800132f 	.word	0x0800132f
 80012d0:	0800132f 	.word	0x0800132f
 80012d4:	0800132f 	.word	0x0800132f
 80012d8:	0800132f 	.word	0x0800132f
 80012dc:	0800132f 	.word	0x0800132f
 80012e0:	0800132f 	.word	0x0800132f
 80012e4:	0800131b 	.word	0x0800131b
        case 1:
            command.data[5] = 0x00;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	3305      	adds	r3, #5
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
            break;
 80012f0:	e021      	b.n	8001336 <Configure_Binary_Measurement_Data_Output+0x106>
        case 2:
            command.data[5] = 0x01;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	3305      	adds	r3, #5
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
            break;
 80012fa:	e01c      	b.n	8001336 <Configure_Binary_Measurement_Data_Output+0x106>
        case 4:
            command.data[5] = 0x02;
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	3305      	adds	r3, #5
 8001300:	2202      	movs	r2, #2
 8001302:	701a      	strb	r2, [r3, #0]
            break;
 8001304:	e017      	b.n	8001336 <Configure_Binary_Measurement_Data_Output+0x106>
        case 5:
            command.data[5] = 0x03;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	3305      	adds	r3, #5
 800130a:	2203      	movs	r2, #3
 800130c:	701a      	strb	r2, [r3, #0]
            break;
 800130e:	e012      	b.n	8001336 <Configure_Binary_Measurement_Data_Output+0x106>
        case 10:
            command.data[5] = 0x04;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3305      	adds	r3, #5
 8001314:	2204      	movs	r2, #4
 8001316:	701a      	strb	r2, [r3, #0]
            break;
 8001318:	e00d      	b.n	8001336 <Configure_Binary_Measurement_Data_Output+0x106>
        case 20:
            command.data[5] = 0x05;
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3305      	adds	r3, #5
 800131e:	2205      	movs	r2, #5
 8001320:	701a      	strb	r2, [r3, #0]
            break;
 8001322:	e008      	b.n	8001336 <Configure_Binary_Measurement_Data_Output+0x106>
        case 8:
            command.data[5] = 0x06;
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	3305      	adds	r3, #5
 8001328:	2206      	movs	r2, #6
 800132a:	701a      	strb	r2, [r3, #0]
            break;
 800132c:	e003      	b.n	8001336 <Configure_Binary_Measurement_Data_Output+0x106>
        default:
            command.data[5] =0xFF;
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	3305      	adds	r3, #5
 8001332:	22ff      	movs	r2, #255	@ 0xff
 8001334:	701a      	strb	r2, [r3, #0]
    }

    command.data[6] = MeasTimeEnabling;
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	3306      	adds	r3, #6
 800133a:	78ba      	ldrb	r2, [r7, #2]
 800133c:	701a      	strb	r2, [r3, #0]
    command.data[7] = RawMeasEnabling;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	3307      	adds	r3, #7
 8001342:	787a      	ldrb	r2, [r7, #1]
 8001344:	701a      	strb	r2, [r3, #0]
    command.data[8] = SV_CH_StatusEnabling;
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	3308      	adds	r3, #8
 800134a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800134e:	701a      	strb	r2, [r3, #0]
    command.data[9] = RCVEnabling;
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	3309      	adds	r3, #9
 8001354:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001358:	701a      	strb	r2, [r3, #0]
    command.data[10] = SubframeDifferentCV;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	330a      	adds	r3, #10
 800135e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001362:	701a      	strb	r2, [r3, #0]
    command.data[11] = ExtendedRawMeas;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	330b      	adds	r3, #11
 8001368:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800136c:	701a      	strb	r2, [r3, #0]
    command.data[12] = attr;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	330c      	adds	r3, #12
 8001372:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001376:	701a      	strb	r2, [r3, #0]

    for(i=4; i<command.length-3; i++){
 8001378:	2304      	movs	r3, #4
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	e009      	b.n	8001392 <Configure_Binary_Measurement_Data_Output+0x162>
        checksum ^= command.data[i];
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4413      	add	r3, r2
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	4053      	eors	r3, r2
 800138a:	75fb      	strb	r3, [r7, #23]
    for(i=4; i<command.length-3; i++){
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	3301      	adds	r3, #1
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	89bb      	ldrh	r3, [r7, #12]
 8001394:	3b03      	subs	r3, #3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbf0      	blt.n	800137e <Configure_Binary_Measurement_Data_Output+0x14e>
    }
    //ending of command message
    command.data[command.length-3] = checksum;
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	4413      	add	r3, r2
 80013a4:	7dfa      	ldrb	r2, [r7, #23]
 80013a6:	701a      	strb	r2, [r3, #0]
    command.data[command.length-2] = 0x0D;
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	89bb      	ldrh	r3, [r7, #12]
 80013ac:	3b02      	subs	r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	220d      	movs	r2, #13
 80013b2:	701a      	strb	r2, [r3, #0]
    command.data[command.length-1] = 0x0A;
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	89bb      	ldrh	r3, [r7, #12]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	220a      	movs	r2, #10
 80013be:	701a      	strb	r2, [r3, #0]

    return command;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	461a      	mov	r2, r3
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013cc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <Configure_NMEA_Message_Interval>:
	cmd.data[7+msgID.length] = 0x0A;

	return cmd;
}

uint8_t_array Configure_NMEA_Message_Interval(uint8_t* intervals){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	/*Builds a Configure NMEA message interval to modify the time intervals
	 * input: uint8_t* of values 0x00 to 0xFF that contains the times in seconds of the intervals of each message type and the attributes at the last bit
	 * must be of length 13: {GGA, GSA, GSV, GLL, RMC, VTG, ZDA, GNS, GBS, GRS, DTM, GST, ATTRIBUTES}
	 * ATTRIBUTES: 00 update to SRAM. 01 update to SRAM & FLASH.*/
	uint8_t_array command;
	int i = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
	uint8_t checksum = 0x00;
 80013e6:	2300      	movs	r3, #0
 80013e8:	74fb      	strb	r3, [r7, #19]
	command.length = 22;
 80013ea:	2316      	movs	r3, #22
 80013ec:	81bb      	strh	r3, [r7, #12]
	command.data = (uint8_t*)malloc(command.length*sizeof(uint8_t));
 80013ee:	89bb      	ldrh	r3, [r7, #12]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f007 f977 	bl	80086e4 <malloc>
 80013f6:	4603      	mov	r3, r0
 80013f8:	60bb      	str	r3, [r7, #8]
	command.data[0] = 0xA0;
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	22a0      	movs	r2, #160	@ 0xa0
 80013fe:	701a      	strb	r2, [r3, #0]
	command.data[1] = 0xA1;
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	3301      	adds	r3, #1
 8001404:	22a1      	movs	r2, #161	@ 0xa1
 8001406:	701a      	strb	r2, [r3, #0]
	command.data[2] = 0x00;
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	3302      	adds	r3, #2
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
	command.data[3] = 0x0F;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	3303      	adds	r3, #3
 8001414:	220f      	movs	r2, #15
 8001416:	701a      	strb	r2, [r3, #0]
	command.data[4] = 0x64;
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3304      	adds	r3, #4
 800141c:	2264      	movs	r2, #100	@ 0x64
 800141e:	701a      	strb	r2, [r3, #0]
	command.data[5] = 0x02;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	3305      	adds	r3, #5
 8001424:	2202      	movs	r2, #2
 8001426:	701a      	strb	r2, [r3, #0]
	for(i=6; i<19; i++){
 8001428:	2306      	movs	r3, #6
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e00b      	b.n	8001446 <Configure_NMEA_Message_Interval+0x6e>
		command.data[i] =  intervals[i-6];
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3b06      	subs	r3, #6
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	441a      	add	r2, r3
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	440b      	add	r3, r1
 800143c:	7812      	ldrb	r2, [r2, #0]
 800143e:	701a      	strb	r2, [r3, #0]
	for(i=6; i<19; i++){
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	3301      	adds	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2b12      	cmp	r3, #18
 800144a:	ddf0      	ble.n	800142e <Configure_NMEA_Message_Interval+0x56>
	}
	for(i=4; i<19; i++){
 800144c:	2304      	movs	r3, #4
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	e009      	b.n	8001466 <Configure_NMEA_Message_Interval+0x8e>
		checksum ^= command.data[i];
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	4413      	add	r3, r2
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	7cfb      	ldrb	r3, [r7, #19]
 800145c:	4053      	eors	r3, r2
 800145e:	74fb      	strb	r3, [r7, #19]
	for(i=4; i<19; i++){
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	2b12      	cmp	r3, #18
 800146a:	ddf2      	ble.n	8001452 <Configure_NMEA_Message_Interval+0x7a>
	}
	command.data[19] = checksum;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3313      	adds	r3, #19
 8001470:	7cfa      	ldrb	r2, [r7, #19]
 8001472:	701a      	strb	r2, [r3, #0]
	command.data[20] = 0x0D;
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	3314      	adds	r3, #20
 8001478:	220d      	movs	r2, #13
 800147a:	701a      	strb	r2, [r3, #0]
	command.data[21] = 0x0A;
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	3315      	adds	r3, #21
 8001480:	220a      	movs	r2, #10
 8001482:	701a      	strb	r2, [r3, #0]

	return command;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	461a      	mov	r2, r3
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001490:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <Configure_Navigation_Data_Message_Interval>:

uint8_t_array Configure_Navigation_Data_Message_Interval(uint8_t interval, uint8_t attr){
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	70fb      	strb	r3, [r7, #3]
 80014a8:	4613      	mov	r3, r2
 80014aa:	70bb      	strb	r3, [r7, #2]
	/*Builds a message to configure the navigation data (0x8A) message interval in seconds.
	 * inputs: interval, (0-255) in seconds. attr: UPDATE_TO_SRAM or UPDATE_TO_SRAM_AND_FLASH*/
	uint8_t_array cmd;
	cmd.length = 11;
 80014ac:	230b      	movs	r3, #11
 80014ae:	823b      	strh	r3, [r7, #16]
	cmd.data = malloc(cmd.length*sizeof(uint8_t));
 80014b0:	8a3b      	ldrh	r3, [r7, #16]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f007 f916 	bl	80086e4 <malloc>
 80014b8:	4603      	mov	r3, r0
 80014ba:	60fb      	str	r3, [r7, #12]
	if(cmd.data == NULL){exit(-1);}
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d103      	bne.n	80014ca <Configure_Navigation_Data_Message_Interval+0x2e>
 80014c2:	f04f 30ff 	mov.w	r0, #4294967295
 80014c6:	f007 f8fb 	bl	80086c0 <exit>
	cmd.data[0] = 0xA0, cmd.data[1] = 0xA1, cmd.data[cmd.length-2] = 0x0D, cmd.data[cmd.length-1] = 0x0A;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	22a0      	movs	r2, #160	@ 0xa0
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3301      	adds	r3, #1
 80014d4:	22a1      	movs	r2, #161	@ 0xa1
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	8a3b      	ldrh	r3, [r7, #16]
 80014dc:	3b02      	subs	r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	220d      	movs	r2, #13
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	8a3b      	ldrh	r3, [r7, #16]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	220a      	movs	r2, #10
 80014ee:	701a      	strb	r2, [r3, #0]
	cmd.data[2] = 0x00, cmd.data[3] = 0x04, cmd.data[4] = 0x64, cmd.data[5] = 0x2F;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3302      	adds	r3, #2
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3303      	adds	r3, #3
 80014fc:	2204      	movs	r2, #4
 80014fe:	701a      	strb	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3304      	adds	r3, #4
 8001504:	2264      	movs	r2, #100	@ 0x64
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3305      	adds	r3, #5
 800150c:	222f      	movs	r2, #47	@ 0x2f
 800150e:	701a      	strb	r2, [r3, #0]
	cmd.data[6] = interval, cmd.data[7] = attr;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3306      	adds	r3, #6
 8001514:	78fa      	ldrb	r2, [r7, #3]
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3307      	adds	r3, #7
 800151c:	78ba      	ldrb	r2, [r7, #2]
 800151e:	701a      	strb	r2, [r3, #0]
	cmd.data[8] = 0x00;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3308      	adds	r3, #8
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
	for(int i = 4; i<cmd.length-3; i++){
 8001528:	2304      	movs	r3, #4
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e00e      	b.n	800154c <Configure_Navigation_Data_Message_Interval+0xb0>
		cmd.data[8] ^= cmd.data[i];
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3308      	adds	r3, #8
 8001532:	7819      	ldrb	r1, [r3, #0]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	4413      	add	r3, r2
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3308      	adds	r3, #8
 8001540:	404a      	eors	r2, r1
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]
	for(int i = 4; i<cmd.length-3; i++){
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	8a3b      	ldrh	r3, [r7, #16]
 800154e:	3b03      	subs	r3, #3
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	429a      	cmp	r2, r3
 8001554:	dbeb      	blt.n	800152e <Configure_Navigation_Data_Message_Interval+0x92>
	}

	return cmd;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	461a      	mov	r2, r3
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001562:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <Change_Message_Format>:
uint8_t_array Change_Message_Format(char* message_type, uint8_t update_memory){
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	4613      	mov	r3, r2
 800157c:	71fb      	strb	r3, [r7, #7]
	 * inputs: message_type string which can be either "NMEA", "Binary" or "No" depending on if we want the messages to be sent in NMEA, binary, or no message to be sent, respectively.
	 * uint8_t containing update_memory, with options UPDATE_TO_SRAM or UPDATE_TO_SRAM_AND_FLASH depending on if we want the order to be stored only in SRAM or also in FLASH.
	 * Check Phoenix receiver (skytraq) manual for more information.
	 * */
	uint8_t_array command;
	command.length = 10;
 800157e:	230a      	movs	r3, #10
 8001580:	82bb      	strh	r3, [r7, #20]
	command.data = (uint8_t*)malloc(command.length*sizeof(uint8_t));
 8001582:	8abb      	ldrh	r3, [r7, #20]
 8001584:	4618      	mov	r0, r3
 8001586:	f007 f8ad 	bl	80086e4 <malloc>
 800158a:	4603      	mov	r3, r0
 800158c:	613b      	str	r3, [r7, #16]
	if(command.data==NULL){exit(-1);}
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d103      	bne.n	800159c <Change_Message_Format+0x2c>
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f007 f892 	bl	80086c0 <exit>
	uint8_t checksum = 0x00;
 800159c:	2300      	movs	r3, #0
 800159e:	77fb      	strb	r3, [r7, #31]
	int i = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]

	command.data[0] = 0xA0;
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	22a0      	movs	r2, #160	@ 0xa0
 80015a8:	701a      	strb	r2, [r3, #0]
	command.data[1] = 0xA1;
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	3301      	adds	r3, #1
 80015ae:	22a1      	movs	r2, #161	@ 0xa1
 80015b0:	701a      	strb	r2, [r3, #0]
	command.data[2] = 0x00;
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	3302      	adds	r3, #2
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
	command.data[3] = 0x03; //2-3: payload length is always 3 for this message.
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	3303      	adds	r3, #3
 80015be:	2203      	movs	r2, #3
 80015c0:	701a      	strb	r2, [r3, #0]
	command.data[4] = 0x09;
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2209      	movs	r2, #9
 80015c8:	701a      	strb	r2, [r3, #0]
	if(strcmp(message_type, "NMEA")==0){
 80015ca:	4926      	ldr	r1, [pc, #152]	@ (8001664 <Change_Message_Format+0xf4>)
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f7fe fdff 	bl	80001d0 <strcmp>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d103      	bne.n	80015e0 <Change_Message_Format+0x70>
		command.data[5] = 0x01;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	3305      	adds	r3, #5
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
	}
	if(strcmp(message_type, "Binary")==0){
 80015e0:	4921      	ldr	r1, [pc, #132]	@ (8001668 <Change_Message_Format+0xf8>)
 80015e2:	68b8      	ldr	r0, [r7, #8]
 80015e4:	f7fe fdf4 	bl	80001d0 <strcmp>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d103      	bne.n	80015f6 <Change_Message_Format+0x86>
		command.data[5] = 0x02;
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	3305      	adds	r3, #5
 80015f2:	2202      	movs	r2, #2
 80015f4:	701a      	strb	r2, [r3, #0]
	}
	if(strcmp(message_type, "No")==0){
 80015f6:	491d      	ldr	r1, [pc, #116]	@ (800166c <Change_Message_Format+0xfc>)
 80015f8:	68b8      	ldr	r0, [r7, #8]
 80015fa:	f7fe fde9 	bl	80001d0 <strcmp>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <Change_Message_Format+0x9c>
		command.data[5] = 0x00;
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	3305      	adds	r3, #5
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
	}
	command.data[6] = update_memory;
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	3306      	adds	r3, #6
 8001610:	79fa      	ldrb	r2, [r7, #7]
 8001612:	701a      	strb	r2, [r3, #0]

	for(i=4; i<7; i++){ //Checksum starts from msg ID to end of payload
 8001614:	2304      	movs	r3, #4
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	e009      	b.n	800162e <Change_Message_Format+0xbe>
		checksum ^= command.data[i];
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	4413      	add	r3, r2
 8001620:	781a      	ldrb	r2, [r3, #0]
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	4053      	eors	r3, r2
 8001626:	77fb      	strb	r3, [r7, #31]
	for(i=4; i<7; i++){ //Checksum starts from msg ID to end of payload
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	3301      	adds	r3, #1
 800162c:	61bb      	str	r3, [r7, #24]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b06      	cmp	r3, #6
 8001632:	ddf2      	ble.n	800161a <Change_Message_Format+0xaa>
	}
	command.data[7] = checksum;
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	3307      	adds	r3, #7
 8001638:	7ffa      	ldrb	r2, [r7, #31]
 800163a:	701a      	strb	r2, [r3, #0]
	command.data[8] = 0x0D;
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	3308      	adds	r3, #8
 8001640:	220d      	movs	r2, #13
 8001642:	701a      	strb	r2, [r3, #0]
	command.data[9] = 0x0A;
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	3309      	adds	r3, #9
 8001648:	220a      	movs	r2, #10
 800164a:	701a      	strb	r2, [r3, #0]

	return command;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	461a      	mov	r2, r3
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001658:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	0800b620 	.word	0x0800b620
 8001668:	0800b628 	.word	0x0800b628
 800166c:	0800b630 	.word	0x0800b630

08001670 <Build_uint8_t_Command>:

uint8_t_array Build_uint8_t_Command(uint8_t* array, uint16_t size){
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	4613      	mov	r3, r2
 800167c:	80fb      	strh	r3, [r7, #6]
	uint8_t_array cmd;
	cmd.length = size;
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	82bb      	strh	r3, [r7, #20]
	cmd.data = malloc(cmd.length*sizeof(uint8_t));
 8001682:	8abb      	ldrh	r3, [r7, #20]
 8001684:	4618      	mov	r0, r3
 8001686:	f007 f82d 	bl	80086e4 <malloc>
 800168a:	4603      	mov	r3, r0
 800168c:	613b      	str	r3, [r7, #16]
	if(cmd.data == NULL){exit(-1);}
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d103      	bne.n	800169c <Build_uint8_t_Command+0x2c>
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f007 f812 	bl	80086c0 <exit>
	cmd.data = array;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	613b      	str	r3, [r7, #16]
	return cmd;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	461a      	mov	r2, r3
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016ac:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <Antenna_Switch>:
        default:                     return "Unknown Error";           // Unknown result code
    }
}

//Switch:
void Antenna_Switch(int op){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    "CHANGES_POLARIZATION" that is used to study changes in forward signal polarization.*/
    /*Set the correct GPIOx GPIO_Pin once we have PCB layout!!*/
    //Reset all pins to avoid unexpected behaviours in the PCB.
    //We assume for the moment that PC13 is control 1 and PC14 is control 2

    uint16_t control_2_1 = GPIO_PIN_13, control_2_2 = GPIO_PIN_14;
 80016c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c4:	82fb      	strh	r3, [r7, #22]
 80016c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016ca:	82bb      	strh	r3, [r7, #20]
    uint16_t control_4_1 = GPIO_PIN_2, control_4_2 = GPIO_PIN_10, control_4_3 = GPIO_PIN_11; //PLACE THEM IN DEFINE OR HIGH LEVEL!!
 80016cc:	2304      	movs	r3, #4
 80016ce:	827b      	strh	r3, [r7, #18]
 80016d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d4:	823b      	strh	r3, [r7, #16]
 80016d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016da:	81fb      	strh	r3, [r7, #14]

    //Reset 2-in switch:
    HAL_GPIO_WritePin(GPIOC, control_2_1, GPIO_PIN_RESET);
 80016dc:	8afb      	ldrh	r3, [r7, #22]
 80016de:	2200      	movs	r2, #0
 80016e0:	4619      	mov	r1, r3
 80016e2:	483f      	ldr	r0, [pc, #252]	@ (80017e0 <Antenna_Switch+0x128>)
 80016e4:	f002 fde8 	bl	80042b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, control_2_2, GPIO_PIN_RESET);
 80016e8:	8abb      	ldrh	r3, [r7, #20]
 80016ea:	2200      	movs	r2, #0
 80016ec:	4619      	mov	r1, r3
 80016ee:	483c      	ldr	r0, [pc, #240]	@ (80017e0 <Antenna_Switch+0x128>)
 80016f0:	f002 fde2 	bl	80042b8 <HAL_GPIO_WritePin>
    //Reset 4-in switch:
    //We assume for the moment that PB2 is control 1, PB10 is control 2, PB11 is control 3.

    HAL_GPIO_WritePin(GPIOB, control_4_2, GPIO_PIN_RESET);
 80016f4:	8a3b      	ldrh	r3, [r7, #16]
 80016f6:	2200      	movs	r2, #0
 80016f8:	4619      	mov	r1, r3
 80016fa:	483a      	ldr	r0, [pc, #232]	@ (80017e4 <Antenna_Switch+0x12c>)
 80016fc:	f002 fddc 	bl	80042b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, control_4_1, GPIO_PIN_SET);
 8001700:	8a7b      	ldrh	r3, [r7, #18]
 8001702:	2201      	movs	r2, #1
 8001704:	4619      	mov	r1, r3
 8001706:	4837      	ldr	r0, [pc, #220]	@ (80017e4 <Antenna_Switch+0x12c>)
 8001708:	f002 fdd6 	bl	80042b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, control_4_3, GPIO_PIN_SET);
 800170c:	89fb      	ldrh	r3, [r7, #14]
 800170e:	2201      	movs	r2, #1
 8001710:	4619      	mov	r1, r3
 8001712:	4834      	ldr	r0, [pc, #208]	@ (80017e4 <Antenna_Switch+0x12c>)
 8001714:	f002 fdd0 	bl	80042b8 <HAL_GPIO_WritePin>

    switch (op){
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	2b04      	cmp	r3, #4
 800171e:	d85b      	bhi.n	80017d8 <Antenna_Switch+0x120>
 8001720:	a201      	add	r2, pc, #4	@ (adr r2, 8001728 <Antenna_Switch+0x70>)
 8001722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001726:	bf00      	nop
 8001728:	0800173d 	.word	0x0800173d
 800172c:	08001763 	.word	0x08001763
 8001730:	0800177d 	.word	0x0800177d
 8001734:	08001797 	.word	0x08001797
 8001738:	080017b1 	.word	0x080017b1
    case RO_FRONT_RHCP:
    	//TODO: Check this with AC!!
		//Set the 2-in switch to Navigation UP
		HAL_GPIO_WritePin(GPIOC, control_2_1, GPIO_PIN_SET);
 800173c:	8afb      	ldrh	r3, [r7, #22]
 800173e:	2201      	movs	r2, #1
 8001740:	4619      	mov	r1, r3
 8001742:	4827      	ldr	r0, [pc, #156]	@ (80017e0 <Antenna_Switch+0x128>)
 8001744:	f002 fdb8 	bl	80042b8 <HAL_GPIO_WritePin>
		//Set the 4-in switch to Front antenna (RHCP)
		HAL_GPIO_WritePin(GPIOB, control_4_1, GPIO_PIN_SET);
 8001748:	8a7b      	ldrh	r3, [r7, #18]
 800174a:	2201      	movs	r2, #1
 800174c:	4619      	mov	r1, r3
 800174e:	4825      	ldr	r0, [pc, #148]	@ (80017e4 <Antenna_Switch+0x12c>)
 8001750:	f002 fdb2 	bl	80042b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, control_4_2, GPIO_PIN_SET);
 8001754:	8a3b      	ldrh	r3, [r7, #16]
 8001756:	2201      	movs	r2, #1
 8001758:	4619      	mov	r1, r3
 800175a:	4822      	ldr	r0, [pc, #136]	@ (80017e4 <Antenna_Switch+0x12c>)
 800175c:	f002 fdac 	bl	80042b8 <HAL_GPIO_WritePin>
		break;
 8001760:	e039      	b.n	80017d6 <Antenna_Switch+0x11e>

    case RO_FRONT_LHCP:
    	//TODO: Check this with AC!!
		//Set the 2-in switch to Navigation UP
		HAL_GPIO_WritePin(GPIOC, control_2_1, GPIO_PIN_SET);
 8001762:	8afb      	ldrh	r3, [r7, #22]
 8001764:	2201      	movs	r2, #1
 8001766:	4619      	mov	r1, r3
 8001768:	481d      	ldr	r0, [pc, #116]	@ (80017e0 <Antenna_Switch+0x128>)
 800176a:	f002 fda5 	bl	80042b8 <HAL_GPIO_WritePin>
		//Set the 4-in switch to Front antenna (LHCP)
		HAL_GPIO_WritePin(GPIOB, control_4_3, GPIO_PIN_SET);
 800176e:	89fb      	ldrh	r3, [r7, #14]
 8001770:	2201      	movs	r2, #1
 8001772:	4619      	mov	r1, r3
 8001774:	481b      	ldr	r0, [pc, #108]	@ (80017e4 <Antenna_Switch+0x12c>)
 8001776:	f002 fd9f 	bl	80042b8 <HAL_GPIO_WritePin>
		break;
 800177a:	e02c      	b.n	80017d6 <Antenna_Switch+0x11e>

    case RO_BEHIND:
    	//Set the 2-in switch to Navigation UP
		HAL_GPIO_WritePin(GPIOC, control_2_1, GPIO_PIN_SET);
 800177c:	8afb      	ldrh	r3, [r7, #22]
 800177e:	2201      	movs	r2, #1
 8001780:	4619      	mov	r1, r3
 8001782:	4817      	ldr	r0, [pc, #92]	@ (80017e0 <Antenna_Switch+0x128>)
 8001784:	f002 fd98 	bl	80042b8 <HAL_GPIO_WritePin>
		//Set the 4-in switch to Back antenna
		HAL_GPIO_WritePin(GPIOB, control_4_1, GPIO_PIN_SET);
 8001788:	8a7b      	ldrh	r3, [r7, #18]
 800178a:	2201      	movs	r2, #1
 800178c:	4619      	mov	r1, r3
 800178e:	4815      	ldr	r0, [pc, #84]	@ (80017e4 <Antenna_Switch+0x12c>)
 8001790:	f002 fd92 	bl	80042b8 <HAL_GPIO_WritePin>
		break;
 8001794:	e01f      	b.n	80017d6 <Antenna_Switch+0x11e>

    case REFLECTOMETRY:
    	 //Set the 2-in switch to Navigation UP
		HAL_GPIO_WritePin(GPIOC, control_2_1, GPIO_PIN_SET);
 8001796:	8afb      	ldrh	r3, [r7, #22]
 8001798:	2201      	movs	r2, #1
 800179a:	4619      	mov	r1, r3
 800179c:	4810      	ldr	r0, [pc, #64]	@ (80017e0 <Antenna_Switch+0x128>)
 800179e:	f002 fd8b 	bl	80042b8 <HAL_GPIO_WritePin>
		//Set the 4-in switch to Down antenna
		HAL_GPIO_WritePin(GPIOB, control_4_2, GPIO_PIN_SET);
 80017a2:	8a3b      	ldrh	r3, [r7, #16]
 80017a4:	2201      	movs	r2, #1
 80017a6:	4619      	mov	r1, r3
 80017a8:	480e      	ldr	r0, [pc, #56]	@ (80017e4 <Antenna_Switch+0x12c>)
 80017aa:	f002 fd85 	bl	80042b8 <HAL_GPIO_WritePin>
		break;
 80017ae:	e012      	b.n	80017d6 <Antenna_Switch+0x11e>

    case CHANGES_POLARIZATION:
    	 //Set the 2-in switch to Front antenna (LHCP)
		HAL_GPIO_WritePin(GPIOC, control_2_2, GPIO_PIN_SET);
 80017b0:	8abb      	ldrh	r3, [r7, #20]
 80017b2:	2201      	movs	r2, #1
 80017b4:	4619      	mov	r1, r3
 80017b6:	480a      	ldr	r0, [pc, #40]	@ (80017e0 <Antenna_Switch+0x128>)
 80017b8:	f002 fd7e 	bl	80042b8 <HAL_GPIO_WritePin>
		//Set the 4-in switch to Front antenna (RHCP)
		HAL_GPIO_WritePin(GPIOB, control_4_1, GPIO_PIN_SET);
 80017bc:	8a7b      	ldrh	r3, [r7, #18]
 80017be:	2201      	movs	r2, #1
 80017c0:	4619      	mov	r1, r3
 80017c2:	4808      	ldr	r0, [pc, #32]	@ (80017e4 <Antenna_Switch+0x12c>)
 80017c4:	f002 fd78 	bl	80042b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, control_4_2, GPIO_PIN_SET);
 80017c8:	8a3b      	ldrh	r3, [r7, #16]
 80017ca:	2201      	movs	r2, #1
 80017cc:	4619      	mov	r1, r3
 80017ce:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <Antenna_Switch+0x12c>)
 80017d0:	f002 fd72 	bl	80042b8 <HAL_GPIO_WritePin>

    default:
    	return;
 80017d4:	e000      	b.n	80017d8 <Antenna_Switch+0x120>
    }
 return;
 80017d6:	e000      	b.n	80017da <Antenna_Switch+0x122>
    	return;
 80017d8:	bf00      	nop
}
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	48000800 	.word	0x48000800
 80017e4:	48000400 	.word	0x48000400

080017e8 <Tokenize_uint8_t_array>:
        SVID.data[i] = raw.data[19+i*31];
    }
    return SVID;
}

uint8_t_array Tokenize_uint8_t_array(uint8_t_array arr, int* beginning_mark){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	1d38      	adds	r0, r7, #4
 80017f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80017f6:	603b      	str	r3, [r7, #0]
    /*Tokenizes a buffer containing messages in binary protocol for B16/17 receivers.
    inputs: a uint8_t_array containing the buffer, an int* pointer storing the beginning point of the message we're looking for.
    beginning_mark updates itself automatically. Beware of resetting it after the buffer is complete!!
    outputs: the message.
    */
    int i = 0, j = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
    uint8_t_array msg = {NULL, 0};
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	2300      	movs	r3, #0
 8001806:	82bb      	strh	r3, [r7, #20]
    //Get the points at which the message begins and ends.
    if(*beginning_mark < arr.length -2){
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	893b      	ldrh	r3, [r7, #8]
 800180e:	3b02      	subs	r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	da5c      	bge.n	80018ce <Tokenize_uint8_t_array+0xe6>
        for(i=*beginning_mark; i<arr.length-1; i++){
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	e053      	b.n	80018c4 <Tokenize_uint8_t_array+0xdc>
            if(arr.data[i]==0xA0 && arr.data[i+1] == 0xA1){
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	4413      	add	r3, r2
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2ba0      	cmp	r3, #160	@ 0xa0
 8001826:	d14a      	bne.n	80018be <Tokenize_uint8_t_array+0xd6>
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3301      	adds	r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2ba1      	cmp	r3, #161	@ 0xa1
 8001834:	d143      	bne.n	80018be <Tokenize_uint8_t_array+0xd6>
                for(j=i+2; j<arr.length; j++){
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3302      	adds	r3, #2
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	e03a      	b.n	80018b4 <Tokenize_uint8_t_array+0xcc>
                    if(arr.data[j-1]==0x0D && arr.data[j]==0x0A){
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	3b01      	subs	r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b0d      	cmp	r3, #13
 800184a:	d130      	bne.n	80018ae <Tokenize_uint8_t_array+0xc6>
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4413      	add	r3, r2
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b0a      	cmp	r3, #10
 8001856:	d12a      	bne.n	80018ae <Tokenize_uint8_t_array+0xc6>
                        msg.length = j+1-i;
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	b29a      	uxth	r2, r3
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	b29b      	uxth	r3, r3
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	b29b      	uxth	r3, r3
 8001864:	3301      	adds	r3, #1
 8001866:	b29b      	uxth	r3, r3
 8001868:	82bb      	strh	r3, [r7, #20]
                        msg.data = (uint8_t*)malloc(msg.length*sizeof(uint8_t));
 800186a:	8abb      	ldrh	r3, [r7, #20]
 800186c:	4618      	mov	r0, r3
 800186e:	f006 ff39 	bl	80086e4 <malloc>
 8001872:	4603      	mov	r3, r0
 8001874:	613b      	str	r3, [r7, #16]
                        if(msg.data == NULL){exit(-1);}
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d103      	bne.n	8001884 <Tokenize_uint8_t_array+0x9c>
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f006 ff1e 	bl	80086c0 <exit>
                        memcpy(msg.data, arr.data+i, msg.length);
 8001884:	6938      	ldr	r0, [r7, #16]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	4413      	add	r3, r2
 800188c:	8aba      	ldrh	r2, [r7, #20]
 800188e:	4619      	mov	r1, r3
 8001890:	f007 ff2d 	bl	80096ee <memcpy>
                        *beginning_mark = j+1;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	601a      	str	r2, [r3, #0]
                        return msg;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	461a      	mov	r2, r3
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018a8:	e882 0003 	stmia.w	r2, {r0, r1}
 80018ac:	e01b      	b.n	80018e6 <Tokenize_uint8_t_array+0xfe>
                for(j=i+2; j<arr.length; j++){
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	893b      	ldrh	r3, [r7, #8]
 80018b6:	461a      	mov	r2, r3
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	4293      	cmp	r3, r2
 80018bc:	dbbf      	blt.n	800183e <Tokenize_uint8_t_array+0x56>
        for(i=*beginning_mark; i<arr.length-1; i++){
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3301      	adds	r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	893b      	ldrh	r3, [r7, #8]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	dba6      	blt.n	800181c <Tokenize_uint8_t_array+0x34>
        }
    }

    // If no valid message is found, return an empty array

    *beginning_mark = arr.length;
 80018ce:	893b      	ldrh	r3, [r7, #8]
 80018d0:	461a      	mov	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	601a      	str	r2, [r3, #0]
    return msg;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	461a      	mov	r2, r3
 80018da:	f107 0310 	add.w	r3, r7, #16
 80018de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018e2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <Process_Binary_Data_Reduced>:
	}

	return;

}
void Process_Binary_Data_Reduced(uint8_t_array arr, char* receiver_id){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b094      	sub	sp, #80	@ 0x50
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	f107 0308 	add.w	r3, r7, #8
 80018fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80018fe:	607a      	str	r2, [r7, #4]
	//TESTING PURPOSES ONLY!!!
	int beginning_mark = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	@ 0x4c

	while(beginning_mark < arr.length){
 8001904:	e022      	b.n	800194c <Process_Binary_Data_Reduced+0x5c>
		uint8_t_array msg = Tokenize_uint8_t_array(arr, &beginning_mark);
 8001906:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800190a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800190e:	f107 0208 	add.w	r2, r7, #8
 8001912:	ca06      	ldmia	r2, {r1, r2}
 8001914:	f7ff ff68 	bl	80017e8 <Tokenize_uint8_t_array>
		if(msg.data != NULL){
 8001918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800191a:	2b00      	cmp	r3, #0
 800191c:	d016      	beq.n	800194c <Process_Binary_Data_Reduced+0x5c>
			char msg_id_str[50];
			sprintf(msg_id_str, "\r\nMsg ID: %X\r\n", msg.data[4]);
 800191e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001920:	3304      	adds	r3, #4
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	490d      	ldr	r1, [pc, #52]	@ (8001960 <Process_Binary_Data_Reduced+0x70>)
 800192c:	4618      	mov	r0, r3
 800192e:	f007 fd69 	bl	8009404 <siprintf>
			HAL_UART_Transmit_IT(&huart2,(uint8_t*)msg_id_str, strlen(msg_id_str));
 8001932:	f107 0310 	add.w	r3, r7, #16
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fcaa 	bl	8000290 <strlen>
 800193c:	4603      	mov	r3, r0
 800193e:	b29a      	uxth	r2, r3
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	4807      	ldr	r0, [pc, #28]	@ (8001964 <Process_Binary_Data_Reduced+0x74>)
 8001948:	f004 fdd8 	bl	80064fc <HAL_UART_Transmit_IT>
	while(beginning_mark < arr.length){
 800194c:	89bb      	ldrh	r3, [r7, #12]
 800194e:	461a      	mov	r2, r3
 8001950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001952:	429a      	cmp	r2, r3
 8001954:	dcd7      	bgt.n	8001906 <Process_Binary_Data_Reduced+0x16>
		}
	}
	return;
 8001956:	bf00      	nop
}
 8001958:	3750      	adds	r7, #80	@ 0x50
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	0800b8a8 	.word	0x0800b8a8
 8001964:	20000450 	.word	0x20000450

08001968 <Process_NMEA_Data>:
		}
	}
	return nack_flag;
}

void Process_NMEA_Data(char* buffer_str_cpy){
 8001968:	b580      	push	{r7, lr}
 800196a:	b098      	sub	sp, #96	@ 0x60
 800196c:	af06      	add	r7, sp, #24
 800196e:	6078      	str	r0, [r7, #4]
    /*Function to process the NMEA data, parsing the buffer string into messages and extracting mode, talker ID, UTC time, latitude and longitude
    input: buffer_str_cpy string with the buffer (only when NMEA is set)*/

    char* message;
    while((message = strsep(&buffer_str_cpy, "\n"))!=NULL){
 8001970:	e0e3      	b.n	8001b3a <Process_NMEA_Data+0x1d2>
        //139 is not in the Get functions and is inside this loop...
        char* message_cpy=(char*)malloc((strlen(message)+1)*sizeof(char));
 8001972:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001974:	f7fe fc8c 	bl	8000290 <strlen>
 8001978:	4603      	mov	r3, r0
 800197a:	3301      	adds	r3, #1
 800197c:	4618      	mov	r0, r3
 800197e:	f006 feb1 	bl	80086e4 <malloc>
 8001982:	4603      	mov	r3, r0
 8001984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if(message_cpy==NULL){exit(-1);}
 8001986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001988:	2b00      	cmp	r3, #0
 800198a:	d103      	bne.n	8001994 <Process_NMEA_Data+0x2c>
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f006 fe96 	bl	80086c0 <exit>
        strcpy(message_cpy, message);
 8001994:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001996:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001998:	f007 fea1 	bl	80096de <strcpy>
        message_cpy[strlen(message)]='\0';
 800199c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800199e:	f7fe fc77 	bl	8000290 <strlen>
 80019a2:	4602      	mov	r2, r0
 80019a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019a6:	4413      	add	r3, r2
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]

        for(int i=0; i<strlen(message_cpy); i++){if(message_cpy[i]=='\r'){message_cpy[i]='\0';}}
 80019ac:	2300      	movs	r3, #0
 80019ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80019b0:	e00d      	b.n	80019ce <Process_NMEA_Data+0x66>
 80019b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019b6:	4413      	add	r3, r2
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b0d      	cmp	r3, #13
 80019bc:	d104      	bne.n	80019c8 <Process_NMEA_Data+0x60>
 80019be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019c2:	4413      	add	r3, r2
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019ca:	3301      	adds	r3, #1
 80019cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80019ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80019d0:	f7fe fc5e 	bl	8000290 <strlen>
 80019d4:	4602      	mov	r2, r0
 80019d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8ea      	bhi.n	80019b2 <Process_NMEA_Data+0x4a>

        int is_nmea = is_NMEA(message_cpy);
 80019dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80019de:	f001 fb37 	bl	8003050 <is_NMEA>
 80019e2:	63b8      	str	r0, [r7, #56]	@ 0x38

        if(is_nmea == 1){
 80019e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	f040 80a4 	bne.w	8001b34 <Process_NMEA_Data+0x1cc>
            //find the checksum.
            int checksum_computed = Checksum_NMEA(message_cpy);
 80019ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80019ee:	f000 fe6f 	bl	80026d0 <Checksum_NMEA>
 80019f2:	6378      	str	r0, [r7, #52]	@ 0x34

            char* checksum_message = malloc(3*sizeof(char));
 80019f4:	2003      	movs	r0, #3
 80019f6:	f006 fe75 	bl	80086e4 <malloc>
 80019fa:	4603      	mov	r3, r0
 80019fc:	633b      	str	r3, [r7, #48]	@ 0x30
            if(checksum_message == NULL){exit(-1);}
 80019fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d103      	bne.n	8001a0c <Process_NMEA_Data+0xa4>
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f006 fe5a 	bl	80086c0 <exit>
            checksum_message[2] = '\0';
 8001a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a0e:	3302      	adds	r3, #2
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
            if(strlen(message_cpy)-2>= 0){
                checksum_message[0] = message_cpy[strlen(message_cpy)-2];
 8001a14:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001a16:	f7fe fc3b 	bl	8000290 <strlen>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	3b02      	subs	r3, #2
 8001a1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a20:	4413      	add	r3, r2
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a26:	701a      	strb	r2, [r3, #0]
                checksum_message[1] = message_cpy[strlen(message_cpy)-1];
 8001a28:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001a2a:	f7fe fc31 	bl	8000290 <strlen>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	3b01      	subs	r3, #1
 8001a32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a34:	441a      	add	r2, r3
 8001a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a38:	3301      	adds	r3, #1
 8001a3a:	7812      	ldrb	r2, [r2, #0]
 8001a3c:	701a      	strb	r2, [r3, #0]
            }else{
                checksum_message[0] = '0';
                checksum_message[1] = '0';
            }

            int checksum_message_int = (int) strtol(checksum_message, NULL, 16);
 8001a3e:	2210      	movs	r2, #16
 8001a40:	2100      	movs	r1, #0
 8001a42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a44:	f006 ff86 	bl	8008954 <strtol>
 8001a48:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if((message_cpy != NULL) && (strlen(message_cpy)>1) && (checksum_message_int-checksum_computed == 0)){
 8001a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d06e      	beq.n	8001b2e <Process_NMEA_Data+0x1c6>
 8001a50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001a52:	f7fe fc1d 	bl	8000290 <strlen>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d968      	bls.n	8001b2e <Process_NMEA_Data+0x1c6>
 8001a5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d164      	bne.n	8001b2e <Process_NMEA_Data+0x1c6>
                char* mode = Get_Mode(message);
 8001a64:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a66:	f000 fe74 	bl	8002752 <Get_Mode>
 8001a6a:	62b8      	str	r0, [r7, #40]	@ 0x28
                char* talker_ID = Get_Talker_ID(message);
 8001a6c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a6e:	f000 fe55 	bl	800271c <Get_Talker_ID>
 8001a72:	6278      	str	r0, [r7, #36]	@ 0x24
                char* utc_date = Get_UTCDate(message, mode);
 8001a74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a76:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a78:	f001 fa26 	bl	8002ec8 <Get_UTCDate>
 8001a7c:	6238      	str	r0, [r7, #32]
                char* utc_time = Get_UTCTime(message, mode);
 8001a7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a80:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a82:	f000 fe87 	bl	8002794 <Get_UTCTime>
 8001a86:	61f8      	str	r0, [r7, #28]
                char* latitude = Get_Latitude(message, mode);
 8001a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a8a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a8c:	f000 ff62 	bl	8002954 <Get_Latitude>
 8001a90:	61b8      	str	r0, [r7, #24]
                char* longitude = Get_Longitude(message, mode);
 8001a92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a94:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a96:	f001 f867 	bl	8002b68 <Get_Longitude>
 8001a9a:	6178      	str	r0, [r7, #20]
                char* msl_altitude = Get_Altitude(message, mode);
 8001a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a9e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001aa0:	f001 f978 	bl	8002d94 <Get_Altitude>
 8001aa4:	6138      	str	r0, [r7, #16]


                //Check value for timeout
                char* terminal_pvt = malloc(200*sizeof(char));
 8001aa6:	20c8      	movs	r0, #200	@ 0xc8
 8001aa8:	f006 fe1c 	bl	80086e4 <malloc>
 8001aac:	4603      	mov	r3, r0
 8001aae:	60fb      	str	r3, [r7, #12]
                if(terminal_pvt == NULL){exit(-1);}
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <Process_NMEA_Data+0x156>
 8001ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aba:	f006 fe01 	bl	80086c0 <exit>
                snprintf(terminal_pvt, 200, "\r\n%s,%s,%s,%s,%s,%s,%s\r\n", mode, talker_ID, utc_date, utc_time, latitude, longitude, msl_altitude);
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	9305      	str	r3, [sp, #20]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	9304      	str	r3, [sp, #16]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	9303      	str	r3, [sp, #12]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b58 <Process_NMEA_Data+0x1f0>)
 8001ada:	21c8      	movs	r1, #200	@ 0xc8
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f007 fc5d 	bl	800939c <sniprintf>
                strcpy(pvt_reserve, terminal_pvt);
 8001ae2:	68f9      	ldr	r1, [r7, #12]
 8001ae4:	481d      	ldr	r0, [pc, #116]	@ (8001b5c <Process_NMEA_Data+0x1f4>)
 8001ae6:	f007 fdfa 	bl	80096de <strcpy>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*)terminal_pvt, strlen(terminal_pvt));
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7fe fbd0 	bl	8000290 <strlen>
 8001af0:	4603      	mov	r3, r0
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	68f9      	ldr	r1, [r7, #12]
 8001af8:	4819      	ldr	r0, [pc, #100]	@ (8001b60 <Process_NMEA_Data+0x1f8>)
 8001afa:	f004 fcff 	bl	80064fc <HAL_UART_Transmit_IT>
					if(fres != FR_OK){
						HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Data not stored!\r\n", strlen("Data not stored!\r\n"));
					}
                }

                free(mode), free(talker_ID), free(utc_date), free(utc_time), free(msl_altitude), free(latitude), free(longitude);
 8001afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b00:	f006 fdf8 	bl	80086f4 <free>
 8001b04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b06:	f006 fdf5 	bl	80086f4 <free>
 8001b0a:	6a38      	ldr	r0, [r7, #32]
 8001b0c:	f006 fdf2 	bl	80086f4 <free>
 8001b10:	69f8      	ldr	r0, [r7, #28]
 8001b12:	f006 fdef 	bl	80086f4 <free>
 8001b16:	6938      	ldr	r0, [r7, #16]
 8001b18:	f006 fdec 	bl	80086f4 <free>
 8001b1c:	69b8      	ldr	r0, [r7, #24]
 8001b1e:	f006 fde9 	bl	80086f4 <free>
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f006 fde6 	bl	80086f4 <free>
                free(terminal_pvt);
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f006 fde3 	bl	80086f4 <free>
            }
            free(checksum_message);
 8001b2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001b30:	f006 fde0 	bl	80086f4 <free>
        }
            free(message_cpy);
 8001b34:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001b36:	f006 fddd 	bl	80086f4 <free>
    while((message = strsep(&buffer_str_cpy, "\n"))!=NULL){
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4909      	ldr	r1, [pc, #36]	@ (8001b64 <Process_NMEA_Data+0x1fc>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f007 fd03 	bl	800954a <strsep>
 8001b44:	6478      	str	r0, [r7, #68]	@ 0x44
 8001b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f47f af12 	bne.w	8001972 <Process_NMEA_Data+0xa>

    }

    return;
 8001b4e:	bf00      	nop
}
 8001b50:	3748      	adds	r7, #72	@ 0x48
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	0800b8b8 	.word	0x0800b8b8
 8001b5c:	20000214 	.word	0x20000214
 8001b60:	20000450 	.word	0x20000450
 8001b64:	0800b8d4 	.word	0x0800b8d4

08001b68 <HAL_UART_RxHalfCpltCallback>:

//Callbacks

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART_B16.Instance){
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_UART_RxHalfCpltCallback+0x38>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d102      	bne.n	8001b82 <HAL_UART_RxHalfCpltCallback+0x1a>
		DMAHandler_B16.stat = DATA_HALF_RECEIVED;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <HAL_UART_RxHalfCpltCallback+0x3c>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
	}

	if(huart->Instance == UART_B17.Instance){
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <HAL_UART_RxHalfCpltCallback+0x40>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d102      	bne.n	8001b94 <HAL_UART_RxHalfCpltCallback+0x2c>
		DMAHandler_B17.stat = DATA_HALF_RECEIVED;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <HAL_UART_RxHalfCpltCallback+0x44>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
	}

}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	20000340 	.word	0x20000340
 8001ba4:	20000ae4 	.word	0x20000ae4
 8001ba8:	200003c8 	.word	0x200003c8
 8001bac:	20000ae8 	.word	0x20000ae8

08001bb0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART_B16.Instance){
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <HAL_UART_RxCpltCallback+0x44>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d105      	bne.n	8001bd0 <HAL_UART_RxCpltCallback+0x20>
		DMAHandler_B16.stat = DATA_RECEIVED;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x48>)
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	701a      	strb	r2, [r3, #0]
		DMAHandler_B16.request = REQUEST_FULFILLED;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x48>)
 8001bcc:	220f      	movs	r2, #15
 8001bce:	705a      	strb	r2, [r3, #1]
	}
	if(huart->Instance == UART_B17.Instance){
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_UART_RxCpltCallback+0x4c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d105      	bne.n	8001be8 <HAL_UART_RxCpltCallback+0x38>
		DMAHandler_B17.stat = DATA_RECEIVED;
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <HAL_UART_RxCpltCallback+0x50>)
 8001bde:	2202      	movs	r2, #2
 8001be0:	701a      	strb	r2, [r3, #0]
		DMAHandler_B17.request = REQUEST_FULFILLED;
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <HAL_UART_RxCpltCallback+0x50>)
 8001be4:	220f      	movs	r2, #15
 8001be6:	705a      	strb	r2, [r3, #1]
	}
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	20000340 	.word	0x20000340
 8001bf8:	20000ae4 	.word	0x20000ae4
 8001bfc:	200003c8 	.word	0x200003c8
 8001c00:	20000ae8 	.word	0x20000ae8

08001c04 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	return;
 8001c0c:	bf00      	nop
}
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <Init_OBC_Cmd>:
	}

	HAL_UART_Transmit_IT(&UART_OBC, (uint8_t*)error, strlen(error));
}

void Init_OBC_Cmd(OBC_cmd* OBC){
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	OBC->change_output_message_format_B16 = 1, OBC->change_output_message_format_B17 = 0;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	635a      	str	r2, [r3, #52]	@ 0x34
	OBC->change_power_mode_B16 = 0, OBC->change_power_mode_B17 = 0, OBC->change_switch_mode = 0;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
	OBC->doze_B16 = 0, OBC->doze_B17 = 0, OBC->read_from_SD_card = 0;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	639a      	str	r2, [r3, #56]	@ 0x38
	OBC->reset_B16 = 0, OBC->reset_B17 = 0, OBC->set_output_B16 = NMEA, OBC->set_output_B17 = 0;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	631a      	str	r2, [r3, #48]	@ 0x30
	OBC->set_switch = 0, OBC->status_report_B16 = 0, OBC->status_report_B17 = 0;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	61da      	str	r2, [r3, #28]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	621a      	str	r2, [r3, #32]
	return;
 8001c7a:	bf00      	nop
}
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <Execute_OBC_Cmd>:

void Execute_OBC_Cmd(OBC_cmd* OBC, receiver_status* B16_status, receiver_status* B17_status){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b09a      	sub	sp, #104	@ 0x68
 8001c8c:	af08      	add	r7, sp, #32
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
	  //Set power mode.
	  if(OBC->change_power_mode_B16 == 1){
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d13f      	bne.n	8001d1c <Execute_OBC_Cmd+0x94>
		  if(OBC->doze_B16 == 1){
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10a      	bne.n	8001cba <Execute_OBC_Cmd+0x32>
			  HAL_UART_Transmit_IT(&UART_B16, enter_doze_mode, 9);
 8001ca4:	2209      	movs	r2, #9
 8001ca6:	49a0      	ldr	r1, [pc, #640]	@ (8001f28 <Execute_OBC_Cmd+0x2a0>)
 8001ca8:	48a0      	ldr	r0, [pc, #640]	@ (8001f2c <Execute_OBC_Cmd+0x2a4>)
 8001caa:	f004 fc27 	bl	80064fc <HAL_UART_Transmit_IT>
			  OBC->doze_B16 = 0, B16_status->receiver_dozed = 1;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	60da      	str	r2, [r3, #12]
		  }
		  if(OBC->reset_B16 == 1){
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d129      	bne.n	8001d16 <Execute_OBC_Cmd+0x8e>
			  //TODO: Obtain values for day, month, year, hour, minute, second, lat, lon, alt.
			  uint8_t_array reset_cmd = Receiver_Cold_Restart(COLD_START, 01, 01, 2025, 00, 00, 00, 0, 0, 0);
 8001cc2:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	9306      	str	r3, [sp, #24]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	9305      	str	r3, [sp, #20]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9304      	str	r3, [sp, #16]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9303      	str	r3, [sp, #12]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9302      	str	r3, [sp, #8]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	f240 73e9 	movw	r3, #2025	@ 0x7e9
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2103      	movs	r1, #3
 8001cea:	f7ff f8e5 	bl	8000eb8 <Receiver_Cold_Restart>
			  HAL_UART_Transmit_IT(&UART_B16, reset_cmd.data, reset_cmd.length);
 8001cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	488d      	ldr	r0, [pc, #564]	@ (8001f2c <Execute_OBC_Cmd+0x2a4>)
 8001cf8:	f004 fc00 	bl	80064fc <HAL_UART_Transmit_IT>
			  free(reset_cmd.data);
 8001cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f006 fcf8 	bl	80086f4 <free>
			  OBC->reset_B16 = 0, B16_status->receiver_dozed = 0, B16_status->receiver_on = 1;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2201      	movs	r2, #1
 8001d14:	609a      	str	r2, [r3, #8]

		  }
		  OBC->change_power_mode_B16 = 0;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
	  }
	  if(OBC->change_power_mode_B17 == 1){
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d141      	bne.n	8001da8 <Execute_OBC_Cmd+0x120>
		  if(OBC->doze_B17 == 1){
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d10d      	bne.n	8001d48 <Execute_OBC_Cmd+0xc0>
			  HAL_UART_Transmit_IT(&UART_B17, enter_doze_mode, 9);
 8001d2c:	2209      	movs	r2, #9
 8001d2e:	497e      	ldr	r1, [pc, #504]	@ (8001f28 <Execute_OBC_Cmd+0x2a0>)
 8001d30:	487f      	ldr	r0, [pc, #508]	@ (8001f30 <Execute_OBC_Cmd+0x2a8>)
 8001d32:	f004 fbe3 	bl	80064fc <HAL_UART_Transmit_IT>
			  cmd_sent_B17 = 1;
 8001d36:	4b7f      	ldr	r3, [pc, #508]	@ (8001f34 <Execute_OBC_Cmd+0x2ac>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

			  OBC->doze_B17 = 0, B17_status->receiver_dozed = 1;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	60da      	str	r2, [r3, #12]

		  }
		  if(OBC->reset_B17 == 1){
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d128      	bne.n	8001da2 <Execute_OBC_Cmd+0x11a>
			  //TODO: Obtain values for day, month, year, hour, minute, second, lat, lon, alt.
			  uint8_t_array reset_cmd = Receiver_Cold_Restart(COLD_START, 01, 01, 2025, 00, 00, 00, 0, 0, 0);
 8001d50:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001d54:	2300      	movs	r3, #0
 8001d56:	9306      	str	r3, [sp, #24]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9305      	str	r3, [sp, #20]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9304      	str	r3, [sp, #16]
 8001d60:	2300      	movs	r3, #0
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	2300      	movs	r3, #0
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	f240 73e9 	movw	r3, #2025	@ 0x7e9
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2301      	movs	r3, #1
 8001d74:	2201      	movs	r2, #1
 8001d76:	2103      	movs	r1, #3
 8001d78:	f7ff f89e 	bl	8000eb8 <Receiver_Cold_Restart>
			  HAL_UART_Transmit_IT(&UART_B17, reset_cmd.data, reset_cmd.length);
 8001d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d7e:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001d80:	4619      	mov	r1, r3
 8001d82:	486b      	ldr	r0, [pc, #428]	@ (8001f30 <Execute_OBC_Cmd+0x2a8>)
 8001d84:	f004 fbba 	bl	80064fc <HAL_UART_Transmit_IT>

			  free(reset_cmd.data);
 8001d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f006 fcb2 	bl	80086f4 <free>
			  OBC->reset_B17 = 0, B17_status->receiver_dozed = 0, B17_status->receiver_on = 1;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	609a      	str	r2, [r3, #8]

		  }
		  OBC->change_power_mode_B17 = 0;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	605a      	str	r2, [r3, #4]
	  }
	  //Set antenna switches.
	  if(OBC->change_switch_mode == 1){
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d107      	bne.n	8001dc0 <Execute_OBC_Cmd+0x138>
		  Antenna_Switch(OBC->set_switch);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fc7f 	bl	80016b8 <Antenna_Switch>
		  OBC->change_switch_mode = 0;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
	  }

	  //Set receiver output message format (NMEA or binary)
	  if(OBC->change_output_message_format_B16 == 1){
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d12f      	bne.n	8001e28 <Execute_OBC_Cmd+0x1a0>
		  if(OBC->set_output_B16 == NMEA){
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d114      	bne.n	8001dfa <Execute_OBC_Cmd+0x172>
			  //transmit cmd_change_message_format_to_NMEA through appropriate UART
			  uint8_t_array cmd_change_message_format_to_NMEA = Change_Message_Format("NMEA", UPDATE_TO_SRAM);
 8001dd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4958      	ldr	r1, [pc, #352]	@ (8001f38 <Execute_OBC_Cmd+0x2b0>)
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fbc9 	bl	8001570 <Change_Message_Format>
			  HAL_UART_Transmit_IT(&UART_B16, cmd_change_message_format_to_NMEA.data, cmd_change_message_format_to_NMEA.length);
 8001dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001de2:	4619      	mov	r1, r3
 8001de4:	4851      	ldr	r0, [pc, #324]	@ (8001f2c <Execute_OBC_Cmd+0x2a4>)
 8001de6:	f004 fb89 	bl	80064fc <HAL_UART_Transmit_IT>
			  free(cmd_change_message_format_to_NMEA.data);
 8001dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dec:	4618      	mov	r0, r3
 8001dee:	f006 fc81 	bl	80086f4 <free>
			  B16_status->NMEA_set = 1;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e013      	b.n	8001e22 <Execute_OBC_Cmd+0x19a>
		  }
		  else{
			  //transmit cmd_change_message_format_to_binary through appropriate UART
			  uint8_t_array cmd_change_message_format_to_binary = Change_Message_Format("Binary", UPDATE_TO_SRAM);
 8001dfa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dfe:	2200      	movs	r2, #0
 8001e00:	494e      	ldr	r1, [pc, #312]	@ (8001f3c <Execute_OBC_Cmd+0x2b4>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fbb4 	bl	8001570 <Change_Message_Format>
			  HAL_UART_Transmit_IT(&UART_B16, cmd_change_message_format_to_binary.data, cmd_change_message_format_to_binary.length);
 8001e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e0a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4847      	ldr	r0, [pc, #284]	@ (8001f2c <Execute_OBC_Cmd+0x2a4>)
 8001e10:	f004 fb74 	bl	80064fc <HAL_UART_Transmit_IT>
			  free(cmd_change_message_format_to_binary.data);
 8001e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e16:	4618      	mov	r0, r3
 8001e18:	f006 fc6c 	bl	80086f4 <free>
			  B16_status->binary_set = 1;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	605a      	str	r2, [r3, #4]
		  }

		  OBC->change_output_message_format_B16 = 0;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	62da      	str	r2, [r3, #44]	@ 0x2c
	  }

	  if(OBC->change_output_message_format_B17==1){
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d171      	bne.n	8001f14 <Execute_OBC_Cmd+0x28c>
		  if(OBC->set_output_B17 == NMEA){
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d123      	bne.n	8001e80 <Execute_OBC_Cmd+0x1f8>
			  uint8_t_array configure_rtk_mode = Configure_RTK_Mode_and_Operational_Function(RTK_ROVER, RTK_ROVER_NORMAL, 0,0,0,0,0,0,UPDATE_TO_SRAM);
 8001e38:	f107 0020 	add.w	r0, r7, #32
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	2300      	movs	r3, #0
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	eddf 2a3e 	vldr	s5, [pc, #248]	@ 8001f40 <Execute_OBC_Cmd+0x2b8>
 8001e48:	ed9f 2a3d 	vldr	s4, [pc, #244]	@ 8001f40 <Execute_OBC_Cmd+0x2b8>
 8001e4c:	ed9f 1b34 	vldr	d1, [pc, #208]	@ 8001f20 <Execute_OBC_Cmd+0x298>
 8001e50:	ed9f 0b33 	vldr	d0, [pc, #204]	@ 8001f20 <Execute_OBC_Cmd+0x298>
 8001e54:	2300      	movs	r3, #0
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	f7ff f8cd 	bl	8000ff8 <Configure_RTK_Mode_and_Operational_Function>
			  HAL_UART_Transmit_IT(&UART_B17, configure_rtk_mode.data, configure_rtk_mode.length);
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e62:	4619      	mov	r1, r3
 8001e64:	4832      	ldr	r0, [pc, #200]	@ (8001f30 <Execute_OBC_Cmd+0x2a8>)
 8001e66:	f004 fb49 	bl	80064fc <HAL_UART_Transmit_IT>
			  free(configure_rtk_mode.data);
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f006 fc41 	bl	80086f4 <free>

			  B17_status->NMEA_set = 1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
			  B17_status->binary_set = 0;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	e045      	b.n	8001f0c <Execute_OBC_Cmd+0x284>
		  }
		  else if(OBC->set_output_B17 == BINARY){
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d141      	bne.n	8001f0c <Execute_OBC_Cmd+0x284>
			  uint8_t_array configure_rtk_mode = Configure_RTK_Mode_and_Operational_Function(RTK_BASE, RTK_BASE_KINEMATIC, 0x00010000,0x03,0,0,0,0,UPDATE_TO_SRAM);
 8001e88:	f107 0018 	add.w	r0, r7, #24
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	2303      	movs	r3, #3
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	eddf 2a2a 	vldr	s5, [pc, #168]	@ 8001f40 <Execute_OBC_Cmd+0x2b8>
 8001e98:	ed9f 2a29 	vldr	s4, [pc, #164]	@ 8001f40 <Execute_OBC_Cmd+0x2b8>
 8001e9c:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 8001f20 <Execute_OBC_Cmd+0x298>
 8001ea0:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8001f20 <Execute_OBC_Cmd+0x298>
 8001ea4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2101      	movs	r1, #1
 8001eac:	f7ff f8a4 	bl	8000ff8 <Configure_RTK_Mode_and_Operational_Function>
			  HAL_UART_Transmit_IT(&UART_B17, configure_rtk_mode.data, configure_rtk_mode.length);
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	8bba      	ldrh	r2, [r7, #28]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	481e      	ldr	r0, [pc, #120]	@ (8001f30 <Execute_OBC_Cmd+0x2a8>)
 8001eb8:	f004 fb20 	bl	80064fc <HAL_UART_Transmit_IT>
			  uint8_t_array configure_binary_output = Configure_Binary_Measurement_Data_Output(8, 0, 0, 0, 0, 0, 1, UPDATE_TO_SRAM);
 8001ebc:	f107 0010 	add.w	r0, r7, #16
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9304      	str	r3, [sp, #16]
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	9303      	str	r3, [sp, #12]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9302      	str	r3, [sp, #8]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2108      	movs	r1, #8
 8001eda:	f7ff f9a9 	bl	8001230 <Configure_Binary_Measurement_Data_Output>
			  HAL_UART_Transmit_IT(&UART_B17, configure_binary_output.data, configure_rtk_mode.length);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	8bba      	ldrh	r2, [r7, #28]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4812      	ldr	r0, [pc, #72]	@ (8001f30 <Execute_OBC_Cmd+0x2a8>)
 8001ee6:	f004 fb09 	bl	80064fc <HAL_UART_Transmit_IT>
			  free(configure_rtk_mode.data), free(configure_binary_output.data);
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f006 fc01 	bl	80086f4 <free>
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f006 fbfd 	bl	80086f4 <free>

			  B17_status->binary_set = 1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	605a      	str	r2, [r3, #4]
			  B17_status->NMEA_set = 0;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
			  B17_status->ext_raw_data_set = 1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	611a      	str	r2, [r3, #16]
		  }

		  OBC->change_output_message_format_B17 = 0;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	635a      	str	r2, [r3, #52]	@ 0x34
	  }

	  return;
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
}
 8001f16:	3748      	adds	r7, #72	@ 0x48
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	f3af 8000 	nop.w
	...
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000340 	.word	0x20000340
 8001f30:	200003c8 	.word	0x200003c8
 8001f34:	20000ae0 	.word	0x20000ae0
 8001f38:	0800b988 	.word	0x0800b988
 8001f3c:	0800b990 	.word	0x0800b990
 8001f40:	00000000 	.word	0x00000000

08001f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	f2ad 5d24 	subw	sp, sp, #1316	@ 0x524
 8001f4a:	af00      	add	r7, sp, #0
	uint8_t_array buffer_B16_arr;
	uint8_t_array buffer_B17_arr;
	uint8_t current_buffer_B16[BUFFER_SIZE_B16];
	uint8_t current_buffer_B17[BUFFER_SIZE_B17];

	buffer_B16_arr.length = BUFFER_SIZE_B16;
 8001f4c:	2364      	movs	r3, #100	@ 0x64
 8001f4e:	f8a7 3508 	strh.w	r3, [r7, #1288]	@ 0x508
	buffer_B17_arr.length = BUFFER_SIZE_B17;
 8001f52:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8001f56:	f8a7 3500 	strh.w	r3, [r7, #1280]	@ 0x500

	buffer_B16_arr.data = current_buffer_B16;
 8001f5a:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8001f5e:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
	buffer_B17_arr.data = current_buffer_B17;
 8001f62:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 8001f66:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc

	DMAHandler_B16.stat = IDLE;
 8001f6a:	4bb4      	ldr	r3, [pc, #720]	@ (800223c <main+0x2f8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
	DMAHandler_B16.request = REQUEST_DATA;
 8001f70:	4bb2      	ldr	r3, [pc, #712]	@ (800223c <main+0x2f8>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	705a      	strb	r2, [r3, #1]
	DMAHandler_B17.stat = IDLE;
 8001f76:	4bb2      	ldr	r3, [pc, #712]	@ (8002240 <main+0x2fc>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
	DMAHandler_B17.request = REQUEST_DATA;
 8001f7c:	4bb0      	ldr	r3, [pc, #704]	@ (8002240 <main+0x2fc>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	705a      	strb	r2, [r3, #1]

    int beginning_mark_B16 = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    int beginning_mark_B17 = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
    int iteration_index = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
    uint8_t_array OBC_Rx_arr;
    OBC_Rx_arr.length = 50;
 8001f94:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001f98:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8001f9c:	2232      	movs	r2, #50	@ 0x32
 8001f9e:	809a      	strh	r2, [r3, #4]
    OBC_Rx_arr.data = malloc(OBC_Rx_arr.length*sizeof(uint8_t));
 8001fa0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001fa4:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8001fa8:	889b      	ldrh	r3, [r3, #4]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f006 fb9a 	bl	80086e4 <malloc>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001fb8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8001fbc:	601a      	str	r2, [r3, #0]
    if(OBC_Rx_arr.data == NULL){exit(-1);}
 8001fbe:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001fc2:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d103      	bne.n	8001fd4 <main+0x90>
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f006 fb76 	bl	80086c0 <exit>

    //Receiver status:
    receiver_status B16_status, B17_status;
    B16_status.NMEA_set = 1, B16_status.binary_set = 0, B16_status.ext_raw_data_set = 0, B16_status.receiver_on = 1, B16_status.receiver_dozed = 0;
 8001fd4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001fd8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001fe4:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001fe8:	2200      	movs	r2, #0
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001ff0:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
 8001ff8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001ffc:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8002000:	2201      	movs	r2, #1
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002008:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 800200c:	2200      	movs	r2, #0
 800200e:	60da      	str	r2, [r3, #12]
    B17_status.NMEA_set = 0, B17_status.binary_set = 1, B17_status.ext_raw_data_set = 1, B17_status.receiver_on = 1, B17_status.receiver_dozed = 0;
 8002010:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002014:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002020:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8002024:	2201      	movs	r2, #1
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800202c:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8002030:	2201      	movs	r2, #1
 8002032:	611a      	str	r2, [r3, #16]
 8002034:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002038:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 800203c:	2201      	movs	r2, #1
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002044:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8002048:	2200      	movs	r2, #0
 800204a:	60da      	str	r2, [r3, #12]

    //OBC command object:
    OBC_cmd OBC;
    //Configurations switch:
    Init_OBC_Cmd(&OBC);
 800204c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fde1 	bl	8001c18 <Init_OBC_Cmd>

    //commands:

    uint8_t_array cmd_configure_navigation_data_message_interval = Configure_Navigation_Data_Message_Interval(3, UPDATE_TO_SRAM);
 8002056:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800205a:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 800205e:	2200      	movs	r2, #0
 8002060:	2103      	movs	r1, #3
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fa1a 	bl	800149c <Configure_Navigation_Data_Message_Interval>

    uint8_t query_software_version[9] = {0xA0, 0xA1, 0x00, 0x02, 0x02, 0x00, 0x02, 0x0D, 0x0A};
 8002068:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800206c:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8002070:	4a74      	ldr	r2, [pc, #464]	@ (8002244 <main+0x300>)
 8002072:	ca07      	ldmia	r2, {r0, r1, r2}
 8002074:	c303      	stmia	r3!, {r0, r1}
 8002076:	701a      	strb	r2, [r3, #0]
    uint8_t_array cmd_query_software_version = Build_uint8_t_Command(query_software_version, 9);
 8002078:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800207c:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8002080:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 8002084:	2209      	movs	r2, #9
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff faf2 	bl	8001670 <Build_uint8_t_Command>

    uint8_t query_power_mode[8] = {0xA0, 0xA1, 0x00, 0x01, 0x15, 0x15, 0x0D, 0x0A};
 800208c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002090:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 8002094:	4a6c      	ldr	r2, [pc, #432]	@ (8002248 <main+0x304>)
 8002096:	e892 0003 	ldmia.w	r2, {r0, r1}
 800209a:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t_array cmd_query_power_mode = Build_uint8_t_Command(query_power_mode, 8);
 800209e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80020a2:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 80020a6:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80020aa:	2208      	movs	r2, #8
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fadf 	bl	8001670 <Build_uint8_t_Command>

    uint8_t query_nav_data_msg_int[9] = {0xA0, 0xA1, 0x00, 0x02, 0x64, 0x30, 0x54, 0x0D, 0x0A};
 80020b2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80020b6:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 80020ba:	4a64      	ldr	r2, [pc, #400]	@ (800224c <main+0x308>)
 80020bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80020be:	c303      	stmia	r3!, {r0, r1}
 80020c0:	701a      	strb	r2, [r3, #0]
    uint8_t_array cmd_query_navigation_data_msg_interval = Build_uint8_t_Command(query_nav_data_msg_int, 9);
 80020c2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80020c6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80020ca:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 80020ce:	2209      	movs	r2, #9
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff facd 	bl	8001670 <Build_uint8_t_Command>

    uint8_t set_pwr_to_normal[10] = {0xA0, 0xA1, 0x00, 0x03, 0x0C, 0x00, 0x00, 0x0C, 0x0D, 0x0A};
 80020d6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80020da:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80020de:	4a5c      	ldr	r2, [pc, #368]	@ (8002250 <main+0x30c>)
 80020e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80020e2:	c303      	stmia	r3!, {r0, r1}
 80020e4:	801a      	strh	r2, [r3, #0]
    uint8_t_array cmd_set_power_to_normal = Build_uint8_t_Command(set_pwr_to_normal, 10);
 80020e6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80020ea:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80020ee:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 80020f2:	220a      	movs	r2, #10
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fabb 	bl	8001670 <Build_uint8_t_Command>

    uint8_t NMEA_intervals[13] = {0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00};
 80020fa:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80020fe:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8002102:	4a54      	ldr	r2, [pc, #336]	@ (8002254 <main+0x310>)
 8002104:	461c      	mov	r4, r3
 8002106:	4613      	mov	r3, r2
 8002108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800210a:	c407      	stmia	r4!, {r0, r1, r2}
 800210c:	7023      	strb	r3, [r4, #0]
    uint8_t_array cmd_configure_NMEA_intervals = Configure_NMEA_Message_Interval(NMEA_intervals);
 800210e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002112:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002116:	f107 02fc 	add.w	r2, r7, #252	@ 0xfc
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff f95b 	bl	80013d8 <Configure_NMEA_Message_Interval>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002122:	f001 fb22 	bl	800376a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002126:	f000 f923 	bl	8002370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800212a:	f000 fa67 	bl	80025fc <MX_GPIO_Init>
  MX_DMA_Init();
 800212e:	f000 fa33 	bl	8002598 <MX_DMA_Init>
  MX_SPI1_Init();
 8002132:	f000 f963 	bl	80023fc <MX_SPI1_Init>
  MX_UART4_Init();
 8002136:	f000 f99f 	bl	8002478 <MX_UART4_Init>
  MX_FATFS_Init();
 800213a:	f005 fd39 	bl	8007bb0 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 800213e:	f000 f9fb 	bl	8002538 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002142:	f000 f9c9 	bl	80024d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_IT(&UART_OBC, (uint8_t*)"\r\nNew run\r\n", strlen("\r\nNew run\r\n"));
 8002146:	220b      	movs	r2, #11
 8002148:	4943      	ldr	r1, [pc, #268]	@ (8002258 <main+0x314>)
 800214a:	4844      	ldr	r0, [pc, #272]	@ (800225c <main+0x318>)
 800214c:	f004 f9d6 	bl	80064fc <HAL_UART_Transmit_IT>
  if(B16_ENABLED){
	  HAL_UART_Receive_DMA(&UART_B16, buffer_B16, 2*BUFFER_SIZE_B16);
  }

  if(B17_ENABLED){
	  HAL_UART_Receive_DMA(&UART_B17, buffer_B17, 2*BUFFER_SIZE_B17);
 8002150:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8002154:	4942      	ldr	r1, [pc, #264]	@ (8002260 <main+0x31c>)
 8002156:	4843      	ldr	r0, [pc, #268]	@ (8002264 <main+0x320>)
 8002158:	f004 fa2e 	bl	80065b8 <HAL_UART_Receive_DMA>
  while (1)
  {

	  if(B17_ENABLED){

		  char* buffer_full_str = malloc(50*sizeof(char));
 800215c:	2032      	movs	r0, #50	@ 0x32
 800215e:	f006 fac1 	bl	80086e4 <malloc>
 8002162:	4603      	mov	r3, r0
 8002164:	f8c7 3510 	str.w	r3, [r7, #1296]	@ 0x510

		  if(DMAHandler_B17.stat == DATA_HALF_RECEIVED){
 8002168:	4b35      	ldr	r3, [pc, #212]	@ (8002240 <main+0x2fc>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d111      	bne.n	8002196 <main+0x252>
			  memcpy(current_buffer_B17, buffer_B17, BUFFER_SIZE_B17);
 8002172:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002176:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 800217a:	4a39      	ldr	r2, [pc, #228]	@ (8002260 <main+0x31c>)
 800217c:	4618      	mov	r0, r3
 800217e:	4611      	mov	r1, r2
 8002180:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002184:	461a      	mov	r2, r3
 8002186:	f007 fab2 	bl	80096ee <memcpy>
			  sprintf(buffer_full_str,"\r\nbuffer full B17 1\r\n");
 800218a:	4937      	ldr	r1, [pc, #220]	@ (8002268 <main+0x324>)
 800218c:	f8d7 0510 	ldr.w	r0, [r7, #1296]	@ 0x510
 8002190:	f007 f938 	bl	8009404 <siprintf>
 8002194:	e018      	b.n	80021c8 <main+0x284>
		  }
		  else if(DMAHandler_B17.stat == DATA_RECEIVED){
 8002196:	4b2a      	ldr	r3, [pc, #168]	@ (8002240 <main+0x2fc>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d113      	bne.n	80021c8 <main+0x284>
			  memcpy(current_buffer_B17, buffer_B17+BUFFER_SIZE_B17, BUFFER_SIZE_B17);
 80021a0:	4a32      	ldr	r2, [pc, #200]	@ (800226c <main+0x328>)
 80021a2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80021a6:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80021aa:	4618      	mov	r0, r3
 80021ac:	4611      	mov	r1, r2
 80021ae:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80021b2:	461a      	mov	r2, r3
 80021b4:	f007 fa9b 	bl	80096ee <memcpy>
			  sprintf(buffer_full_str,"\r\nbuffer full B17 2\r\n");
 80021b8:	492d      	ldr	r1, [pc, #180]	@ (8002270 <main+0x32c>)
 80021ba:	f8d7 0510 	ldr.w	r0, [r7, #1296]	@ 0x510
 80021be:	f007 f921 	bl	8009404 <siprintf>
			  DMAHandler_B17.request = REQUEST_DATA;
 80021c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002240 <main+0x2fc>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	705a      	strb	r2, [r3, #1]
		  }
		  if(DMAHandler_B17.stat == DATA_RECEIVED || DMAHandler_B17.stat == DATA_HALF_RECEIVED){
 80021c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <main+0x2fc>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d004      	beq.n	80021dc <main+0x298>
 80021d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <main+0x2fc>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d169      	bne.n	80022b0 <main+0x36c>
			  HAL_UART_Transmit_IT(&UART_OBC, (uint8_t*)buffer_full_str, strlen(buffer_full_str));
 80021dc:	f8d7 0510 	ldr.w	r0, [r7, #1296]	@ 0x510
 80021e0:	f7fe f856 	bl	8000290 <strlen>
 80021e4:	4603      	mov	r3, r0
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	f8d7 1510 	ldr.w	r1, [r7, #1296]	@ 0x510
 80021ee:	481b      	ldr	r0, [pc, #108]	@ (800225c <main+0x318>)
 80021f0:	f004 f984 	bl	80064fc <HAL_UART_Transmit_IT>
			  free(buffer_full_str);
 80021f4:	f8d7 0510 	ldr.w	r0, [r7, #1296]	@ 0x510
 80021f8:	f006 fa7c 	bl	80086f4 <free>
			  if(B17_status.binary_set){
 80021fc:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002200:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <main+0x2d6>
				  Process_Binary_Data_Reduced(buffer_B17_arr, "B17");
 800220a:	4a1a      	ldr	r2, [pc, #104]	@ (8002274 <main+0x330>)
 800220c:	f207 43fc 	addw	r3, r7, #1276	@ 0x4fc
 8002210:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002214:	f7ff fb6c 	bl	80018f0 <Process_Binary_Data_Reduced>
 8002218:	e047      	b.n	80022aa <main+0x366>
			  }
			  else{
				  char* buffer_B17_str = malloc((buffer_B17_arr.length+1)*sizeof(char));
 800221a:	f8b7 3500 	ldrh.w	r3, [r7, #1280]	@ 0x500
 800221e:	3301      	adds	r3, #1
 8002220:	4618      	mov	r0, r3
 8002222:	f006 fa5f 	bl	80086e4 <malloc>
 8002226:	4603      	mov	r3, r0
 8002228:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
				  if(buffer_B17_str == NULL){exit(-1);}
 800222c:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d121      	bne.n	8002278 <main+0x334>
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f006 fa42 	bl	80086c0 <exit>
 800223c:	20000ae4 	.word	0x20000ae4
 8002240:	20000ae8 	.word	0x20000ae8
 8002244:	0800b9d4 	.word	0x0800b9d4
 8002248:	0800b9e0 	.word	0x0800b9e0
 800224c:	0800b9e8 	.word	0x0800b9e8
 8002250:	0800b9f4 	.word	0x0800b9f4
 8002254:	0800ba00 	.word	0x0800ba00
 8002258:	0800b998 	.word	0x0800b998
 800225c:	20000450 	.word	0x20000450
 8002260:	20000568 	.word	0x20000568
 8002264:	200003c8 	.word	0x200003c8
 8002268:	0800b9a4 	.word	0x0800b9a4
 800226c:	20000824 	.word	0x20000824
 8002270:	0800b9bc 	.word	0x0800b9bc
 8002274:	0800b880 	.word	0x0800b880
				  buffer_B17_str[buffer_B17_arr.length] = '\0';
 8002278:	f8b7 3500 	ldrh.w	r3, [r7, #1280]	@ 0x500
 800227c:	461a      	mov	r2, r3
 800227e:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8002282:	4413      	add	r3, r2
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
				  memcpy(buffer_B17_str, buffer_B17_arr.data, buffer_B17_arr.length);
 8002288:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 800228c:	f8b7 2500 	ldrh.w	r2, [r7, #1280]	@ 0x500
 8002290:	4619      	mov	r1, r3
 8002292:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 8002296:	f007 fa2a 	bl	80096ee <memcpy>
				  Process_NMEA_Data(buffer_B17_str);
 800229a:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 800229e:	f7ff fb63 	bl	8001968 <Process_NMEA_Data>
				  free(buffer_B17_str);
 80022a2:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 80022a6:	f006 fa25 	bl	80086f4 <free>
			  }

			  DMAHandler_B17.stat = IDLE;
 80022aa:	4b2c      	ldr	r3, [pc, #176]	@ (800235c <main+0x418>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]

	 	  }

	  //Add OBC command listener

	  Execute_OBC_Cmd(&OBC, &B16_status, &B17_status);
 80022b0:	f507 72d6 	add.w	r2, r7, #428	@ 0x1ac
 80022b4:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 80022b8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fce3 	bl	8001c88 <Execute_OBC_Cmd>

	  if((B16_status.NMEA_set == 1) && (iteration_index%100000 == 0)){
 80022c2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80022c6:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d11b      	bne.n	8002308 <main+0x3c4>
 80022d0:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80022d4:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <main+0x41c>)
 80022d6:	fb83 1302 	smull	r1, r3, r3, r2
 80022da:	1359      	asrs	r1, r3, #13
 80022dc:	17d3      	asrs	r3, r2, #31
 80022de:	1acb      	subs	r3, r1, r3
 80022e0:	4920      	ldr	r1, [pc, #128]	@ (8002364 <main+0x420>)
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10d      	bne.n	8002308 <main+0x3c4>
		  HAL_UART_Transmit_IT(&huart4, cmd_configure_NMEA_intervals.data, cmd_configure_NMEA_intervals.length);
 80022ec:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80022f0:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80022fa:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80022fe:	889b      	ldrh	r3, [r3, #4]
 8002300:	461a      	mov	r2, r3
 8002302:	4819      	ldr	r0, [pc, #100]	@ (8002368 <main+0x424>)
 8002304:	f004 f8fa 	bl	80064fc <HAL_UART_Transmit_IT>
	  }

	  iteration_index++;
 8002308:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800230c:	3301      	adds	r3, #1
 800230e:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
	  if(iteration_index > 10000000){
 8002312:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8002316:	4a15      	ldr	r2, [pc, #84]	@ (800236c <main+0x428>)
 8002318:	4293      	cmp	r3, r2
 800231a:	dc00      	bgt.n	800231e <main+0x3da>
	  if(B17_ENABLED){
 800231c:	e71e      	b.n	800215c <main+0x218>
		  break;
 800231e:	bf00      	nop

	  f_mount(NULL, "", 1);

  }

  free(OBC_Rx_arr.data), free(cmd_configure_navigation_data_message_interval.data);
 8002320:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002324:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f006 f9e2 	bl	80086f4 <free>
 8002330:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002334:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f006 f9da 	bl	80086f4 <free>
  free(cmd_query_software_version.data);
 8002340:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002344:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f006 f9d2 	bl	80086f4 <free>
  return 0;
 8002350:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8002352:	4618      	mov	r0, r3
 8002354:	f207 5724 	addw	r7, r7, #1316	@ 0x524
 8002358:	46bd      	mov	sp, r7
 800235a:	bd90      	pop	{r4, r7, pc}
 800235c:	20000ae8 	.word	0x20000ae8
 8002360:	14f8b589 	.word	0x14f8b589
 8002364:	000186a0 	.word	0x000186a0
 8002368:	20000340 	.word	0x20000340
 800236c:	00989680 	.word	0x00989680

08002370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b096      	sub	sp, #88	@ 0x58
 8002374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	2244      	movs	r2, #68	@ 0x44
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f007 f8a3 	bl	80094ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002384:	463b      	mov	r3, r7
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002392:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002396:	f001 ffb5 	bl	8004304 <HAL_PWREx_ControlVoltageScaling>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80023a0:	f000 f990 	bl	80026c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80023a4:	2310      	movs	r3, #16
 80023a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80023a8:	2301      	movs	r3, #1
 80023aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80023b0:	2360      	movs	r3, #96	@ 0x60
 80023b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	4618      	mov	r0, r3
 80023be:	f001 fff7 	bl	80043b0 <HAL_RCC_OscConfig>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80023c8:	f000 f97c 	bl	80026c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023cc:	230f      	movs	r3, #15
 80023ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80023d0:	2300      	movs	r3, #0
 80023d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023dc:	2300      	movs	r3, #0
 80023de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023e0:	463b      	mov	r3, r7
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 fbbf 	bl	8004b68 <HAL_RCC_ClockConfig>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80023f0:	f000 f968 	bl	80026c4 <Error_Handler>
  }
}
 80023f4:	bf00      	nop
 80023f6:	3758      	adds	r7, #88	@ 0x58
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002400:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <MX_SPI1_Init+0x74>)
 8002402:	4a1c      	ldr	r2, [pc, #112]	@ (8002474 <MX_SPI1_Init+0x78>)
 8002404:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002406:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <MX_SPI1_Init+0x74>)
 8002408:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800240c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800240e:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <MX_SPI1_Init+0x74>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002414:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <MX_SPI1_Init+0x74>)
 8002416:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800241a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800241c:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <MX_SPI1_Init+0x74>)
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002422:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <MX_SPI1_Init+0x74>)
 8002424:	2200      	movs	r2, #0
 8002426:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002428:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <MX_SPI1_Init+0x74>)
 800242a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800242e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002430:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <MX_SPI1_Init+0x74>)
 8002432:	2200      	movs	r2, #0
 8002434:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002436:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <MX_SPI1_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <MX_SPI1_Init+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002442:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <MX_SPI1_Init+0x74>)
 8002444:	2200      	movs	r2, #0
 8002446:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002448:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <MX_SPI1_Init+0x74>)
 800244a:	2207      	movs	r2, #7
 800244c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800244e:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <MX_SPI1_Init+0x74>)
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <MX_SPI1_Init+0x74>)
 8002456:	2208      	movs	r2, #8
 8002458:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800245a:	4805      	ldr	r0, [pc, #20]	@ (8002470 <MX_SPI1_Init+0x74>)
 800245c:	f003 fa64 	bl	8005928 <HAL_SPI_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002466:	f000 f92d 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200002dc 	.word	0x200002dc
 8002474:	40013000 	.word	0x40013000

08002478 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <MX_UART4_Init+0x58>)
 800247e:	4a15      	ldr	r2, [pc, #84]	@ (80024d4 <MX_UART4_Init+0x5c>)
 8002480:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002482:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <MX_UART4_Init+0x58>)
 8002484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002488:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <MX_UART4_Init+0x58>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <MX_UART4_Init+0x58>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002496:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <MX_UART4_Init+0x58>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <MX_UART4_Init+0x58>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <MX_UART4_Init+0x58>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <MX_UART4_Init+0x58>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ae:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <MX_UART4_Init+0x58>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024b4:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <MX_UART4_Init+0x58>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024ba:	4805      	ldr	r0, [pc, #20]	@ (80024d0 <MX_UART4_Init+0x58>)
 80024bc:	f003 ffd0 	bl	8006460 <HAL_UART_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80024c6:	f000 f8fd 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000340 	.word	0x20000340
 80024d4:	40004c00 	.word	0x40004c00

080024d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024dc:	4b14      	ldr	r3, [pc, #80]	@ (8002530 <MX_USART1_UART_Init+0x58>)
 80024de:	4a15      	ldr	r2, [pc, #84]	@ (8002534 <MX_USART1_UART_Init+0x5c>)
 80024e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024e2:	4b13      	ldr	r3, [pc, #76]	@ (8002530 <MX_USART1_UART_Init+0x58>)
 80024e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024ea:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <MX_USART1_UART_Init+0x58>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002530 <MX_USART1_UART_Init+0x58>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002530 <MX_USART1_UART_Init+0x58>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <MX_USART1_UART_Init+0x58>)
 80024fe:	220c      	movs	r2, #12
 8002500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002502:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <MX_USART1_UART_Init+0x58>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002508:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <MX_USART1_UART_Init+0x58>)
 800250a:	2200      	movs	r2, #0
 800250c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800250e:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <MX_USART1_UART_Init+0x58>)
 8002510:	2200      	movs	r2, #0
 8002512:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <MX_USART1_UART_Init+0x58>)
 8002516:	2200      	movs	r2, #0
 8002518:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800251a:	4805      	ldr	r0, [pc, #20]	@ (8002530 <MX_USART1_UART_Init+0x58>)
 800251c:	f003 ffa0 	bl	8006460 <HAL_UART_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002526:	f000 f8cd 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200003c8 	.word	0x200003c8
 8002534:	40013800 	.word	0x40013800

08002538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800253c:	4b14      	ldr	r3, [pc, #80]	@ (8002590 <MX_USART2_UART_Init+0x58>)
 800253e:	4a15      	ldr	r2, [pc, #84]	@ (8002594 <MX_USART2_UART_Init+0x5c>)
 8002540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002542:	4b13      	ldr	r3, [pc, #76]	@ (8002590 <MX_USART2_UART_Init+0x58>)
 8002544:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800254a:	4b11      	ldr	r3, [pc, #68]	@ (8002590 <MX_USART2_UART_Init+0x58>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002550:	4b0f      	ldr	r3, [pc, #60]	@ (8002590 <MX_USART2_UART_Init+0x58>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002556:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <MX_USART2_UART_Init+0x58>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800255c:	4b0c      	ldr	r3, [pc, #48]	@ (8002590 <MX_USART2_UART_Init+0x58>)
 800255e:	220c      	movs	r2, #12
 8002560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002562:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <MX_USART2_UART_Init+0x58>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002568:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <MX_USART2_UART_Init+0x58>)
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800256e:	4b08      	ldr	r3, [pc, #32]	@ (8002590 <MX_USART2_UART_Init+0x58>)
 8002570:	2200      	movs	r2, #0
 8002572:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <MX_USART2_UART_Init+0x58>)
 8002576:	2200      	movs	r2, #0
 8002578:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800257a:	4805      	ldr	r0, [pc, #20]	@ (8002590 <MX_USART2_UART_Init+0x58>)
 800257c:	f003 ff70 	bl	8006460 <HAL_UART_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002586:	f000 f89d 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000450 	.word	0x20000450
 8002594:	40004400 	.word	0x40004400

08002598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800259e:	4b16      	ldr	r3, [pc, #88]	@ (80025f8 <MX_DMA_Init+0x60>)
 80025a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a2:	4a15      	ldr	r2, [pc, #84]	@ (80025f8 <MX_DMA_Init+0x60>)
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80025aa:	4b13      	ldr	r3, [pc, #76]	@ (80025f8 <MX_DMA_Init+0x60>)
 80025ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <MX_DMA_Init+0x60>)
 80025b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ba:	4a0f      	ldr	r2, [pc, #60]	@ (80025f8 <MX_DMA_Init+0x60>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80025c2:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <MX_DMA_Init+0x60>)
 80025c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	2010      	movs	r0, #16
 80025d4:	f001 fa19 	bl	8003a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80025d8:	2010      	movs	r0, #16
 80025da:	f001 fa32 	bl	8003a42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2100      	movs	r1, #0
 80025e2:	203c      	movs	r0, #60	@ 0x3c
 80025e4:	f001 fa11 	bl	8003a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80025e8:	203c      	movs	r0, #60	@ 0x3c
 80025ea:	f001 fa2a 	bl	8003a42 <HAL_NVIC_EnableIRQ>

}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000

080025fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	60da      	str	r2, [r3, #12]
 8002610:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002612:	4b29      	ldr	r3, [pc, #164]	@ (80026b8 <MX_GPIO_Init+0xbc>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002616:	4a28      	ldr	r2, [pc, #160]	@ (80026b8 <MX_GPIO_Init+0xbc>)
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261e:	4b26      	ldr	r3, [pc, #152]	@ (80026b8 <MX_GPIO_Init+0xbc>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b23      	ldr	r3, [pc, #140]	@ (80026b8 <MX_GPIO_Init+0xbc>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262e:	4a22      	ldr	r2, [pc, #136]	@ (80026b8 <MX_GPIO_Init+0xbc>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002636:	4b20      	ldr	r3, [pc, #128]	@ (80026b8 <MX_GPIO_Init+0xbc>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <MX_GPIO_Init+0xbc>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002646:	4a1c      	ldr	r2, [pc, #112]	@ (80026b8 <MX_GPIO_Init+0xbc>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800264e:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <MX_GPIO_Init+0xbc>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800265a:	2200      	movs	r2, #0
 800265c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002660:	4816      	ldr	r0, [pc, #88]	@ (80026bc <MX_GPIO_Init+0xc0>)
 8002662:	f001 fe29 	bl	80042b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8002666:	2200      	movs	r2, #0
 8002668:	f640 4106 	movw	r1, #3078	@ 0xc06
 800266c:	4814      	ldr	r0, [pc, #80]	@ (80026c0 <MX_GPIO_Init+0xc4>)
 800266e:	f001 fe23 	bl	80042b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002672:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002678:	2301      	movs	r3, #1
 800267a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002684:	f107 030c 	add.w	r3, r7, #12
 8002688:	4619      	mov	r1, r3
 800268a:	480c      	ldr	r0, [pc, #48]	@ (80026bc <MX_GPIO_Init+0xc0>)
 800268c:	f001 fc6a 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = SD_CS_Pin|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8002690:	f640 4306 	movw	r3, #3078	@ 0xc06
 8002694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002696:	2301      	movs	r3, #1
 8002698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a2:	f107 030c 	add.w	r3, r7, #12
 80026a6:	4619      	mov	r1, r3
 80026a8:	4805      	ldr	r0, [pc, #20]	@ (80026c0 <MX_GPIO_Init+0xc4>)
 80026aa:	f001 fc5b 	bl	8003f64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026ae:	bf00      	nop
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	48000800 	.word	0x48000800
 80026c0:	48000400 	.word	0x48000400

080026c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c8:	b672      	cpsid	i
}
 80026ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 80026cc:	bf00      	nop
 80026ce:	e7fd      	b.n	80026cc <Error_Handler+0x8>

080026d0 <Checksum_NMEA>:
#include <stdlib.h>
#include "types.h"
#include "fatfs.h"
#include "main.h"

int Checksum_NMEA(char* message){
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
both not included. Ending of the message is * checksum_1 checksum_2 <LF><CR>, so i<len(message)-5.
input: char* message, which is a string containing the message eligible for computing checksum.
APPROVED FOR FLIGHT
*/

    int checksum = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]

    // Find the start of the NMEA message (after '$') and before '*'
    if (message[0] == '$') {
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b24      	cmp	r3, #36	@ 0x24
 80026e2:	d10c      	bne.n	80026fe <Checksum_NMEA+0x2e>
        message++;  // Skip the '$' symbol
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3301      	adds	r3, #1
 80026e8:	607b      	str	r3, [r7, #4]
    }

    while (*message != '*' && *message != '\0') {
 80026ea:	e008      	b.n	80026fe <Checksum_NMEA+0x2e>
        checksum ^= *message;  // XOR the character with the checksum
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4053      	eors	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
        message++;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3301      	adds	r3, #1
 80026fc:	607b      	str	r3, [r7, #4]
    while (*message != '*' && *message != '\0') {
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b2a      	cmp	r3, #42	@ 0x2a
 8002704:	d003      	beq.n	800270e <Checksum_NMEA+0x3e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ee      	bne.n	80026ec <Checksum_NMEA+0x1c>
    }

return checksum;
 800270e:	68fb      	ldr	r3, [r7, #12]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <Get_Talker_ID>:

char* Get_Talker_ID(char* message){
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
* GA: GALILEO
* BD or GB: BEIDOU
* input: *char NMEA message as a string.
* returns: char* string containing ID code.
* */
char* id = (char*)malloc(3*sizeof(char));
 8002724:	2003      	movs	r0, #3
 8002726:	f005 ffdd 	bl	80086e4 <malloc>
 800272a:	4603      	mov	r3, r0
 800272c:	60fb      	str	r3, [r7, #12]
id[0] = message[1];
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	785a      	ldrb	r2, [r3, #1]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	701a      	strb	r2, [r3, #0]
id[1] = message[2];
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3301      	adds	r3, #1
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	7892      	ldrb	r2, [r2, #2]
 800273e:	701a      	strb	r2, [r3, #0]
id[2] = '\0';
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3302      	adds	r3, #2
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]

return id;
 8002748:	68fb      	ldr	r3, [r7, #12]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <Get_Mode>:
char* Get_Mode(char* message){
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
* RMC: Recommended Minimum Specific GPS Data
* VTG: Course over ground and ground speed.
* input: char* NMEA message as a string.
* returns: char* string containing mode code.
* */
char* mode = (char*)malloc(4*sizeof(char));
 800275a:	2004      	movs	r0, #4
 800275c:	f005 ffc2 	bl	80086e4 <malloc>
 8002760:	4603      	mov	r3, r0
 8002762:	60fb      	str	r3, [r7, #12]
mode[0] = message[3];
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	78da      	ldrb	r2, [r3, #3]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	701a      	strb	r2, [r3, #0]
mode[1] = message[4];
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3301      	adds	r3, #1
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	7912      	ldrb	r2, [r2, #4]
 8002774:	701a      	strb	r2, [r3, #0]
mode[2] = message[5];
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3302      	adds	r3, #2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	7952      	ldrb	r2, [r2, #5]
 800277e:	701a      	strb	r2, [r3, #0]
mode[3] = '\0';
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3303      	adds	r3, #3
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
return mode;
 8002788:	68fb      	ldr	r3, [r7, #12]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <Get_UTCTime>:

char* Get_UTCTime(char* message, char* mode){
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b089      	sub	sp, #36	@ 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    /*Gets UTC Time from NMEA message (hhmmss.ssss).
    inputs: NMEA message in the form of char*, mode of the message in char* (run Get_Mode() first).
    outputs: char* containing the UTC Time in a string (raw).*/
    char* result =NULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]

    if((strcmp(mode, "GGA")==0)||(strcmp(mode, "GLL")==0)||(strcmp(mode, "ZDA")==0) || (strcmp("RMC", mode)==0)||(strcmp("GNS", mode)==0)){
 80027a2:	4966      	ldr	r1, [pc, #408]	@ (800293c <Get_UTCTime+0x1a8>)
 80027a4:	6838      	ldr	r0, [r7, #0]
 80027a6:	f7fd fd13 	bl	80001d0 <strcmp>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01c      	beq.n	80027ea <Get_UTCTime+0x56>
 80027b0:	4963      	ldr	r1, [pc, #396]	@ (8002940 <Get_UTCTime+0x1ac>)
 80027b2:	6838      	ldr	r0, [r7, #0]
 80027b4:	f7fd fd0c 	bl	80001d0 <strcmp>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d015      	beq.n	80027ea <Get_UTCTime+0x56>
 80027be:	4961      	ldr	r1, [pc, #388]	@ (8002944 <Get_UTCTime+0x1b0>)
 80027c0:	6838      	ldr	r0, [r7, #0]
 80027c2:	f7fd fd05 	bl	80001d0 <strcmp>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00e      	beq.n	80027ea <Get_UTCTime+0x56>
 80027cc:	6839      	ldr	r1, [r7, #0]
 80027ce:	485e      	ldr	r0, [pc, #376]	@ (8002948 <Get_UTCTime+0x1b4>)
 80027d0:	f7fd fcfe 	bl	80001d0 <strcmp>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <Get_UTCTime+0x56>
 80027da:	6839      	ldr	r1, [r7, #0]
 80027dc:	485b      	ldr	r0, [pc, #364]	@ (800294c <Get_UTCTime+0x1b8>)
 80027de:	f7fd fcf7 	bl	80001d0 <strcmp>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f040 808c 	bne.w	8002902 <Get_UTCTime+0x16e>
        char* message_cpy= (char*)malloc((strlen(message)+1)*sizeof(char));
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fd fd50 	bl	8000290 <strlen>
 80027f0:	4603      	mov	r3, r0
 80027f2:	3301      	adds	r3, #1
 80027f4:	4618      	mov	r0, r3
 80027f6:	f005 ff75 	bl	80086e4 <malloc>
 80027fa:	4603      	mov	r3, r0
 80027fc:	60fb      	str	r3, [r7, #12]
        int chop_count = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
        strcpy(message_cpy, message);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4618      	mov	r0, r3
 8002808:	f006 ff69 	bl	80096de <strcpy>
        message_cpy[strlen(message)] = '\0';
 800280c:	68fc      	ldr	r4, [r7, #12]
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fd fd3e 	bl	8000290 <strlen>
 8002814:	4603      	mov	r3, r0
 8002816:	4423      	add	r3, r4
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
        char* original_message_cpy = message_cpy;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	613b      	str	r3, [r7, #16]
        for(char* chunk = strsep(&message_cpy, ","); chunk!=NULL; chunk=strsep(&message_cpy,",")){
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	494a      	ldr	r1, [pc, #296]	@ (8002950 <Get_UTCTime+0x1bc>)
 8002826:	4618      	mov	r0, r3
 8002828:	f006 fe8f 	bl	800954a <strsep>
 800282c:	6178      	str	r0, [r7, #20]
 800282e:	e061      	b.n	80028f4 <Get_UTCTime+0x160>

            if((strcmp(mode, "GLL")==0) && (chop_count == 5)){
 8002830:	4943      	ldr	r1, [pc, #268]	@ (8002940 <Get_UTCTime+0x1ac>)
 8002832:	6838      	ldr	r0, [r7, #0]
 8002834:	f7fd fccc 	bl	80001d0 <strcmp>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d11a      	bne.n	8002874 <Get_UTCTime+0xe0>
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b05      	cmp	r3, #5
 8002842:	d117      	bne.n	8002874 <Get_UTCTime+0xe0>

                result = (char*)malloc(strlen(chunk+1)*sizeof(char));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	3301      	adds	r3, #1
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fd21 	bl	8000290 <strlen>
 800284e:	4603      	mov	r3, r0
 8002850:	4618      	mov	r0, r3
 8002852:	f005 ff47 	bl	80086e4 <malloc>
 8002856:	4603      	mov	r3, r0
 8002858:	61fb      	str	r3, [r7, #28]
                strcpy(result, chunk);
 800285a:	6979      	ldr	r1, [r7, #20]
 800285c:	69f8      	ldr	r0, [r7, #28]
 800285e:	f006 ff3e 	bl	80096de <strcpy>
                result[strlen(chunk)] = '\0';
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7fd fd14 	bl	8000290 <strlen>
 8002868:	4602      	mov	r2, r0
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
                break;
 8002872:	e042      	b.n	80028fa <Get_UTCTime+0x166>
            }

            if(((strcmp(mode, "ZDA")==0)||(strcmp(mode, "GGA")==0)||(strcmp(mode, "RMC")==0)||(strcmp(mode, "GNS")==0)) && (chop_count == 1)){
 8002874:	4933      	ldr	r1, [pc, #204]	@ (8002944 <Get_UTCTime+0x1b0>)
 8002876:	6838      	ldr	r0, [r7, #0]
 8002878:	f7fd fcaa 	bl	80001d0 <strcmp>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d014      	beq.n	80028ac <Get_UTCTime+0x118>
 8002882:	492e      	ldr	r1, [pc, #184]	@ (800293c <Get_UTCTime+0x1a8>)
 8002884:	6838      	ldr	r0, [r7, #0]
 8002886:	f7fd fca3 	bl	80001d0 <strcmp>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00d      	beq.n	80028ac <Get_UTCTime+0x118>
 8002890:	492d      	ldr	r1, [pc, #180]	@ (8002948 <Get_UTCTime+0x1b4>)
 8002892:	6838      	ldr	r0, [r7, #0]
 8002894:	f7fd fc9c 	bl	80001d0 <strcmp>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d006      	beq.n	80028ac <Get_UTCTime+0x118>
 800289e:	492b      	ldr	r1, [pc, #172]	@ (800294c <Get_UTCTime+0x1b8>)
 80028a0:	6838      	ldr	r0, [r7, #0]
 80028a2:	f7fd fc95 	bl	80001d0 <strcmp>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d119      	bne.n	80028e0 <Get_UTCTime+0x14c>
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d116      	bne.n	80028e0 <Get_UTCTime+0x14c>

                result = (char*)malloc((strlen(chunk)+1)*sizeof(char));
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7fd fcec 	bl	8000290 <strlen>
 80028b8:	4603      	mov	r3, r0
 80028ba:	3301      	adds	r3, #1
 80028bc:	4618      	mov	r0, r3
 80028be:	f005 ff11 	bl	80086e4 <malloc>
 80028c2:	4603      	mov	r3, r0
 80028c4:	61fb      	str	r3, [r7, #28]
                strcpy(result, chunk);
 80028c6:	6979      	ldr	r1, [r7, #20]
 80028c8:	69f8      	ldr	r0, [r7, #28]
 80028ca:	f006 ff08 	bl	80096de <strcpy>
                result[strlen(chunk)] = '\0';
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f7fd fcde 	bl	8000290 <strlen>
 80028d4:	4602      	mov	r2, r0
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	4413      	add	r3, r2
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
                break;
 80028de:	e00c      	b.n	80028fa <Get_UTCTime+0x166>
            }


            chop_count++;
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	3301      	adds	r3, #1
 80028e4:	61bb      	str	r3, [r7, #24]
        for(char* chunk = strsep(&message_cpy, ","); chunk!=NULL; chunk=strsep(&message_cpy,",")){
 80028e6:	f107 030c 	add.w	r3, r7, #12
 80028ea:	4919      	ldr	r1, [pc, #100]	@ (8002950 <Get_UTCTime+0x1bc>)
 80028ec:	4618      	mov	r0, r3
 80028ee:	f006 fe2c 	bl	800954a <strsep>
 80028f2:	6178      	str	r0, [r7, #20]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d19a      	bne.n	8002830 <Get_UTCTime+0x9c>
        }

        free(original_message_cpy);
 80028fa:	6938      	ldr	r0, [r7, #16]
 80028fc:	f005 fefa 	bl	80086f4 <free>
    if((strcmp(mode, "GGA")==0)||(strcmp(mode, "GLL")==0)||(strcmp(mode, "ZDA")==0) || (strcmp("RMC", mode)==0)||(strcmp("GNS", mode)==0)){
 8002900:	e016      	b.n	8002930 <Get_UTCTime+0x19c>

    }

    else{
        result = malloc(3*sizeof(char));
 8002902:	2003      	movs	r0, #3
 8002904:	f005 feee 	bl	80086e4 <malloc>
 8002908:	4603      	mov	r3, r0
 800290a:	61fb      	str	r3, [r7, #28]
        if(result==NULL){exit(-1);}
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <Get_UTCTime+0x186>
 8002912:	f04f 30ff 	mov.w	r0, #4294967295
 8002916:	f005 fed3 	bl	80086c0 <exit>
        result[0] = 'N';
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	224e      	movs	r2, #78	@ 0x4e
 800291e:	701a      	strb	r2, [r3, #0]
        result[1] = 'A';
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	3301      	adds	r3, #1
 8002924:	2241      	movs	r2, #65	@ 0x41
 8002926:	701a      	strb	r2, [r3, #0]
        result[2] = '\0';
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	3302      	adds	r3, #2
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
    }
    return result;
 8002930:	69fb      	ldr	r3, [r7, #28]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3724      	adds	r7, #36	@ 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd90      	pop	{r4, r7, pc}
 800293a:	bf00      	nop
 800293c:	0800ba10 	.word	0x0800ba10
 8002940:	0800ba14 	.word	0x0800ba14
 8002944:	0800ba18 	.word	0x0800ba18
 8002948:	0800ba1c 	.word	0x0800ba1c
 800294c:	0800ba20 	.word	0x0800ba20
 8002950:	0800ba24 	.word	0x0800ba24

08002954 <Get_Latitude>:
char* Get_Latitude(char* message, char* mode){
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b089      	sub	sp, #36	@ 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
    /*Gets the latitude from a NMEA message.
    inputs: char* containing NMEA message, char* containing the mode of the message.
    outputs: char* containing the latitude in the form ddmm.mmmmN/S, where N/S is the hemisphere.*/

    char* result = NULL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]

    if(strcmp("GLL", mode)==0 || strcmp("GGA", mode)==0 || strcmp("RMC", mode)==0 ||strcmp("GNS", mode)==0 ){
 8002962:	6839      	ldr	r1, [r7, #0]
 8002964:	487b      	ldr	r0, [pc, #492]	@ (8002b54 <Get_Latitude+0x200>)
 8002966:	f7fd fc33 	bl	80001d0 <strcmp>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d015      	beq.n	800299c <Get_Latitude+0x48>
 8002970:	6839      	ldr	r1, [r7, #0]
 8002972:	4879      	ldr	r0, [pc, #484]	@ (8002b58 <Get_Latitude+0x204>)
 8002974:	f7fd fc2c 	bl	80001d0 <strcmp>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00e      	beq.n	800299c <Get_Latitude+0x48>
 800297e:	6839      	ldr	r1, [r7, #0]
 8002980:	4876      	ldr	r0, [pc, #472]	@ (8002b5c <Get_Latitude+0x208>)
 8002982:	f7fd fc25 	bl	80001d0 <strcmp>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <Get_Latitude+0x48>
 800298c:	6839      	ldr	r1, [r7, #0]
 800298e:	4874      	ldr	r0, [pc, #464]	@ (8002b60 <Get_Latitude+0x20c>)
 8002990:	f7fd fc1e 	bl	80001d0 <strcmp>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	f040 80c0 	bne.w	8002b1c <Get_Latitude+0x1c8>
        char* message_cpy= (char*)malloc((strlen(message)+1)*sizeof(char));
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7fd fc77 	bl	8000290 <strlen>
 80029a2:	4603      	mov	r3, r0
 80029a4:	3301      	adds	r3, #1
 80029a6:	4618      	mov	r0, r3
 80029a8:	f005 fe9c 	bl	80086e4 <malloc>
 80029ac:	4603      	mov	r3, r0
 80029ae:	60fb      	str	r3, [r7, #12]
        int chop_count = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61bb      	str	r3, [r7, #24]
        strcpy(message_cpy, message);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f006 fe90 	bl	80096de <strcpy>
        message_cpy[strlen(message)]='\0';
 80029be:	68fc      	ldr	r4, [r7, #12]
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7fd fc65 	bl	8000290 <strlen>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4423      	add	r3, r4
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
        char* original_message_cpy = message_cpy;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	613b      	str	r3, [r7, #16]
        for(char* chunk = strsep(&message_cpy, ","); chunk!=NULL; chunk=strsep(&message_cpy,",")){
 80029d2:	f107 030c 	add.w	r3, r7, #12
 80029d6:	4963      	ldr	r1, [pc, #396]	@ (8002b64 <Get_Latitude+0x210>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f006 fdb6 	bl	800954a <strsep>
 80029de:	6178      	str	r0, [r7, #20]
 80029e0:	e094      	b.n	8002b0c <Get_Latitude+0x1b8>


            if((strcmp("GLL", mode)==0) && (chop_count == 1)){
 80029e2:	6839      	ldr	r1, [r7, #0]
 80029e4:	485b      	ldr	r0, [pc, #364]	@ (8002b54 <Get_Latitude+0x200>)
 80029e6:	f7fd fbf3 	bl	80001d0 <strcmp>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d124      	bne.n	8002a3a <Get_Latitude+0xe6>
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d121      	bne.n	8002a3a <Get_Latitude+0xe6>
                result = (char*)malloc((strlen(chunk)+2)*sizeof(char));
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f7fd fc4a 	bl	8000290 <strlen>
 80029fc:	4603      	mov	r3, r0
 80029fe:	3302      	adds	r3, #2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f005 fe6f 	bl	80086e4 <malloc>
 8002a06:	4603      	mov	r3, r0
 8002a08:	61fb      	str	r3, [r7, #28]
                strcpy(result, chunk);
 8002a0a:	6979      	ldr	r1, [r7, #20]
 8002a0c:	69f8      	ldr	r0, [r7, #28]
 8002a0e:	f006 fe66 	bl	80096de <strcpy>
                chunk = strsep(&message_cpy, ",");
 8002a12:	f107 030c 	add.w	r3, r7, #12
 8002a16:	4953      	ldr	r1, [pc, #332]	@ (8002b64 <Get_Latitude+0x210>)
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f006 fd96 	bl	800954a <strsep>
 8002a1e:	6178      	str	r0, [r7, #20]
                strcat(result, chunk);
 8002a20:	6979      	ldr	r1, [r7, #20]
 8002a22:	69f8      	ldr	r0, [r7, #28]
 8002a24:	f006 fd59 	bl	80094da <strcat>
                result[strlen(result)]='\0';
 8002a28:	69f8      	ldr	r0, [r7, #28]
 8002a2a:	f7fd fc31 	bl	8000290 <strlen>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	4413      	add	r3, r2
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]

                break;
 8002a38:	e06c      	b.n	8002b14 <Get_Latitude+0x1c0>
            }

            if(((strcmp("GGA", mode)==0) || (strcmp("GNS", mode)==0)) && (chop_count == 2)){
 8002a3a:	6839      	ldr	r1, [r7, #0]
 8002a3c:	4846      	ldr	r0, [pc, #280]	@ (8002b58 <Get_Latitude+0x204>)
 8002a3e:	f7fd fbc7 	bl	80001d0 <strcmp>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d006      	beq.n	8002a56 <Get_Latitude+0x102>
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	4845      	ldr	r0, [pc, #276]	@ (8002b60 <Get_Latitude+0x20c>)
 8002a4c:	f7fd fbc0 	bl	80001d0 <strcmp>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d124      	bne.n	8002aa0 <Get_Latitude+0x14c>
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d121      	bne.n	8002aa0 <Get_Latitude+0x14c>
                result = (char*)malloc((strlen(chunk)+2)*sizeof(char));
 8002a5c:	6978      	ldr	r0, [r7, #20]
 8002a5e:	f7fd fc17 	bl	8000290 <strlen>
 8002a62:	4603      	mov	r3, r0
 8002a64:	3302      	adds	r3, #2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f005 fe3c 	bl	80086e4 <malloc>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	61fb      	str	r3, [r7, #28]
                strcpy(result, chunk);
 8002a70:	6979      	ldr	r1, [r7, #20]
 8002a72:	69f8      	ldr	r0, [r7, #28]
 8002a74:	f006 fe33 	bl	80096de <strcpy>
                chunk = strsep(&message_cpy, ",");
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	4939      	ldr	r1, [pc, #228]	@ (8002b64 <Get_Latitude+0x210>)
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f006 fd63 	bl	800954a <strsep>
 8002a84:	6178      	str	r0, [r7, #20]
                strcat(result, chunk);
 8002a86:	6979      	ldr	r1, [r7, #20]
 8002a88:	69f8      	ldr	r0, [r7, #28]
 8002a8a:	f006 fd26 	bl	80094da <strcat>
                result[strlen(result)]='\0';
 8002a8e:	69f8      	ldr	r0, [r7, #28]
 8002a90:	f7fd fbfe 	bl	8000290 <strlen>
 8002a94:	4602      	mov	r2, r0
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4413      	add	r3, r2
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
                break;
 8002a9e:	e039      	b.n	8002b14 <Get_Latitude+0x1c0>
            }

            if((strcmp("RMC", mode)==0) && (chop_count == 3)){
 8002aa0:	6839      	ldr	r1, [r7, #0]
 8002aa2:	482e      	ldr	r0, [pc, #184]	@ (8002b5c <Get_Latitude+0x208>)
 8002aa4:	f7fd fb94 	bl	80001d0 <strcmp>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d124      	bne.n	8002af8 <Get_Latitude+0x1a4>
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d121      	bne.n	8002af8 <Get_Latitude+0x1a4>
                result = (char*)malloc((strlen(chunk)+2)*sizeof(char));
 8002ab4:	6978      	ldr	r0, [r7, #20]
 8002ab6:	f7fd fbeb 	bl	8000290 <strlen>
 8002aba:	4603      	mov	r3, r0
 8002abc:	3302      	adds	r3, #2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f005 fe10 	bl	80086e4 <malloc>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	61fb      	str	r3, [r7, #28]
                strcpy(result, chunk);
 8002ac8:	6979      	ldr	r1, [r7, #20]
 8002aca:	69f8      	ldr	r0, [r7, #28]
 8002acc:	f006 fe07 	bl	80096de <strcpy>
                chunk = strsep(&message_cpy, ",");
 8002ad0:	f107 030c 	add.w	r3, r7, #12
 8002ad4:	4923      	ldr	r1, [pc, #140]	@ (8002b64 <Get_Latitude+0x210>)
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f006 fd37 	bl	800954a <strsep>
 8002adc:	6178      	str	r0, [r7, #20]
                strcat(result, chunk);
 8002ade:	6979      	ldr	r1, [r7, #20]
 8002ae0:	69f8      	ldr	r0, [r7, #28]
 8002ae2:	f006 fcfa 	bl	80094da <strcat>
                result[strlen(result)]='\0';
 8002ae6:	69f8      	ldr	r0, [r7, #28]
 8002ae8:	f7fd fbd2 	bl	8000290 <strlen>
 8002aec:	4602      	mov	r2, r0
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
                break;
 8002af6:	e00d      	b.n	8002b14 <Get_Latitude+0x1c0>
            }
            chop_count++;
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	3301      	adds	r3, #1
 8002afc:	61bb      	str	r3, [r7, #24]
        for(char* chunk = strsep(&message_cpy, ","); chunk!=NULL; chunk=strsep(&message_cpy,",")){
 8002afe:	f107 030c 	add.w	r3, r7, #12
 8002b02:	4918      	ldr	r1, [pc, #96]	@ (8002b64 <Get_Latitude+0x210>)
 8002b04:	4618      	mov	r0, r3
 8002b06:	f006 fd20 	bl	800954a <strsep>
 8002b0a:	6178      	str	r0, [r7, #20]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f47f af67 	bne.w	80029e2 <Get_Latitude+0x8e>
        }

        free(original_message_cpy);
 8002b14:	6938      	ldr	r0, [r7, #16]
 8002b16:	f005 fded 	bl	80086f4 <free>
    if(strcmp("GLL", mode)==0 || strcmp("GGA", mode)==0 || strcmp("RMC", mode)==0 ||strcmp("GNS", mode)==0 ){
 8002b1a:	e016      	b.n	8002b4a <Get_Latitude+0x1f6>

    }
    else{
        result = malloc(3*sizeof(char));
 8002b1c:	2003      	movs	r0, #3
 8002b1e:	f005 fde1 	bl	80086e4 <malloc>
 8002b22:	4603      	mov	r3, r0
 8002b24:	61fb      	str	r3, [r7, #28]
        if(result==NULL){exit(-1);}
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d103      	bne.n	8002b34 <Get_Latitude+0x1e0>
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	f005 fdc6 	bl	80086c0 <exit>
        result[0] = 'N';
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	224e      	movs	r2, #78	@ 0x4e
 8002b38:	701a      	strb	r2, [r3, #0]
        result[1] = 'A';
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	2241      	movs	r2, #65	@ 0x41
 8002b40:	701a      	strb	r2, [r3, #0]
        result[2] = '\0';
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3302      	adds	r3, #2
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
    }

    return result;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3724      	adds	r7, #36	@ 0x24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd90      	pop	{r4, r7, pc}
 8002b54:	0800ba14 	.word	0x0800ba14
 8002b58:	0800ba10 	.word	0x0800ba10
 8002b5c:	0800ba1c 	.word	0x0800ba1c
 8002b60:	0800ba20 	.word	0x0800ba20
 8002b64:	0800ba24 	.word	0x0800ba24

08002b68 <Get_Longitude>:
char* Get_Longitude(char* message, char* mode){
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b08d      	sub	sp, #52	@ 0x34
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
    /*Gets the longitude from a NMEA message.
    inputs: char* containing NMEA message, char* containing the mode of the message.
    outputs: char* containing the latitude in the form dddmm.mmmmE/W, where E/W is the hemisphere.*/

    char* result = NULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62fb      	str	r3, [r7, #44]	@ 0x2c

    int is_GLL = (strcmp("GLL", mode)==0);
 8002b76:	6839      	ldr	r1, [r7, #0]
 8002b78:	4881      	ldr	r0, [pc, #516]	@ (8002d80 <Get_Longitude+0x218>)
 8002b7a:	f7fd fb29 	bl	80001d0 <strcmp>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	623b      	str	r3, [r7, #32]
    int is_GGA = (strcmp("GGA", mode)==0);
 8002b8c:	6839      	ldr	r1, [r7, #0]
 8002b8e:	487d      	ldr	r0, [pc, #500]	@ (8002d84 <Get_Longitude+0x21c>)
 8002b90:	f7fd fb1e 	bl	80001d0 <strcmp>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	61fb      	str	r3, [r7, #28]
    int is_RMC = (strcmp("RMC", mode)==0);
 8002ba2:	6839      	ldr	r1, [r7, #0]
 8002ba4:	4878      	ldr	r0, [pc, #480]	@ (8002d88 <Get_Longitude+0x220>)
 8002ba6:	f7fd fb13 	bl	80001d0 <strcmp>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	61bb      	str	r3, [r7, #24]
    int is_GNS = (strcmp("GNS", mode)==0);
 8002bb8:	6839      	ldr	r1, [r7, #0]
 8002bba:	4874      	ldr	r0, [pc, #464]	@ (8002d8c <Get_Longitude+0x224>)
 8002bbc:	f7fd fb08 	bl	80001d0 <strcmp>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2301      	moveq	r3, #1
 8002bc8:	2300      	movne	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	617b      	str	r3, [r7, #20]

    if(is_GLL||is_GGA||is_RMC||is_GNS){
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <Get_Longitude+0x80>
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <Get_Longitude+0x80>
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d103      	bne.n	8002be8 <Get_Longitude+0x80>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 80b0 	beq.w	8002d48 <Get_Longitude+0x1e0>
        char* message_cpy= (char*)malloc((strlen(message)+1)*sizeof(char));
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7fd fb51 	bl	8000290 <strlen>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f005 fd76 	bl	80086e4 <malloc>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60fb      	str	r3, [r7, #12]
        int chop_count = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
        strcpy(message_cpy, message);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f006 fd6a 	bl	80096de <strcpy>
        message_cpy[strlen(message)]='\0';
 8002c0a:	68fc      	ldr	r4, [r7, #12]
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7fd fb3f 	bl	8000290 <strlen>
 8002c12:	4603      	mov	r3, r0
 8002c14:	4423      	add	r3, r4
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
        char* original_message_cpy = message_cpy;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	613b      	str	r3, [r7, #16]
        for(char* chunk = strsep(&message_cpy, ","); chunk!=NULL; chunk=strsep(&message_cpy,",")){
 8002c1e:	f107 030c 	add.w	r3, r7, #12
 8002c22:	495b      	ldr	r1, [pc, #364]	@ (8002d90 <Get_Longitude+0x228>)
 8002c24:	4618      	mov	r0, r3
 8002c26:	f006 fc90 	bl	800954a <strsep>
 8002c2a:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c2c:	e084      	b.n	8002d38 <Get_Longitude+0x1d0>


            if(is_GLL && (chop_count == 3)){
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d024      	beq.n	8002c7e <Get_Longitude+0x116>
 8002c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d121      	bne.n	8002c7e <Get_Longitude+0x116>
                result = (char*)malloc((strlen(chunk)+2)*sizeof(char));
 8002c3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c3c:	f7fd fb28 	bl	8000290 <strlen>
 8002c40:	4603      	mov	r3, r0
 8002c42:	3302      	adds	r3, #2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f005 fd4d 	bl	80086e4 <malloc>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                strcpy(result, chunk);
 8002c4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c52:	f006 fd44 	bl	80096de <strcpy>
                chunk = strsep(&message_cpy, ",");
 8002c56:	f107 030c 	add.w	r3, r7, #12
 8002c5a:	494d      	ldr	r1, [pc, #308]	@ (8002d90 <Get_Longitude+0x228>)
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f006 fc74 	bl	800954a <strsep>
 8002c62:	6278      	str	r0, [r7, #36]	@ 0x24
                strcat(result, chunk);
 8002c64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c68:	f006 fc37 	bl	80094da <strcat>
                result[strlen(result)] = '\0';
 8002c6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c6e:	f7fd fb0f 	bl	8000290 <strlen>
 8002c72:	4602      	mov	r2, r0
 8002c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c76:	4413      	add	r3, r2
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
                break;
 8002c7c:	e060      	b.n	8002d40 <Get_Longitude+0x1d8>
            }

            if((is_GGA || is_GNS) && (chop_count == 4)){
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <Get_Longitude+0x122>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d024      	beq.n	8002cd4 <Get_Longitude+0x16c>
 8002c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d121      	bne.n	8002cd4 <Get_Longitude+0x16c>
                result = (char*)malloc((strlen(chunk)+2)*sizeof(char));
 8002c90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c92:	f7fd fafd 	bl	8000290 <strlen>
 8002c96:	4603      	mov	r3, r0
 8002c98:	3302      	adds	r3, #2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f005 fd22 	bl	80086e4 <malloc>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                strcpy(result, chunk);
 8002ca4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ca6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ca8:	f006 fd19 	bl	80096de <strcpy>
                chunk = strsep(&message_cpy, ",");
 8002cac:	f107 030c 	add.w	r3, r7, #12
 8002cb0:	4937      	ldr	r1, [pc, #220]	@ (8002d90 <Get_Longitude+0x228>)
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f006 fc49 	bl	800954a <strsep>
 8002cb8:	6278      	str	r0, [r7, #36]	@ 0x24
                strcat(result, chunk);
 8002cba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002cbe:	f006 fc0c 	bl	80094da <strcat>
                result[strlen(result)] = '\0';
 8002cc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002cc4:	f7fd fae4 	bl	8000290 <strlen>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ccc:	4413      	add	r3, r2
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
                break;
 8002cd2:	e035      	b.n	8002d40 <Get_Longitude+0x1d8>
            }

            if(is_RMC && (chop_count == 5)){
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d024      	beq.n	8002d24 <Get_Longitude+0x1bc>
 8002cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d121      	bne.n	8002d24 <Get_Longitude+0x1bc>
                result = (char*)malloc((strlen(chunk)+2)*sizeof(char));
 8002ce0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ce2:	f7fd fad5 	bl	8000290 <strlen>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	3302      	adds	r3, #2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f005 fcfa 	bl	80086e4 <malloc>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                strcpy(result, chunk);
 8002cf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cf6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002cf8:	f006 fcf1 	bl	80096de <strcpy>
                chunk = strsep(&message_cpy, ",");
 8002cfc:	f107 030c 	add.w	r3, r7, #12
 8002d00:	4923      	ldr	r1, [pc, #140]	@ (8002d90 <Get_Longitude+0x228>)
 8002d02:	4618      	mov	r0, r3
 8002d04:	f006 fc21 	bl	800954a <strsep>
 8002d08:	6278      	str	r0, [r7, #36]	@ 0x24
                strcat(result, chunk);
 8002d0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d0e:	f006 fbe4 	bl	80094da <strcat>
                result[strlen(result)] = '\0';
 8002d12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d14:	f7fd fabc 	bl	8000290 <strlen>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1c:	4413      	add	r3, r2
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
                break;
 8002d22:	e00d      	b.n	8002d40 <Get_Longitude+0x1d8>
            }
            chop_count++;
 8002d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d26:	3301      	adds	r3, #1
 8002d28:	62bb      	str	r3, [r7, #40]	@ 0x28
        for(char* chunk = strsep(&message_cpy, ","); chunk!=NULL; chunk=strsep(&message_cpy,",")){
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	4918      	ldr	r1, [pc, #96]	@ (8002d90 <Get_Longitude+0x228>)
 8002d30:	4618      	mov	r0, r3
 8002d32:	f006 fc0a 	bl	800954a <strsep>
 8002d36:	6278      	str	r0, [r7, #36]	@ 0x24
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f47f af77 	bne.w	8002c2e <Get_Longitude+0xc6>
        }

        free(original_message_cpy);
 8002d40:	6938      	ldr	r0, [r7, #16]
 8002d42:	f005 fcd7 	bl	80086f4 <free>
    if(is_GLL||is_GGA||is_RMC||is_GNS){
 8002d46:	e016      	b.n	8002d76 <Get_Longitude+0x20e>
    }

    else{
        result = malloc(3*sizeof(char));
 8002d48:	2003      	movs	r0, #3
 8002d4a:	f005 fccb 	bl	80086e4 <malloc>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if(result==NULL){exit(-1);}
 8002d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <Get_Longitude+0x1f8>
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	f005 fcb0 	bl	80086c0 <exit>
        result[0] = 'N';
 8002d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d62:	224e      	movs	r2, #78	@ 0x4e
 8002d64:	701a      	strb	r2, [r3, #0]
        result[1] = 'A';
 8002d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d68:	3301      	adds	r3, #1
 8002d6a:	2241      	movs	r2, #65	@ 0x41
 8002d6c:	701a      	strb	r2, [r3, #0]
        result[2] = '\0';
 8002d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d70:	3302      	adds	r3, #2
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
    }

    return result;
 8002d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3734      	adds	r7, #52	@ 0x34
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd90      	pop	{r4, r7, pc}
 8002d80:	0800ba14 	.word	0x0800ba14
 8002d84:	0800ba10 	.word	0x0800ba10
 8002d88:	0800ba1c 	.word	0x0800ba1c
 8002d8c:	0800ba20 	.word	0x0800ba20
 8002d90:	0800ba24 	.word	0x0800ba24

08002d94 <Get_Altitude>:
char* Get_Altitude(char* message, char* mode){
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b08b      	sub	sp, #44	@ 0x2c
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
    /*Gets the MSL altitude [m] from a NMEA message.
    inputs: char* containing NMEA message, char* containing the mode of the message.
    outputs: char* containing the MSL altitude in meters.*/

    char* result = NULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24

    int is_GGA = (strcmp("GGA", mode)==0);
 8002da2:	6839      	ldr	r1, [r7, #0]
 8002da4:	4845      	ldr	r0, [pc, #276]	@ (8002ebc <Get_Altitude+0x128>)
 8002da6:	f7fd fa13 	bl	80001d0 <strcmp>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	61bb      	str	r3, [r7, #24]
    int is_GNS = (strcmp("GNS", mode)==0);
 8002db8:	6839      	ldr	r1, [r7, #0]
 8002dba:	4841      	ldr	r0, [pc, #260]	@ (8002ec0 <Get_Altitude+0x12c>)
 8002dbc:	f7fd fa08 	bl	80001d0 <strcmp>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	617b      	str	r3, [r7, #20]

    if(is_GGA || is_GNS){
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <Get_Altitude+0x46>
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d053      	beq.n	8002e82 <Get_Altitude+0xee>

        char* message_cpy = (char*)malloc((strlen(message)+1)*sizeof(char));
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fd fa58 	bl	8000290 <strlen>
 8002de0:	4603      	mov	r3, r0
 8002de2:	3301      	adds	r3, #1
 8002de4:	4618      	mov	r0, r3
 8002de6:	f005 fc7d 	bl	80086e4 <malloc>
 8002dea:	4603      	mov	r3, r0
 8002dec:	60fb      	str	r3, [r7, #12]
        int chop_count = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	623b      	str	r3, [r7, #32]
        strcpy(message_cpy, message);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f006 fc71 	bl	80096de <strcpy>
        message_cpy[strlen(message)]='\0';
 8002dfc:	68fc      	ldr	r4, [r7, #12]
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fd fa46 	bl	8000290 <strlen>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4423      	add	r3, r4
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
        char* original_message_cpy = message_cpy;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	613b      	str	r3, [r7, #16]

        for(char* chunk = strsep(&message_cpy, ","); chunk!=NULL; chunk=strsep(&message_cpy,",")){
 8002e10:	f107 030c 	add.w	r3, r7, #12
 8002e14:	492b      	ldr	r1, [pc, #172]	@ (8002ec4 <Get_Altitude+0x130>)
 8002e16:	4618      	mov	r0, r3
 8002e18:	f006 fb97 	bl	800954a <strsep>
 8002e1c:	61f8      	str	r0, [r7, #28]
 8002e1e:	e029      	b.n	8002e74 <Get_Altitude+0xe0>
            if((is_GGA || is_GNS) && (chop_count == 9)){
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <Get_Altitude+0x98>
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d019      	beq.n	8002e60 <Get_Altitude+0xcc>
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	2b09      	cmp	r3, #9
 8002e30:	d116      	bne.n	8002e60 <Get_Altitude+0xcc>
            result = (char*)malloc((strlen(chunk)+1)*sizeof(char));
 8002e32:	69f8      	ldr	r0, [r7, #28]
 8002e34:	f7fd fa2c 	bl	8000290 <strlen>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f005 fc51 	bl	80086e4 <malloc>
 8002e42:	4603      	mov	r3, r0
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24
            strcpy(result, chunk);
 8002e46:	69f9      	ldr	r1, [r7, #28]
 8002e48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e4a:	f006 fc48 	bl	80096de <strcpy>
            result[strlen(chunk)] = '\0';
 8002e4e:	69f8      	ldr	r0, [r7, #28]
 8002e50:	f7fd fa1e 	bl	8000290 <strlen>
 8002e54:	4602      	mov	r2, r0
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	4413      	add	r3, r2
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
            break;
 8002e5e:	e00c      	b.n	8002e7a <Get_Altitude+0xe6>
            }
            chop_count++;
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	3301      	adds	r3, #1
 8002e64:	623b      	str	r3, [r7, #32]
        for(char* chunk = strsep(&message_cpy, ","); chunk!=NULL; chunk=strsep(&message_cpy,",")){
 8002e66:	f107 030c 	add.w	r3, r7, #12
 8002e6a:	4916      	ldr	r1, [pc, #88]	@ (8002ec4 <Get_Altitude+0x130>)
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f006 fb6c 	bl	800954a <strsep>
 8002e72:	61f8      	str	r0, [r7, #28]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1d2      	bne.n	8002e20 <Get_Altitude+0x8c>
        }

        free(original_message_cpy);
 8002e7a:	6938      	ldr	r0, [r7, #16]
 8002e7c:	f005 fc3a 	bl	80086f4 <free>
    if(is_GGA || is_GNS){
 8002e80:	e016      	b.n	8002eb0 <Get_Altitude+0x11c>

    }

    else{
        result = malloc(3*sizeof(char));
 8002e82:	2003      	movs	r0, #3
 8002e84:	f005 fc2e 	bl	80086e4 <malloc>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        if(result==NULL){exit(-1);}
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d103      	bne.n	8002e9a <Get_Altitude+0x106>
 8002e92:	f04f 30ff 	mov.w	r0, #4294967295
 8002e96:	f005 fc13 	bl	80086c0 <exit>
        result[0] = 'N';
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	224e      	movs	r2, #78	@ 0x4e
 8002e9e:	701a      	strb	r2, [r3, #0]
        result[1] = 'A';
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	2241      	movs	r2, #65	@ 0x41
 8002ea6:	701a      	strb	r2, [r3, #0]
        result[2] = '\0';
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	3302      	adds	r3, #2
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
    }

    return result;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	372c      	adds	r7, #44	@ 0x2c
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd90      	pop	{r4, r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	0800ba10 	.word	0x0800ba10
 8002ec0:	0800ba20 	.word	0x0800ba20
 8002ec4:	0800ba24 	.word	0x0800ba24

08002ec8 <Get_UTCDate>:
char* Get_UTCDate(char* message, char* mode) {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	@ 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
    /* Gets the Date in UTC from the NMEA messages.
     * Inputs: char* containing NMEA message, char* containing the mode of the message.
     * Outputs: char* containing the date. In ZDA: ddmmyyyy, in RMC: ddmmyy. */

    char* result = NULL;  // Initialize to NULL
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_ZDA = (strcmp("ZDA", mode) == 0);
 8002ed6:	6839      	ldr	r1, [r7, #0]
 8002ed8:	485a      	ldr	r0, [pc, #360]	@ (8003044 <Get_UTCDate+0x17c>)
 8002eda:	f7fd f979 	bl	80001d0 <strcmp>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	61fb      	str	r3, [r7, #28]
    int is_RMC = (strcmp("RMC", mode) == 0);
 8002eec:	6839      	ldr	r1, [r7, #0]
 8002eee:	4856      	ldr	r0, [pc, #344]	@ (8003048 <Get_UTCDate+0x180>)
 8002ef0:	f7fd f96e 	bl	80001d0 <strcmp>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	61bb      	str	r3, [r7, #24]

    if (is_ZDA || is_RMC) {
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d102      	bne.n	8002f0e <Get_UTCDate+0x46>
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d07e      	beq.n	800300c <Get_UTCDate+0x144>
        // Duplicate message to avoid modifying the original
        char* message_cpy = strdup(message);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f006 fb00 	bl	8009514 <strdup>
 8002f14:	4603      	mov	r3, r0
 8002f16:	60fb      	str	r3, [r7, #12]
        if (message_cpy == NULL) {
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d103      	bne.n	8002f26 <Get_UTCDate+0x5e>
            exit(-1);  // Handle memory allocation failure
 8002f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f22:	f005 fbcd 	bl	80086c0 <exit>
        }

        // Save the original pointer for later use in free()
        char* original_message_cpy = message_cpy;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	617b      	str	r3, [r7, #20]

        int chop_count = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	623b      	str	r3, [r7, #32]
        char* chunk = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]

        // Tokenize the message by commas
        while ((chunk = strsep(&message_cpy, ",")) != NULL) {
 8002f32:	e05d      	b.n	8002ff0 <Get_UTCDate+0x128>
            chop_count++;
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	3301      	adds	r3, #1
 8002f38:	623b      	str	r3, [r7, #32]

            // Handling for ZDA mode (chop_count == 3)
            if (is_ZDA && (chop_count == 3)) {
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d030      	beq.n	8002fa2 <Get_UTCDate+0xda>
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d12d      	bne.n	8002fa2 <Get_UTCDate+0xda>
                result = malloc(9 * sizeof(char));  // Allocate space for ddmmyyyy
 8002f46:	2009      	movs	r0, #9
 8002f48:	f005 fbcc 	bl	80086e4 <malloc>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
                if (result == NULL) {
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <Get_UTCDate+0x9c>
                    free(original_message_cpy);  // Ensure we free memory before exit
 8002f56:	6978      	ldr	r0, [r7, #20]
 8002f58:	f005 fbcc 	bl	80086f4 <free>
                    exit(-1);
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f60:	f005 fbae 	bl	80086c0 <exit>
                }
                strcpy(result, chunk);  // Copy the day
 8002f64:	6939      	ldr	r1, [r7, #16]
 8002f66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f68:	f006 fbb9 	bl	80096de <strcpy>
                chunk = strsep(&message_cpy, ",");  // Get month
 8002f6c:	f107 030c 	add.w	r3, r7, #12
 8002f70:	4936      	ldr	r1, [pc, #216]	@ (800304c <Get_UTCDate+0x184>)
 8002f72:	4618      	mov	r0, r3
 8002f74:	f006 fae9 	bl	800954a <strsep>
 8002f78:	6138      	str	r0, [r7, #16]
                strcat(result, chunk);
 8002f7a:	6939      	ldr	r1, [r7, #16]
 8002f7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f7e:	f006 faac 	bl	80094da <strcat>
                chunk = strsep(&message_cpy, ",");  // Get year
 8002f82:	f107 030c 	add.w	r3, r7, #12
 8002f86:	4931      	ldr	r1, [pc, #196]	@ (800304c <Get_UTCDate+0x184>)
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f006 fade 	bl	800954a <strsep>
 8002f8e:	6138      	str	r0, [r7, #16]
                strcat(result, chunk);
 8002f90:	6939      	ldr	r1, [r7, #16]
 8002f92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f94:	f006 faa1 	bl	80094da <strcat>
                result[8] = '\0';
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
                break;
 8002fa0:	e030      	b.n	8003004 <Get_UTCDate+0x13c>
            }

            // Handling for RMC mode (chop_count == 10)
            if (is_RMC && (chop_count == 10)) {
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d023      	beq.n	8002ff0 <Get_UTCDate+0x128>
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	2b0a      	cmp	r3, #10
 8002fac:	d120      	bne.n	8002ff0 <Get_UTCDate+0x128>
                result = malloc((strlen(chunk) + 1) * sizeof(char));  // +1 for null terminator
 8002fae:	6938      	ldr	r0, [r7, #16]
 8002fb0:	f7fd f96e 	bl	8000290 <strlen>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f005 fb93 	bl	80086e4 <malloc>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
                if (result == NULL) {
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <Get_UTCDate+0x10e>
                    free(original_message_cpy);  // Ensure we free memory before exit
 8002fc8:	6978      	ldr	r0, [r7, #20]
 8002fca:	f005 fb93 	bl	80086f4 <free>
                    exit(-1);
 8002fce:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd2:	f005 fb75 	bl	80086c0 <exit>
                }
                strcpy(result, chunk);  // Copy the date string
 8002fd6:	6939      	ldr	r1, [r7, #16]
 8002fd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002fda:	f006 fb80 	bl	80096de <strcpy>
                result[strlen(chunk)]= '\0';
 8002fde:	6938      	ldr	r0, [r7, #16]
 8002fe0:	f7fd f956 	bl	8000290 <strlen>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	4413      	add	r3, r2
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
                break;
 8002fee:	e009      	b.n	8003004 <Get_UTCDate+0x13c>
        while ((chunk = strsep(&message_cpy, ",")) != NULL) {
 8002ff0:	f107 030c 	add.w	r3, r7, #12
 8002ff4:	4915      	ldr	r1, [pc, #84]	@ (800304c <Get_UTCDate+0x184>)
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f006 faa7 	bl	800954a <strsep>
 8002ffc:	6138      	str	r0, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d197      	bne.n	8002f34 <Get_UTCDate+0x6c>
            }
        }

        // Free the original message copy after processing
        free(original_message_cpy);
 8003004:	6978      	ldr	r0, [r7, #20]
 8003006:	f005 fb75 	bl	80086f4 <free>
    if (is_ZDA || is_RMC) {
 800300a:	e016      	b.n	800303a <Get_UTCDate+0x172>
    }

    else{
        result = malloc(3*sizeof(char));
 800300c:	2003      	movs	r0, #3
 800300e:	f005 fb69 	bl	80086e4 <malloc>
 8003012:	4603      	mov	r3, r0
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
        if(result==NULL){exit(-1);}
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	2b00      	cmp	r3, #0
 800301a:	d103      	bne.n	8003024 <Get_UTCDate+0x15c>
 800301c:	f04f 30ff 	mov.w	r0, #4294967295
 8003020:	f005 fb4e 	bl	80086c0 <exit>
        result[0] = 'N';
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	224e      	movs	r2, #78	@ 0x4e
 8003028:	701a      	strb	r2, [r3, #0]
        result[1] = 'A';
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	3301      	adds	r3, #1
 800302e:	2241      	movs	r2, #65	@ 0x41
 8003030:	701a      	strb	r2, [r3, #0]
        result[2] = '\0';
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	3302      	adds	r3, #2
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
    }
    return result;  // Return the date result
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800303c:	4618      	mov	r0, r3
 800303e:	3728      	adds	r7, #40	@ 0x28
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	0800ba18 	.word	0x0800ba18
 8003048:	0800ba1c 	.word	0x0800ba1c
 800304c:	0800ba24 	.word	0x0800ba24

08003050 <is_NMEA>:

int is_NMEA(char* message){
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b092      	sub	sp, #72	@ 0x48
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
    /*Checks whether a message is NMEA (without verifying the checksum)*/
    int is_nmea = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	647b      	str	r3, [r7, #68]	@ 0x44

    if((message[0] == '$')&&(strchr(message, '*')!=NULL) && (strlen(message)>=6)){
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b24      	cmp	r3, #36	@ 0x24
 8003062:	d140      	bne.n	80030e6 <is_NMEA+0x96>
 8003064:	212a      	movs	r1, #42	@ 0x2a
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f006 fa46 	bl	80094f8 <strchr>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d039      	beq.n	80030e6 <is_NMEA+0x96>
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fd f90c 	bl	8000290 <strlen>
 8003078:	4603      	mov	r3, r0
 800307a:	2b05      	cmp	r3, #5
 800307c:	d933      	bls.n	80030e6 <is_NMEA+0x96>
        char* talker_id = Get_Talker_ID(message);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff fb4c 	bl	800271c <Get_Talker_ID>
 8003084:	6438      	str	r0, [r7, #64]	@ 0x40
        char* mode = Get_Mode(message);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff fb63 	bl	8002752 <Get_Mode>
 800308c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        char modes[] = "ZDA RMC GGA VTG GNS GLL GSV GSA";
 800308e:	4b18      	ldr	r3, [pc, #96]	@ (80030f0 <is_NMEA+0xa0>)
 8003090:	f107 0408 	add.w	r4, r7, #8
 8003094:	461d      	mov	r5, r3
 8003096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800309a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800309e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        char talker_ids[] = "GP GN GA GB BD GL";
 80030a2:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <is_NMEA+0xa4>)
 80030a4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80030a8:	461d      	mov	r5, r3
 80030aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030ae:	682b      	ldr	r3, [r5, #0]
 80030b0:	8023      	strh	r3, [r4, #0]

        if((strstr(modes, mode)!=NULL) && (strstr(talker_ids, talker_id)!=NULL)){
 80030b2:	f107 0308 	add.w	r3, r7, #8
 80030b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030b8:	4618      	mov	r0, r3
 80030ba:	f006 fa73 	bl	80095a4 <strstr>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <is_NMEA+0x8a>
 80030c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030ca:	4618      	mov	r0, r3
 80030cc:	f006 fa6a 	bl	80095a4 <strstr>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <is_NMEA+0x8a>
            is_nmea = 1;
 80030d6:	2301      	movs	r3, #1
 80030d8:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        free(talker_id);
 80030da:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80030dc:	f005 fb0a 	bl	80086f4 <free>
        free(mode);
 80030e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80030e2:	f005 fb07 	bl	80086f4 <free>
    }

    return is_nmea;
 80030e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3748      	adds	r7, #72	@ 0x48
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bdb0      	pop	{r4, r5, r7, pc}
 80030f0:	0800ba28 	.word	0x0800ba28
 80030f4:	0800ba48 	.word	0x0800ba48

080030f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fe:	4b0f      	ldr	r3, [pc, #60]	@ (800313c <HAL_MspInit+0x44>)
 8003100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003102:	4a0e      	ldr	r2, [pc, #56]	@ (800313c <HAL_MspInit+0x44>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6613      	str	r3, [r2, #96]	@ 0x60
 800310a:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <HAL_MspInit+0x44>)
 800310c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	4b09      	ldr	r3, [pc, #36]	@ (800313c <HAL_MspInit+0x44>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311a:	4a08      	ldr	r2, [pc, #32]	@ (800313c <HAL_MspInit+0x44>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003120:	6593      	str	r3, [r2, #88]	@ 0x58
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_MspInit+0x44>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000

08003140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	@ 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a17      	ldr	r2, [pc, #92]	@ (80031bc <HAL_SPI_MspInit+0x7c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d128      	bne.n	80031b4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003162:	4b17      	ldr	r3, [pc, #92]	@ (80031c0 <HAL_SPI_MspInit+0x80>)
 8003164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003166:	4a16      	ldr	r2, [pc, #88]	@ (80031c0 <HAL_SPI_MspInit+0x80>)
 8003168:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800316c:	6613      	str	r3, [r2, #96]	@ 0x60
 800316e:	4b14      	ldr	r3, [pc, #80]	@ (80031c0 <HAL_SPI_MspInit+0x80>)
 8003170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003172:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317a:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <HAL_SPI_MspInit+0x80>)
 800317c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317e:	4a10      	ldr	r2, [pc, #64]	@ (80031c0 <HAL_SPI_MspInit+0x80>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003186:	4b0e      	ldr	r3, [pc, #56]	@ (80031c0 <HAL_SPI_MspInit+0x80>)
 8003188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003192:	23e0      	movs	r3, #224	@ 0xe0
 8003194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319e:	2303      	movs	r3, #3
 80031a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031a2:	2305      	movs	r3, #5
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a6:	f107 0314 	add.w	r3, r7, #20
 80031aa:	4619      	mov	r1, r3
 80031ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031b0:	f000 fed8 	bl	8003f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80031b4:	bf00      	nop
 80031b6:	3728      	adds	r7, #40	@ 0x28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40013000 	.word	0x40013000
 80031c0:	40021000 	.word	0x40021000

080031c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b0b0      	sub	sp, #192	@ 0xc0
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031e0:	2288      	movs	r2, #136	@ 0x88
 80031e2:	2100      	movs	r1, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f006 f970 	bl	80094ca <memset>
  if(huart->Instance==UART4)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a99      	ldr	r2, [pc, #612]	@ (8003454 <HAL_UART_MspInit+0x290>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d16e      	bne.n	80032d2 <HAL_UART_MspInit+0x10e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80031f4:	2308      	movs	r3, #8
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80031f8:	2300      	movs	r3, #0
 80031fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003200:	4618      	mov	r0, r3
 8003202:	f001 fed5 	bl	8004fb0 <HAL_RCCEx_PeriphCLKConfig>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800320c:	f7ff fa5a 	bl	80026c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003210:	4b91      	ldr	r3, [pc, #580]	@ (8003458 <HAL_UART_MspInit+0x294>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003214:	4a90      	ldr	r2, [pc, #576]	@ (8003458 <HAL_UART_MspInit+0x294>)
 8003216:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800321a:	6593      	str	r3, [r2, #88]	@ 0x58
 800321c:	4b8e      	ldr	r3, [pc, #568]	@ (8003458 <HAL_UART_MspInit+0x294>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003220:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003224:	623b      	str	r3, [r7, #32]
 8003226:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003228:	4b8b      	ldr	r3, [pc, #556]	@ (8003458 <HAL_UART_MspInit+0x294>)
 800322a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322c:	4a8a      	ldr	r2, [pc, #552]	@ (8003458 <HAL_UART_MspInit+0x294>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003234:	4b88      	ldr	r3, [pc, #544]	@ (8003458 <HAL_UART_MspInit+0x294>)
 8003236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003240:	2303      	movs	r3, #3
 8003242:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003246:	2302      	movs	r3, #2
 8003248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003252:	2303      	movs	r3, #3
 8003254:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003258:	2308      	movs	r3, #8
 800325a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003262:	4619      	mov	r1, r3
 8003264:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003268:	f000 fe7c 	bl	8003f64 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 800326c:	4b7b      	ldr	r3, [pc, #492]	@ (800345c <HAL_UART_MspInit+0x298>)
 800326e:	4a7c      	ldr	r2, [pc, #496]	@ (8003460 <HAL_UART_MspInit+0x29c>)
 8003270:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8003272:	4b7a      	ldr	r3, [pc, #488]	@ (800345c <HAL_UART_MspInit+0x298>)
 8003274:	2202      	movs	r2, #2
 8003276:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003278:	4b78      	ldr	r3, [pc, #480]	@ (800345c <HAL_UART_MspInit+0x298>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800327e:	4b77      	ldr	r3, [pc, #476]	@ (800345c <HAL_UART_MspInit+0x298>)
 8003280:	2200      	movs	r2, #0
 8003282:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003284:	4b75      	ldr	r3, [pc, #468]	@ (800345c <HAL_UART_MspInit+0x298>)
 8003286:	2280      	movs	r2, #128	@ 0x80
 8003288:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800328a:	4b74      	ldr	r3, [pc, #464]	@ (800345c <HAL_UART_MspInit+0x298>)
 800328c:	2200      	movs	r2, #0
 800328e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003290:	4b72      	ldr	r3, [pc, #456]	@ (800345c <HAL_UART_MspInit+0x298>)
 8003292:	2200      	movs	r2, #0
 8003294:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003296:	4b71      	ldr	r3, [pc, #452]	@ (800345c <HAL_UART_MspInit+0x298>)
 8003298:	2200      	movs	r2, #0
 800329a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800329c:	4b6f      	ldr	r3, [pc, #444]	@ (800345c <HAL_UART_MspInit+0x298>)
 800329e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80032a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80032a4:	486d      	ldr	r0, [pc, #436]	@ (800345c <HAL_UART_MspInit+0x298>)
 80032a6:	f000 fbe7 	bl	8003a78 <HAL_DMA_Init>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80032b0:	f7ff fa08 	bl	80026c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a69      	ldr	r2, [pc, #420]	@ (800345c <HAL_UART_MspInit+0x298>)
 80032b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80032ba:	4a68      	ldr	r2, [pc, #416]	@ (800345c <HAL_UART_MspInit+0x298>)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2100      	movs	r1, #0
 80032c4:	2034      	movs	r0, #52	@ 0x34
 80032c6:	f000 fba0 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80032ca:	2034      	movs	r0, #52	@ 0x34
 80032cc:	f000 fbb9 	bl	8003a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032d0:	e0bc      	b.n	800344c <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a63      	ldr	r2, [pc, #396]	@ (8003464 <HAL_UART_MspInit+0x2a0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d145      	bne.n	8003368 <HAL_UART_MspInit+0x1a4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032dc:	2301      	movs	r3, #1
 80032de:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80032e0:	2300      	movs	r3, #0
 80032e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032e8:	4618      	mov	r0, r3
 80032ea:	f001 fe61 	bl	8004fb0 <HAL_RCCEx_PeriphCLKConfig>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_UART_MspInit+0x134>
      Error_Handler();
 80032f4:	f7ff f9e6 	bl	80026c4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80032f8:	4b57      	ldr	r3, [pc, #348]	@ (8003458 <HAL_UART_MspInit+0x294>)
 80032fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fc:	4a56      	ldr	r2, [pc, #344]	@ (8003458 <HAL_UART_MspInit+0x294>)
 80032fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003302:	6613      	str	r3, [r2, #96]	@ 0x60
 8003304:	4b54      	ldr	r3, [pc, #336]	@ (8003458 <HAL_UART_MspInit+0x294>)
 8003306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003310:	4b51      	ldr	r3, [pc, #324]	@ (8003458 <HAL_UART_MspInit+0x294>)
 8003312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003314:	4a50      	ldr	r2, [pc, #320]	@ (8003458 <HAL_UART_MspInit+0x294>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800331c:	4b4e      	ldr	r3, [pc, #312]	@ (8003458 <HAL_UART_MspInit+0x294>)
 800331e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003328:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800332c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2302      	movs	r3, #2
 8003332:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333c:	2303      	movs	r3, #3
 800333e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003342:	2307      	movs	r3, #7
 8003344:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003348:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800334c:	4619      	mov	r1, r3
 800334e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003352:	f000 fe07 	bl	8003f64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003356:	2200      	movs	r2, #0
 8003358:	2100      	movs	r1, #0
 800335a:	2025      	movs	r0, #37	@ 0x25
 800335c:	f000 fb55 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003360:	2025      	movs	r0, #37	@ 0x25
 8003362:	f000 fb6e 	bl	8003a42 <HAL_NVIC_EnableIRQ>
}
 8003366:	e071      	b.n	800344c <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a3e      	ldr	r2, [pc, #248]	@ (8003468 <HAL_UART_MspInit+0x2a4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d16c      	bne.n	800344c <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003372:	2302      	movs	r3, #2
 8003374:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003376:	2300      	movs	r3, #0
 8003378:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800337a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800337e:	4618      	mov	r0, r3
 8003380:	f001 fe16 	bl	8004fb0 <HAL_RCCEx_PeriphCLKConfig>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 800338a:	f7ff f99b 	bl	80026c4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800338e:	4b32      	ldr	r3, [pc, #200]	@ (8003458 <HAL_UART_MspInit+0x294>)
 8003390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003392:	4a31      	ldr	r2, [pc, #196]	@ (8003458 <HAL_UART_MspInit+0x294>)
 8003394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003398:	6593      	str	r3, [r2, #88]	@ 0x58
 800339a:	4b2f      	ldr	r3, [pc, #188]	@ (8003458 <HAL_UART_MspInit+0x294>)
 800339c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003458 <HAL_UART_MspInit+0x294>)
 80033a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003458 <HAL_UART_MspInit+0x294>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033b2:	4b29      	ldr	r3, [pc, #164]	@ (8003458 <HAL_UART_MspInit+0x294>)
 80033b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033be:	230c      	movs	r3, #12
 80033c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d0:	2303      	movs	r3, #3
 80033d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033d6:	2307      	movs	r3, #7
 80033d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033dc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80033e0:	4619      	mov	r1, r3
 80033e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033e6:	f000 fdbd 	bl	8003f64 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80033ea:	4b20      	ldr	r3, [pc, #128]	@ (800346c <HAL_UART_MspInit+0x2a8>)
 80033ec:	4a20      	ldr	r2, [pc, #128]	@ (8003470 <HAL_UART_MspInit+0x2ac>)
 80033ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80033f0:	4b1e      	ldr	r3, [pc, #120]	@ (800346c <HAL_UART_MspInit+0x2a8>)
 80033f2:	2202      	movs	r2, #2
 80033f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033f6:	4b1d      	ldr	r3, [pc, #116]	@ (800346c <HAL_UART_MspInit+0x2a8>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033fc:	4b1b      	ldr	r3, [pc, #108]	@ (800346c <HAL_UART_MspInit+0x2a8>)
 80033fe:	2200      	movs	r2, #0
 8003400:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003402:	4b1a      	ldr	r3, [pc, #104]	@ (800346c <HAL_UART_MspInit+0x2a8>)
 8003404:	2280      	movs	r2, #128	@ 0x80
 8003406:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003408:	4b18      	ldr	r3, [pc, #96]	@ (800346c <HAL_UART_MspInit+0x2a8>)
 800340a:	2200      	movs	r2, #0
 800340c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800340e:	4b17      	ldr	r3, [pc, #92]	@ (800346c <HAL_UART_MspInit+0x2a8>)
 8003410:	2200      	movs	r2, #0
 8003412:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003414:	4b15      	ldr	r3, [pc, #84]	@ (800346c <HAL_UART_MspInit+0x2a8>)
 8003416:	2200      	movs	r2, #0
 8003418:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800341a:	4b14      	ldr	r3, [pc, #80]	@ (800346c <HAL_UART_MspInit+0x2a8>)
 800341c:	2200      	movs	r2, #0
 800341e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003420:	4812      	ldr	r0, [pc, #72]	@ (800346c <HAL_UART_MspInit+0x2a8>)
 8003422:	f000 fb29 	bl	8003a78 <HAL_DMA_Init>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800342c:	f7ff f94a 	bl	80026c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a0e      	ldr	r2, [pc, #56]	@ (800346c <HAL_UART_MspInit+0x2a8>)
 8003434:	675a      	str	r2, [r3, #116]	@ 0x74
 8003436:	4a0d      	ldr	r2, [pc, #52]	@ (800346c <HAL_UART_MspInit+0x2a8>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800343c:	2200      	movs	r2, #0
 800343e:	2100      	movs	r1, #0
 8003440:	2026      	movs	r0, #38	@ 0x26
 8003442:	f000 fae2 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003446:	2026      	movs	r0, #38	@ 0x26
 8003448:	f000 fafb 	bl	8003a42 <HAL_NVIC_EnableIRQ>
}
 800344c:	bf00      	nop
 800344e:	37c0      	adds	r7, #192	@ 0xc0
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40004c00 	.word	0x40004c00
 8003458:	40021000 	.word	0x40021000
 800345c:	200004d8 	.word	0x200004d8
 8003460:	40020458 	.word	0x40020458
 8003464:	40013800 	.word	0x40013800
 8003468:	40004400 	.word	0x40004400
 800346c:	20000520 	.word	0x20000520
 8003470:	4002006c 	.word	0x4002006c

08003474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003478:	bf00      	nop
 800347a:	e7fd      	b.n	8003478 <NMI_Handler+0x4>

0800347c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003480:	bf00      	nop
 8003482:	e7fd      	b.n	8003480 <HardFault_Handler+0x4>

08003484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003488:	bf00      	nop
 800348a:	e7fd      	b.n	8003488 <MemManage_Handler+0x4>

0800348c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003490:	bf00      	nop
 8003492:	e7fd      	b.n	8003490 <BusFault_Handler+0x4>

08003494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003498:	bf00      	nop
 800349a:	e7fd      	b.n	8003498 <UsageFault_Handler+0x4>

0800349c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034a0:	bf00      	nop
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034aa:	b480      	push	{r7}
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(Timer1 > 0)
 80034cc:	4b0b      	ldr	r3, [pc, #44]	@ (80034fc <SysTick_Handler+0x34>)
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <SysTick_Handler+0x18>
    Timer1--;
 80034d4:	4b09      	ldr	r3, [pc, #36]	@ (80034fc <SysTick_Handler+0x34>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <SysTick_Handler+0x34>)
 80034de:	801a      	strh	r2, [r3, #0]
  if(Timer2 > 0)
 80034e0:	4b07      	ldr	r3, [pc, #28]	@ (8003500 <SysTick_Handler+0x38>)
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <SysTick_Handler+0x2c>
    Timer2--;
 80034e8:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <SysTick_Handler+0x38>)
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	4b03      	ldr	r3, [pc, #12]	@ (8003500 <SysTick_Handler+0x38>)
 80034f2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034f4:	f000 f98e 	bl	8003814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034f8:	bf00      	nop
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20000afc 	.word	0x20000afc
 8003500:	20000afe 	.word	0x20000afe

08003504 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003508:	4802      	ldr	r0, [pc, #8]	@ (8003514 <DMA1_Channel6_IRQHandler+0x10>)
 800350a:	f000 fc4c 	bl	8003da6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000520 	.word	0x20000520

08003518 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800351c:	4802      	ldr	r0, [pc, #8]	@ (8003528 <USART1_IRQHandler+0x10>)
 800351e:	f003 f897 	bl	8006650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200003c8 	.word	0x200003c8

0800352c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003530:	4802      	ldr	r0, [pc, #8]	@ (800353c <USART2_IRQHandler+0x10>)
 8003532:	f003 f88d 	bl	8006650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000450 	.word	0x20000450

08003540 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003544:	4802      	ldr	r0, [pc, #8]	@ (8003550 <UART4_IRQHandler+0x10>)
 8003546:	f003 f883 	bl	8006650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000340 	.word	0x20000340

08003554 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003558:	4802      	ldr	r0, [pc, #8]	@ (8003564 <DMA2_Channel5_IRQHandler+0x10>)
 800355a:	f000 fc24 	bl	8003da6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	200004d8 	.word	0x200004d8

08003568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return 1;
 800356c:	2301      	movs	r3, #1
}
 800356e:	4618      	mov	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <_kill>:

int _kill(int pid, int sig)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003582:	f006 f87f 	bl	8009684 <__errno>
 8003586:	4603      	mov	r3, r0
 8003588:	2216      	movs	r2, #22
 800358a:	601a      	str	r2, [r3, #0]
  return -1;
 800358c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <_exit>:

void _exit (int status)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035a0:	f04f 31ff 	mov.w	r1, #4294967295
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff ffe7 	bl	8003578 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035aa:	bf00      	nop
 80035ac:	e7fd      	b.n	80035aa <_exit+0x12>

080035ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	e00a      	b.n	80035d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035c0:	f3af 8000 	nop.w
 80035c4:	4601      	mov	r1, r0
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	60ba      	str	r2, [r7, #8]
 80035cc:	b2ca      	uxtb	r2, r1
 80035ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	3301      	adds	r3, #1
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	429a      	cmp	r2, r3
 80035dc:	dbf0      	blt.n	80035c0 <_read+0x12>
  }

  return len;
 80035de:	687b      	ldr	r3, [r7, #4]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e009      	b.n	800360e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	60ba      	str	r2, [r7, #8]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	3301      	adds	r3, #1
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	429a      	cmp	r2, r3
 8003614:	dbf1      	blt.n	80035fa <_write+0x12>
  }
  return len;
 8003616:	687b      	ldr	r3, [r7, #4]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <_close>:

int _close(int file)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003648:	605a      	str	r2, [r3, #4]
  return 0;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <_isatty>:

int _isatty(int file)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003660:	2301      	movs	r3, #1
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003690:	4a14      	ldr	r2, [pc, #80]	@ (80036e4 <_sbrk+0x5c>)
 8003692:	4b15      	ldr	r3, [pc, #84]	@ (80036e8 <_sbrk+0x60>)
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800369c:	4b13      	ldr	r3, [pc, #76]	@ (80036ec <_sbrk+0x64>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d102      	bne.n	80036aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036a4:	4b11      	ldr	r3, [pc, #68]	@ (80036ec <_sbrk+0x64>)
 80036a6:	4a12      	ldr	r2, [pc, #72]	@ (80036f0 <_sbrk+0x68>)
 80036a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036aa:	4b10      	ldr	r3, [pc, #64]	@ (80036ec <_sbrk+0x64>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4413      	add	r3, r2
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d207      	bcs.n	80036c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036b8:	f005 ffe4 	bl	8009684 <__errno>
 80036bc:	4603      	mov	r3, r0
 80036be:	220c      	movs	r2, #12
 80036c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036c2:	f04f 33ff 	mov.w	r3, #4294967295
 80036c6:	e009      	b.n	80036dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036c8:	4b08      	ldr	r3, [pc, #32]	@ (80036ec <_sbrk+0x64>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ce:	4b07      	ldr	r3, [pc, #28]	@ (80036ec <_sbrk+0x64>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4413      	add	r3, r2
 80036d6:	4a05      	ldr	r2, [pc, #20]	@ (80036ec <_sbrk+0x64>)
 80036d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036da:	68fb      	ldr	r3, [r7, #12]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20018000 	.word	0x20018000
 80036e8:	00000400 	.word	0x00000400
 80036ec:	20000aec 	.word	0x20000aec
 80036f0:	20000c60 	.word	0x20000c60

080036f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80036f8:	4b06      	ldr	r3, [pc, #24]	@ (8003714 <SystemInit+0x20>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fe:	4a05      	ldr	r2, [pc, #20]	@ (8003714 <SystemInit+0x20>)
 8003700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003708:	bf00      	nop
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003718:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003750 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800371c:	f7ff ffea 	bl	80036f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003720:	480c      	ldr	r0, [pc, #48]	@ (8003754 <LoopForever+0x6>)
  ldr r1, =_edata
 8003722:	490d      	ldr	r1, [pc, #52]	@ (8003758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003724:	4a0d      	ldr	r2, [pc, #52]	@ (800375c <LoopForever+0xe>)
  movs r3, #0
 8003726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003728:	e002      	b.n	8003730 <LoopCopyDataInit>

0800372a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800372a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800372c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800372e:	3304      	adds	r3, #4

08003730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003734:	d3f9      	bcc.n	800372a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003736:	4a0a      	ldr	r2, [pc, #40]	@ (8003760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003738:	4c0a      	ldr	r4, [pc, #40]	@ (8003764 <LoopForever+0x16>)
  movs r3, #0
 800373a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800373c:	e001      	b.n	8003742 <LoopFillZerobss>

0800373e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800373e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003740:	3204      	adds	r2, #4

08003742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003744:	d3fb      	bcc.n	800373e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003746:	f005 ffa3 	bl	8009690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800374a:	f7fe fbfb 	bl	8001f44 <main>

0800374e <LoopForever>:

LoopForever:
    b LoopForever
 800374e:	e7fe      	b.n	800374e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003750:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003758:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800375c:	0800be28 	.word	0x0800be28
  ldr r2, =_sbss
 8003760:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003764:	20000c5c 	.word	0x20000c5c

08003768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003768:	e7fe      	b.n	8003768 <ADC1_2_IRQHandler>

0800376a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003774:	2003      	movs	r0, #3
 8003776:	f000 f93d 	bl	80039f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800377a:	200f      	movs	r0, #15
 800377c:	f000 f80e 	bl	800379c <HAL_InitTick>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	71fb      	strb	r3, [r7, #7]
 800378a:	e001      	b.n	8003790 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800378c:	f7ff fcb4 	bl	80030f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003790:	79fb      	ldrb	r3, [r7, #7]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80037a8:	4b17      	ldr	r3, [pc, #92]	@ (8003808 <HAL_InitTick+0x6c>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d023      	beq.n	80037f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80037b0:	4b16      	ldr	r3, [pc, #88]	@ (800380c <HAL_InitTick+0x70>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4b14      	ldr	r3, [pc, #80]	@ (8003808 <HAL_InitTick+0x6c>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	4619      	mov	r1, r3
 80037ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037be:	fbb3 f3f1 	udiv	r3, r3, r1
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f949 	bl	8003a5e <HAL_SYSTICK_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b0f      	cmp	r3, #15
 80037d6:	d809      	bhi.n	80037ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037d8:	2200      	movs	r2, #0
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	f04f 30ff 	mov.w	r0, #4294967295
 80037e0:	f000 f913 	bl	8003a0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003810 <HAL_InitTick+0x74>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e007      	b.n	80037fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
 80037f0:	e004      	b.n	80037fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
 80037f6:	e001      	b.n	80037fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000014 	.word	0x20000014
 800380c:	2000000c 	.word	0x2000000c
 8003810:	20000010 	.word	0x20000010

08003814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003818:	4b06      	ldr	r3, [pc, #24]	@ (8003834 <HAL_IncTick+0x20>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_IncTick+0x24>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4413      	add	r3, r2
 8003824:	4a04      	ldr	r2, [pc, #16]	@ (8003838 <HAL_IncTick+0x24>)
 8003826:	6013      	str	r3, [r2, #0]
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000014 	.word	0x20000014
 8003838:	20000af0 	.word	0x20000af0

0800383c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return uwTick;
 8003840:	4b03      	ldr	r3, [pc, #12]	@ (8003850 <HAL_GetTick+0x14>)
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000af0 	.word	0x20000af0

08003854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003864:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <__NVIC_SetPriorityGrouping+0x44>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003870:	4013      	ands	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800387c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003886:	4a04      	ldr	r2, [pc, #16]	@ (8003898 <__NVIC_SetPriorityGrouping+0x44>)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	60d3      	str	r3, [r2, #12]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a0:	4b04      	ldr	r3, [pc, #16]	@ (80038b4 <__NVIC_GetPriorityGrouping+0x18>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	f003 0307 	and.w	r3, r3, #7
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	db0b      	blt.n	80038e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	f003 021f 	and.w	r2, r3, #31
 80038d0:	4907      	ldr	r1, [pc, #28]	@ (80038f0 <__NVIC_EnableIRQ+0x38>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2001      	movs	r0, #1
 80038da:	fa00 f202 	lsl.w	r2, r0, r2
 80038de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e000e100 	.word	0xe000e100

080038f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	2b00      	cmp	r3, #0
 8003906:	db0a      	blt.n	800391e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	490c      	ldr	r1, [pc, #48]	@ (8003940 <__NVIC_SetPriority+0x4c>)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	440b      	add	r3, r1
 8003918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800391c:	e00a      	b.n	8003934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	b2da      	uxtb	r2, r3
 8003922:	4908      	ldr	r1, [pc, #32]	@ (8003944 <__NVIC_SetPriority+0x50>)
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	3b04      	subs	r3, #4
 800392c:	0112      	lsls	r2, r2, #4
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	440b      	add	r3, r1
 8003932:	761a      	strb	r2, [r3, #24]
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000e100 	.word	0xe000e100
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	@ 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f1c3 0307 	rsb	r3, r3, #7
 8003962:	2b04      	cmp	r3, #4
 8003964:	bf28      	it	cs
 8003966:	2304      	movcs	r3, #4
 8003968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3304      	adds	r3, #4
 800396e:	2b06      	cmp	r3, #6
 8003970:	d902      	bls.n	8003978 <NVIC_EncodePriority+0x30>
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3b03      	subs	r3, #3
 8003976:	e000      	b.n	800397a <NVIC_EncodePriority+0x32>
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	f04f 32ff 	mov.w	r2, #4294967295
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43da      	mvns	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	401a      	ands	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003990:	f04f 31ff 	mov.w	r1, #4294967295
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	43d9      	mvns	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	4313      	orrs	r3, r2
         );
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3724      	adds	r7, #36	@ 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
	...

080039b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039c0:	d301      	bcc.n	80039c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039c2:	2301      	movs	r3, #1
 80039c4:	e00f      	b.n	80039e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039c6:	4a0a      	ldr	r2, [pc, #40]	@ (80039f0 <SysTick_Config+0x40>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ce:	210f      	movs	r1, #15
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295
 80039d4:	f7ff ff8e 	bl	80038f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d8:	4b05      	ldr	r3, [pc, #20]	@ (80039f0 <SysTick_Config+0x40>)
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039de:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <SysTick_Config+0x40>)
 80039e0:	2207      	movs	r2, #7
 80039e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	e000e010 	.word	0xe000e010

080039f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ff29 	bl	8003854 <__NVIC_SetPriorityGrouping>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b086      	sub	sp, #24
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	4603      	mov	r3, r0
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a1c:	f7ff ff3e 	bl	800389c <__NVIC_GetPriorityGrouping>
 8003a20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	6978      	ldr	r0, [r7, #20]
 8003a28:	f7ff ff8e 	bl	8003948 <NVIC_EncodePriority>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff5d 	bl	80038f4 <__NVIC_SetPriority>
}
 8003a3a:	bf00      	nop
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	4603      	mov	r3, r0
 8003a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff31 	bl	80038b8 <__NVIC_EnableIRQ>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ffa2 	bl	80039b0 <SysTick_Config>
 8003a6c:	4603      	mov	r3, r0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e098      	b.n	8003bbc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4b4d      	ldr	r3, [pc, #308]	@ (8003bc8 <HAL_DMA_Init+0x150>)
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d80f      	bhi.n	8003ab6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003bcc <HAL_DMA_Init+0x154>)
 8003a9e:	4413      	add	r3, r2
 8003aa0:	4a4b      	ldr	r2, [pc, #300]	@ (8003bd0 <HAL_DMA_Init+0x158>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	009a      	lsls	r2, r3, #2
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a48      	ldr	r2, [pc, #288]	@ (8003bd4 <HAL_DMA_Init+0x15c>)
 8003ab2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ab4:	e00e      	b.n	8003ad4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	4b46      	ldr	r3, [pc, #280]	@ (8003bd8 <HAL_DMA_Init+0x160>)
 8003abe:	4413      	add	r3, r2
 8003ac0:	4a43      	ldr	r2, [pc, #268]	@ (8003bd0 <HAL_DMA_Init+0x158>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	009a      	lsls	r2, r3, #2
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a42      	ldr	r2, [pc, #264]	@ (8003bdc <HAL_DMA_Init+0x164>)
 8003ad2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b2e:	d039      	beq.n	8003ba4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	4a27      	ldr	r2, [pc, #156]	@ (8003bd4 <HAL_DMA_Init+0x15c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d11a      	bne.n	8003b70 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b3a:	4b29      	ldr	r3, [pc, #164]	@ (8003be0 <HAL_DMA_Init+0x168>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b42:	f003 031c 	and.w	r3, r3, #28
 8003b46:	210f      	movs	r1, #15
 8003b48:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	4924      	ldr	r1, [pc, #144]	@ (8003be0 <HAL_DMA_Init+0x168>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b54:	4b22      	ldr	r3, [pc, #136]	@ (8003be0 <HAL_DMA_Init+0x168>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b60:	f003 031c 	and.w	r3, r3, #28
 8003b64:	fa01 f303 	lsl.w	r3, r1, r3
 8003b68:	491d      	ldr	r1, [pc, #116]	@ (8003be0 <HAL_DMA_Init+0x168>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]
 8003b6e:	e019      	b.n	8003ba4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b70:	4b1c      	ldr	r3, [pc, #112]	@ (8003be4 <HAL_DMA_Init+0x16c>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b78:	f003 031c 	and.w	r3, r3, #28
 8003b7c:	210f      	movs	r1, #15
 8003b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	4917      	ldr	r1, [pc, #92]	@ (8003be4 <HAL_DMA_Init+0x16c>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b8a:	4b16      	ldr	r3, [pc, #88]	@ (8003be4 <HAL_DMA_Init+0x16c>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6859      	ldr	r1, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b96:	f003 031c 	and.w	r3, r3, #28
 8003b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9e:	4911      	ldr	r1, [pc, #68]	@ (8003be4 <HAL_DMA_Init+0x16c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	40020407 	.word	0x40020407
 8003bcc:	bffdfff8 	.word	0xbffdfff8
 8003bd0:	cccccccd 	.word	0xcccccccd
 8003bd4:	40020000 	.word	0x40020000
 8003bd8:	bffdfbf8 	.word	0xbffdfbf8
 8003bdc:	40020400 	.word	0x40020400
 8003be0:	400200a8 	.word	0x400200a8
 8003be4:	400204a8 	.word	0x400204a8

08003be8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_DMA_Start_IT+0x20>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e04b      	b.n	8003ca0 <HAL_DMA_Start_IT+0xb8>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d13a      	bne.n	8003c92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f95f 	bl	8003f04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 020e 	orr.w	r2, r2, #14
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	e00f      	b.n	8003c80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0204 	bic.w	r2, r2, #4
 8003c6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 020a 	orr.w	r2, r2, #10
 8003c7e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e005      	b.n	8003c9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d008      	beq.n	8003cd2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e022      	b.n	8003d18 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 020e 	bic.w	r2, r2, #14
 8003ce0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0201 	bic.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	f003 021c 	and.w	r2, r3, #28
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f202 	lsl.w	r2, r1, r2
 8003d04:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d005      	beq.n	8003d48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2204      	movs	r2, #4
 8003d40:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
 8003d46:	e029      	b.n	8003d9c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 020e 	bic.w	r2, r2, #14
 8003d56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6c:	f003 021c 	and.w	r2, r3, #28
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d74:	2101      	movs	r1, #1
 8003d76:	fa01 f202 	lsl.w	r2, r1, r2
 8003d7a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
    }
  }
  return status;
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	f003 031c 	and.w	r3, r3, #28
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d026      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x7a>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d021      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d107      	bne.n	8003dfa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0204 	bic.w	r2, r2, #4
 8003df8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfe:	f003 021c 	and.w	r2, r3, #28
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	2104      	movs	r1, #4
 8003e08:	fa01 f202 	lsl.w	r2, r1, r2
 8003e0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d071      	beq.n	8003efa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e1e:	e06c      	b.n	8003efa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e24:	f003 031c 	and.w	r3, r3, #28
 8003e28:	2202      	movs	r2, #2
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d02e      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xec>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d029      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10b      	bne.n	8003e64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 020a 	bic.w	r2, r2, #10
 8003e5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e68:	f003 021c 	and.w	r2, r3, #28
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	2102      	movs	r1, #2
 8003e72:	fa01 f202 	lsl.w	r2, r1, r2
 8003e76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d038      	beq.n	8003efa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e90:	e033      	b.n	8003efa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e96:	f003 031c 	and.w	r3, r3, #28
 8003e9a:	2208      	movs	r2, #8
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d02a      	beq.n	8003efc <HAL_DMA_IRQHandler+0x156>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d025      	beq.n	8003efc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 020e 	bic.w	r2, r2, #14
 8003ebe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec4:	f003 021c 	and.w	r2, r3, #28
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d004      	beq.n	8003efc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
}
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	f003 021c 	and.w	r2, r3, #28
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	2101      	movs	r1, #1
 8003f20:	fa01 f202 	lsl.w	r2, r1, r2
 8003f24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b10      	cmp	r3, #16
 8003f34:	d108      	bne.n	8003f48 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f46:	e007      	b.n	8003f58 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	60da      	str	r2, [r3, #12]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f72:	e17f      	b.n	8004274 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	2101      	movs	r1, #1
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f80:	4013      	ands	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8171 	beq.w	800426e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d005      	beq.n	8003fa4 <HAL_GPIO_Init+0x40>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d130      	bne.n	8004006 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	2203      	movs	r2, #3
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fda:	2201      	movs	r2, #1
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	f003 0201 	and.w	r2, r3, #1
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b03      	cmp	r3, #3
 8004010:	d118      	bne.n	8004044 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004018:	2201      	movs	r2, #1
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	08db      	lsrs	r3, r3, #3
 800402e:	f003 0201 	and.w	r2, r3, #1
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b03      	cmp	r3, #3
 800404e:	d017      	beq.n	8004080 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	2203      	movs	r2, #3
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4013      	ands	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d123      	bne.n	80040d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	08da      	lsrs	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3208      	adds	r2, #8
 8004094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004098:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	220f      	movs	r2, #15
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4013      	ands	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	08da      	lsrs	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3208      	adds	r2, #8
 80040ce:	6939      	ldr	r1, [r7, #16]
 80040d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	2203      	movs	r2, #3
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4013      	ands	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0203 	and.w	r2, r3, #3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80ac 	beq.w	800426e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004116:	4b5f      	ldr	r3, [pc, #380]	@ (8004294 <HAL_GPIO_Init+0x330>)
 8004118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411a:	4a5e      	ldr	r2, [pc, #376]	@ (8004294 <HAL_GPIO_Init+0x330>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	6613      	str	r3, [r2, #96]	@ 0x60
 8004122:	4b5c      	ldr	r3, [pc, #368]	@ (8004294 <HAL_GPIO_Init+0x330>)
 8004124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800412e:	4a5a      	ldr	r2, [pc, #360]	@ (8004298 <HAL_GPIO_Init+0x334>)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3302      	adds	r3, #2
 8004136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	220f      	movs	r2, #15
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004158:	d025      	beq.n	80041a6 <HAL_GPIO_Init+0x242>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a4f      	ldr	r2, [pc, #316]	@ (800429c <HAL_GPIO_Init+0x338>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d01f      	beq.n	80041a2 <HAL_GPIO_Init+0x23e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a4e      	ldr	r2, [pc, #312]	@ (80042a0 <HAL_GPIO_Init+0x33c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d019      	beq.n	800419e <HAL_GPIO_Init+0x23a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a4d      	ldr	r2, [pc, #308]	@ (80042a4 <HAL_GPIO_Init+0x340>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <HAL_GPIO_Init+0x236>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a4c      	ldr	r2, [pc, #304]	@ (80042a8 <HAL_GPIO_Init+0x344>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00d      	beq.n	8004196 <HAL_GPIO_Init+0x232>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a4b      	ldr	r2, [pc, #300]	@ (80042ac <HAL_GPIO_Init+0x348>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d007      	beq.n	8004192 <HAL_GPIO_Init+0x22e>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a4a      	ldr	r2, [pc, #296]	@ (80042b0 <HAL_GPIO_Init+0x34c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d101      	bne.n	800418e <HAL_GPIO_Init+0x22a>
 800418a:	2306      	movs	r3, #6
 800418c:	e00c      	b.n	80041a8 <HAL_GPIO_Init+0x244>
 800418e:	2307      	movs	r3, #7
 8004190:	e00a      	b.n	80041a8 <HAL_GPIO_Init+0x244>
 8004192:	2305      	movs	r3, #5
 8004194:	e008      	b.n	80041a8 <HAL_GPIO_Init+0x244>
 8004196:	2304      	movs	r3, #4
 8004198:	e006      	b.n	80041a8 <HAL_GPIO_Init+0x244>
 800419a:	2303      	movs	r3, #3
 800419c:	e004      	b.n	80041a8 <HAL_GPIO_Init+0x244>
 800419e:	2302      	movs	r3, #2
 80041a0:	e002      	b.n	80041a8 <HAL_GPIO_Init+0x244>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <HAL_GPIO_Init+0x244>
 80041a6:	2300      	movs	r3, #0
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	f002 0203 	and.w	r2, r2, #3
 80041ae:	0092      	lsls	r2, r2, #2
 80041b0:	4093      	lsls	r3, r2
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041b8:	4937      	ldr	r1, [pc, #220]	@ (8004298 <HAL_GPIO_Init+0x334>)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	089b      	lsrs	r3, r3, #2
 80041be:	3302      	adds	r3, #2
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041c6:	4b3b      	ldr	r3, [pc, #236]	@ (80042b4 <HAL_GPIO_Init+0x350>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4013      	ands	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041ea:	4a32      	ldr	r2, [pc, #200]	@ (80042b4 <HAL_GPIO_Init+0x350>)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041f0:	4b30      	ldr	r3, [pc, #192]	@ (80042b4 <HAL_GPIO_Init+0x350>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4013      	ands	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004214:	4a27      	ldr	r2, [pc, #156]	@ (80042b4 <HAL_GPIO_Init+0x350>)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800421a:	4b26      	ldr	r3, [pc, #152]	@ (80042b4 <HAL_GPIO_Init+0x350>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	43db      	mvns	r3, r3
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4013      	ands	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800423e:	4a1d      	ldr	r2, [pc, #116]	@ (80042b4 <HAL_GPIO_Init+0x350>)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004244:	4b1b      	ldr	r3, [pc, #108]	@ (80042b4 <HAL_GPIO_Init+0x350>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	43db      	mvns	r3, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4013      	ands	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004268:	4a12      	ldr	r2, [pc, #72]	@ (80042b4 <HAL_GPIO_Init+0x350>)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	3301      	adds	r3, #1
 8004272:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	fa22 f303 	lsr.w	r3, r2, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	f47f ae78 	bne.w	8003f74 <HAL_GPIO_Init+0x10>
  }
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	40010000 	.word	0x40010000
 800429c:	48000400 	.word	0x48000400
 80042a0:	48000800 	.word	0x48000800
 80042a4:	48000c00 	.word	0x48000c00
 80042a8:	48001000 	.word	0x48001000
 80042ac:	48001400 	.word	0x48001400
 80042b0:	48001800 	.word	0x48001800
 80042b4:	40010400 	.word	0x40010400

080042b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	807b      	strh	r3, [r7, #2]
 80042c4:	4613      	mov	r3, r2
 80042c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042c8:	787b      	ldrb	r3, [r7, #1]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042ce:	887a      	ldrh	r2, [r7, #2]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042d4:	e002      	b.n	80042dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042d6:	887a      	ldrh	r2, [r7, #2]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042ec:	4b04      	ldr	r3, [pc, #16]	@ (8004300 <HAL_PWREx_GetVoltageRange+0x18>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40007000 	.word	0x40007000

08004304 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004312:	d130      	bne.n	8004376 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004314:	4b23      	ldr	r3, [pc, #140]	@ (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800431c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004320:	d038      	beq.n	8004394 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004322:	4b20      	ldr	r3, [pc, #128]	@ (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800432a:	4a1e      	ldr	r2, [pc, #120]	@ (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800432c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004330:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004332:	4b1d      	ldr	r3, [pc, #116]	@ (80043a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2232      	movs	r2, #50	@ 0x32
 8004338:	fb02 f303 	mul.w	r3, r2, r3
 800433c:	4a1b      	ldr	r2, [pc, #108]	@ (80043ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	0c9b      	lsrs	r3, r3, #18
 8004344:	3301      	adds	r3, #1
 8004346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004348:	e002      	b.n	8004350 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3b01      	subs	r3, #1
 800434e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004350:	4b14      	ldr	r3, [pc, #80]	@ (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800435c:	d102      	bne.n	8004364 <HAL_PWREx_ControlVoltageScaling+0x60>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f2      	bne.n	800434a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004364:	4b0f      	ldr	r3, [pc, #60]	@ (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004370:	d110      	bne.n	8004394 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e00f      	b.n	8004396 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004376:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800437e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004382:	d007      	beq.n	8004394 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004384:	4b07      	ldr	r3, [pc, #28]	@ (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800438c:	4a05      	ldr	r2, [pc, #20]	@ (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800438e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004392:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40007000 	.word	0x40007000
 80043a8:	2000000c 	.word	0x2000000c
 80043ac:	431bde83 	.word	0x431bde83

080043b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e3ca      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c2:	4b97      	ldr	r3, [pc, #604]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043cc:	4b94      	ldr	r3, [pc, #592]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 80e4 	beq.w	80045ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_RCC_OscConfig+0x4a>
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	f040 808b 	bne.w	8004508 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	f040 8087 	bne.w	8004508 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043fa:	4b89      	ldr	r3, [pc, #548]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_RCC_OscConfig+0x62>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e3a2      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1a      	ldr	r2, [r3, #32]
 8004416:	4b82      	ldr	r3, [pc, #520]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <HAL_RCC_OscConfig+0x7c>
 8004422:	4b7f      	ldr	r3, [pc, #508]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800442a:	e005      	b.n	8004438 <HAL_RCC_OscConfig+0x88>
 800442c:	4b7c      	ldr	r3, [pc, #496]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 800442e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004432:	091b      	lsrs	r3, r3, #4
 8004434:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004438:	4293      	cmp	r3, r2
 800443a:	d223      	bcs.n	8004484 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fd55 	bl	8004ef0 <RCC_SetFlashLatencyFromMSIRange>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e383      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004450:	4b73      	ldr	r3, [pc, #460]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a72      	ldr	r2, [pc, #456]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004456:	f043 0308 	orr.w	r3, r3, #8
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	4b70      	ldr	r3, [pc, #448]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	496d      	ldr	r1, [pc, #436]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 800446a:	4313      	orrs	r3, r2
 800446c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800446e:	4b6c      	ldr	r3, [pc, #432]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	4968      	ldr	r1, [pc, #416]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 800447e:	4313      	orrs	r3, r2
 8004480:	604b      	str	r3, [r1, #4]
 8004482:	e025      	b.n	80044d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004484:	4b66      	ldr	r3, [pc, #408]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a65      	ldr	r2, [pc, #404]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 800448a:	f043 0308 	orr.w	r3, r3, #8
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b63      	ldr	r3, [pc, #396]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	4960      	ldr	r1, [pc, #384]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	495b      	ldr	r1, [pc, #364]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fd15 	bl	8004ef0 <RCC_SetFlashLatencyFromMSIRange>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e343      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044d0:	f000 fc4a 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 80044d4:	4602      	mov	r2, r0
 80044d6:	4b52      	ldr	r3, [pc, #328]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	4950      	ldr	r1, [pc, #320]	@ (8004624 <HAL_RCC_OscConfig+0x274>)
 80044e2:	5ccb      	ldrb	r3, [r1, r3]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ec:	4a4e      	ldr	r2, [pc, #312]	@ (8004628 <HAL_RCC_OscConfig+0x278>)
 80044ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044f0:	4b4e      	ldr	r3, [pc, #312]	@ (800462c <HAL_RCC_OscConfig+0x27c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff f951 	bl	800379c <HAL_InitTick>
 80044fa:	4603      	mov	r3, r0
 80044fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d052      	beq.n	80045aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	e327      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d032      	beq.n	8004576 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004510:	4b43      	ldr	r3, [pc, #268]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a42      	ldr	r2, [pc, #264]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800451c:	f7ff f98e 	bl	800383c <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004524:	f7ff f98a 	bl	800383c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e310      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004536:	4b3a      	ldr	r3, [pc, #232]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004542:	4b37      	ldr	r3, [pc, #220]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a36      	ldr	r2, [pc, #216]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004548:	f043 0308 	orr.w	r3, r3, #8
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	4b34      	ldr	r3, [pc, #208]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	4931      	ldr	r1, [pc, #196]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 800455c:	4313      	orrs	r3, r2
 800455e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004560:	4b2f      	ldr	r3, [pc, #188]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	492c      	ldr	r1, [pc, #176]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]
 8004574:	e01a      	b.n	80045ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004576:	4b2a      	ldr	r3, [pc, #168]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a29      	ldr	r2, [pc, #164]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004582:	f7ff f95b 	bl	800383c <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800458a:	f7ff f957 	bl	800383c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e2dd      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800459c:	4b20      	ldr	r3, [pc, #128]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f0      	bne.n	800458a <HAL_RCC_OscConfig+0x1da>
 80045a8:	e000      	b.n	80045ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d074      	beq.n	80046a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d005      	beq.n	80045ca <HAL_RCC_OscConfig+0x21a>
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b0c      	cmp	r3, #12
 80045c2:	d10e      	bne.n	80045e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d10b      	bne.n	80045e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ca:	4b15      	ldr	r3, [pc, #84]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d064      	beq.n	80046a0 <HAL_RCC_OscConfig+0x2f0>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d160      	bne.n	80046a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e2ba      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ea:	d106      	bne.n	80045fa <HAL_RCC_OscConfig+0x24a>
 80045ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a0b      	ldr	r2, [pc, #44]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 80045f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	e026      	b.n	8004648 <HAL_RCC_OscConfig+0x298>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004602:	d115      	bne.n	8004630 <HAL_RCC_OscConfig+0x280>
 8004604:	4b06      	ldr	r3, [pc, #24]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a05      	ldr	r2, [pc, #20]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 800460a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	4b03      	ldr	r3, [pc, #12]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a02      	ldr	r2, [pc, #8]	@ (8004620 <HAL_RCC_OscConfig+0x270>)
 8004616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	e014      	b.n	8004648 <HAL_RCC_OscConfig+0x298>
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000
 8004624:	0800ba5c 	.word	0x0800ba5c
 8004628:	2000000c 	.word	0x2000000c
 800462c:	20000010 	.word	0x20000010
 8004630:	4ba0      	ldr	r3, [pc, #640]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a9f      	ldr	r2, [pc, #636]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 8004636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b9d      	ldr	r3, [pc, #628]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a9c      	ldr	r2, [pc, #624]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 8004642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d013      	beq.n	8004678 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7ff f8f4 	bl	800383c <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7ff f8f0 	bl	800383c <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	@ 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e276      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800466a:	4b92      	ldr	r3, [pc, #584]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0x2a8>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7ff f8e0 	bl	800383c <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004680:	f7ff f8dc 	bl	800383c <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	@ 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e262      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004692:	4b88      	ldr	r3, [pc, #544]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x2d0>
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d060      	beq.n	8004770 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_OscConfig+0x310>
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	d119      	bne.n	80046ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d116      	bne.n	80046ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046c0:	4b7c      	ldr	r3, [pc, #496]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_RCC_OscConfig+0x328>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e23f      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d8:	4b76      	ldr	r3, [pc, #472]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	061b      	lsls	r3, r3, #24
 80046e6:	4973      	ldr	r1, [pc, #460]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ec:	e040      	b.n	8004770 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d023      	beq.n	800473e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f6:	4b6f      	ldr	r3, [pc, #444]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6e      	ldr	r2, [pc, #440]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 80046fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004702:	f7ff f89b 	bl	800383c <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470a:	f7ff f897 	bl	800383c <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e21d      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800471c:	4b65      	ldr	r3, [pc, #404]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004728:	4b62      	ldr	r3, [pc, #392]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	061b      	lsls	r3, r3, #24
 8004736:	495f      	ldr	r1, [pc, #380]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 8004738:	4313      	orrs	r3, r2
 800473a:	604b      	str	r3, [r1, #4]
 800473c:	e018      	b.n	8004770 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800473e:	4b5d      	ldr	r3, [pc, #372]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a5c      	ldr	r2, [pc, #368]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 8004744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7ff f877 	bl	800383c <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004752:	f7ff f873 	bl	800383c <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e1f9      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004764:	4b53      	ldr	r3, [pc, #332]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1f0      	bne.n	8004752 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d03c      	beq.n	80047f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01c      	beq.n	80047be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004784:	4b4b      	ldr	r3, [pc, #300]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 8004786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800478a:	4a4a      	ldr	r2, [pc, #296]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004794:	f7ff f852 	bl	800383c <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800479c:	f7ff f84e 	bl	800383c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e1d4      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047ae:	4b41      	ldr	r3, [pc, #260]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 80047b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0ef      	beq.n	800479c <HAL_RCC_OscConfig+0x3ec>
 80047bc:	e01b      	b.n	80047f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047be:	4b3d      	ldr	r3, [pc, #244]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 80047c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047c4:	4a3b      	ldr	r2, [pc, #236]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ce:	f7ff f835 	bl	800383c <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d6:	f7ff f831 	bl	800383c <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e1b7      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047e8:	4b32      	ldr	r3, [pc, #200]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 80047ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ef      	bne.n	80047d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80a6 	beq.w	8004950 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004808:	4b2a      	ldr	r3, [pc, #168]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 800480a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10d      	bne.n	8004830 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004814:	4b27      	ldr	r3, [pc, #156]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004818:	4a26      	ldr	r2, [pc, #152]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 800481a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800481e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004820:	4b24      	ldr	r3, [pc, #144]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 8004822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800482c:	2301      	movs	r3, #1
 800482e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004830:	4b21      	ldr	r3, [pc, #132]	@ (80048b8 <HAL_RCC_OscConfig+0x508>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004838:	2b00      	cmp	r3, #0
 800483a:	d118      	bne.n	800486e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800483c:	4b1e      	ldr	r3, [pc, #120]	@ (80048b8 <HAL_RCC_OscConfig+0x508>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1d      	ldr	r2, [pc, #116]	@ (80048b8 <HAL_RCC_OscConfig+0x508>)
 8004842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004846:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004848:	f7fe fff8 	bl	800383c <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004850:	f7fe fff4 	bl	800383c <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e17a      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004862:	4b15      	ldr	r3, [pc, #84]	@ (80048b8 <HAL_RCC_OscConfig+0x508>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d108      	bne.n	8004888 <HAL_RCC_OscConfig+0x4d8>
 8004876:	4b0f      	ldr	r3, [pc, #60]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487c:	4a0d      	ldr	r2, [pc, #52]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004886:	e029      	b.n	80048dc <HAL_RCC_OscConfig+0x52c>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b05      	cmp	r3, #5
 800488e:	d115      	bne.n	80048bc <HAL_RCC_OscConfig+0x50c>
 8004890:	4b08      	ldr	r3, [pc, #32]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004896:	4a07      	ldr	r2, [pc, #28]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 8004898:	f043 0304 	orr.w	r3, r3, #4
 800489c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048a0:	4b04      	ldr	r3, [pc, #16]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a6:	4a03      	ldr	r2, [pc, #12]	@ (80048b4 <HAL_RCC_OscConfig+0x504>)
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048b0:	e014      	b.n	80048dc <HAL_RCC_OscConfig+0x52c>
 80048b2:	bf00      	nop
 80048b4:	40021000 	.word	0x40021000
 80048b8:	40007000 	.word	0x40007000
 80048bc:	4b9c      	ldr	r3, [pc, #624]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c2:	4a9b      	ldr	r2, [pc, #620]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048cc:	4b98      	ldr	r3, [pc, #608]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d2:	4a97      	ldr	r2, [pc, #604]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 80048d4:	f023 0304 	bic.w	r3, r3, #4
 80048d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d016      	beq.n	8004912 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fe ffaa 	bl	800383c <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ec:	f7fe ffa6 	bl	800383c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e12a      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004902:	4b8b      	ldr	r3, [pc, #556]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0ed      	beq.n	80048ec <HAL_RCC_OscConfig+0x53c>
 8004910:	e015      	b.n	800493e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004912:	f7fe ff93 	bl	800383c <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004918:	e00a      	b.n	8004930 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	f7fe ff8f 	bl	800383c <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e113      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004930:	4b7f      	ldr	r3, [pc, #508]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1ed      	bne.n	800491a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800493e:	7ffb      	ldrb	r3, [r7, #31]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d105      	bne.n	8004950 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004944:	4b7a      	ldr	r3, [pc, #488]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004948:	4a79      	ldr	r2, [pc, #484]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 800494a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800494e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80fe 	beq.w	8004b56 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495e:	2b02      	cmp	r3, #2
 8004960:	f040 80d0 	bne.w	8004b04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004964:	4b72      	ldr	r3, [pc, #456]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f003 0203 	and.w	r2, r3, #3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	429a      	cmp	r2, r3
 8004976:	d130      	bne.n	80049da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004982:	3b01      	subs	r3, #1
 8004984:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d127      	bne.n	80049da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004994:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004996:	429a      	cmp	r2, r3
 8004998:	d11f      	bne.n	80049da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049a4:	2a07      	cmp	r2, #7
 80049a6:	bf14      	ite	ne
 80049a8:	2201      	movne	r2, #1
 80049aa:	2200      	moveq	r2, #0
 80049ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d113      	bne.n	80049da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049bc:	085b      	lsrs	r3, r3, #1
 80049be:	3b01      	subs	r3, #1
 80049c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d109      	bne.n	80049da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d0:	085b      	lsrs	r3, r3, #1
 80049d2:	3b01      	subs	r3, #1
 80049d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d06e      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b0c      	cmp	r3, #12
 80049de:	d069      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049e0:	4b53      	ldr	r3, [pc, #332]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d105      	bne.n	80049f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049ec:	4b50      	ldr	r3, [pc, #320]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0ad      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049fc:	4b4c      	ldr	r3, [pc, #304]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a4b      	ldr	r2, [pc, #300]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a08:	f7fe ff18 	bl	800383c <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a10:	f7fe ff14 	bl	800383c <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e09a      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a22:	4b43      	ldr	r3, [pc, #268]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a2e:	4b40      	ldr	r3, [pc, #256]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	4b40      	ldr	r3, [pc, #256]	@ (8004b34 <HAL_RCC_OscConfig+0x784>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a3e:	3a01      	subs	r2, #1
 8004a40:	0112      	lsls	r2, r2, #4
 8004a42:	4311      	orrs	r1, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a48:	0212      	lsls	r2, r2, #8
 8004a4a:	4311      	orrs	r1, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a50:	0852      	lsrs	r2, r2, #1
 8004a52:	3a01      	subs	r2, #1
 8004a54:	0552      	lsls	r2, r2, #21
 8004a56:	4311      	orrs	r1, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a5c:	0852      	lsrs	r2, r2, #1
 8004a5e:	3a01      	subs	r2, #1
 8004a60:	0652      	lsls	r2, r2, #25
 8004a62:	4311      	orrs	r1, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a68:	0912      	lsrs	r2, r2, #4
 8004a6a:	0452      	lsls	r2, r2, #17
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	4930      	ldr	r1, [pc, #192]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a74:	4b2e      	ldr	r3, [pc, #184]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a2d      	ldr	r2, [pc, #180]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a80:	4b2b      	ldr	r3, [pc, #172]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a2a      	ldr	r2, [pc, #168]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a8c:	f7fe fed6 	bl	800383c <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fe fed2 	bl	800383c <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e058      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa6:	4b22      	ldr	r3, [pc, #136]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ab2:	e050      	b.n	8004b56 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e04f      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d148      	bne.n	8004b56 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a19      	ldr	r2, [pc, #100]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ace:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ad0:	4b17      	ldr	r3, [pc, #92]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4a16      	ldr	r2, [pc, #88]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ada:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004adc:	f7fe feae 	bl	800383c <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fe feaa 	bl	800383c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e030      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af6:	4b0e      	ldr	r3, [pc, #56]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x734>
 8004b02:	e028      	b.n	8004b56 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b0c      	cmp	r3, #12
 8004b08:	d023      	beq.n	8004b52 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0a:	4b09      	ldr	r3, [pc, #36]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a08      	ldr	r2, [pc, #32]	@ (8004b30 <HAL_RCC_OscConfig+0x780>)
 8004b10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fe fe91 	bl	800383c <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b1c:	e00c      	b.n	8004b38 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1e:	f7fe fe8d 	bl	800383c <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d905      	bls.n	8004b38 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e013      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
 8004b30:	40021000 	.word	0x40021000
 8004b34:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b38:	4b09      	ldr	r3, [pc, #36]	@ (8004b60 <HAL_RCC_OscConfig+0x7b0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1ec      	bne.n	8004b1e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b44:	4b06      	ldr	r3, [pc, #24]	@ (8004b60 <HAL_RCC_OscConfig+0x7b0>)
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	4905      	ldr	r1, [pc, #20]	@ (8004b60 <HAL_RCC_OscConfig+0x7b0>)
 8004b4a:	4b06      	ldr	r3, [pc, #24]	@ (8004b64 <HAL_RCC_OscConfig+0x7b4>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	60cb      	str	r3, [r1, #12]
 8004b50:	e001      	b.n	8004b56 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40021000 	.word	0x40021000
 8004b64:	feeefffc 	.word	0xfeeefffc

08004b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0e7      	b.n	8004d4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b7c:	4b75      	ldr	r3, [pc, #468]	@ (8004d54 <HAL_RCC_ClockConfig+0x1ec>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d910      	bls.n	8004bac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8a:	4b72      	ldr	r3, [pc, #456]	@ (8004d54 <HAL_RCC_ClockConfig+0x1ec>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f023 0207 	bic.w	r2, r3, #7
 8004b92:	4970      	ldr	r1, [pc, #448]	@ (8004d54 <HAL_RCC_ClockConfig+0x1ec>)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8004d54 <HAL_RCC_ClockConfig+0x1ec>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d001      	beq.n	8004bac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e0cf      	b.n	8004d4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d010      	beq.n	8004bda <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	4b66      	ldr	r3, [pc, #408]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d908      	bls.n	8004bda <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc8:	4b63      	ldr	r3, [pc, #396]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	4960      	ldr	r1, [pc, #384]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d04c      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d107      	bne.n	8004bfe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bee:	4b5a      	ldr	r3, [pc, #360]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d121      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e0a6      	b.n	8004d4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d107      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c06:	4b54      	ldr	r3, [pc, #336]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d115      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e09a      	b.n	8004d4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c1e:	4b4e      	ldr	r3, [pc, #312]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e08e      	b.n	8004d4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e086      	b.n	8004d4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c3e:	4b46      	ldr	r3, [pc, #280]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f023 0203 	bic.w	r2, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4943      	ldr	r1, [pc, #268]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c50:	f7fe fdf4 	bl	800383c <HAL_GetTick>
 8004c54:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c56:	e00a      	b.n	8004c6e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c58:	f7fe fdf0 	bl	800383c <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e06e      	b.n	8004d4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 020c 	and.w	r2, r3, #12
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d1eb      	bne.n	8004c58 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d010      	beq.n	8004cae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	4b31      	ldr	r3, [pc, #196]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d208      	bcs.n	8004cae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	492b      	ldr	r1, [pc, #172]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cae:	4b29      	ldr	r3, [pc, #164]	@ (8004d54 <HAL_RCC_ClockConfig+0x1ec>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d210      	bcs.n	8004cde <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbc:	4b25      	ldr	r3, [pc, #148]	@ (8004d54 <HAL_RCC_ClockConfig+0x1ec>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f023 0207 	bic.w	r2, r3, #7
 8004cc4:	4923      	ldr	r1, [pc, #140]	@ (8004d54 <HAL_RCC_ClockConfig+0x1ec>)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ccc:	4b21      	ldr	r3, [pc, #132]	@ (8004d54 <HAL_RCC_ClockConfig+0x1ec>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d001      	beq.n	8004cde <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e036      	b.n	8004d4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cea:	4b1b      	ldr	r3, [pc, #108]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	4918      	ldr	r1, [pc, #96]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d08:	4b13      	ldr	r3, [pc, #76]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4910      	ldr	r1, [pc, #64]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d1c:	f000 f824 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8004d20:	4602      	mov	r2, r0
 8004d22:	4b0d      	ldr	r3, [pc, #52]	@ (8004d58 <HAL_RCC_ClockConfig+0x1f0>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	091b      	lsrs	r3, r3, #4
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	490b      	ldr	r1, [pc, #44]	@ (8004d5c <HAL_RCC_ClockConfig+0x1f4>)
 8004d2e:	5ccb      	ldrb	r3, [r1, r3]
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
 8004d38:	4a09      	ldr	r2, [pc, #36]	@ (8004d60 <HAL_RCC_ClockConfig+0x1f8>)
 8004d3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d3c:	4b09      	ldr	r3, [pc, #36]	@ (8004d64 <HAL_RCC_ClockConfig+0x1fc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fe fd2b 	bl	800379c <HAL_InitTick>
 8004d46:	4603      	mov	r3, r0
 8004d48:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d4a:	7afb      	ldrb	r3, [r7, #11]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40022000 	.word	0x40022000
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	0800ba5c 	.word	0x0800ba5c
 8004d60:	2000000c 	.word	0x2000000c
 8004d64:	20000010 	.word	0x20000010

08004d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b089      	sub	sp, #36	@ 0x24
 8004d6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	2300      	movs	r3, #0
 8004d74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d76:	4b3e      	ldr	r3, [pc, #248]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d80:	4b3b      	ldr	r3, [pc, #236]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <HAL_RCC_GetSysClockFreq+0x34>
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b0c      	cmp	r3, #12
 8004d94:	d121      	bne.n	8004dda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d11e      	bne.n	8004dda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d9c:	4b34      	ldr	r3, [pc, #208]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d107      	bne.n	8004db8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004da8:	4b31      	ldr	r3, [pc, #196]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	e005      	b.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004db8:	4b2d      	ldr	r3, [pc, #180]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dcc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10d      	bne.n	8004df0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d102      	bne.n	8004de6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004de0:	4b25      	ldr	r3, [pc, #148]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x110>)
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	e004      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d101      	bne.n	8004df0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dec:	4b23      	ldr	r3, [pc, #140]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x114>)
 8004dee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b0c      	cmp	r3, #12
 8004df4:	d134      	bne.n	8004e60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004df6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d003      	beq.n	8004e0e <HAL_RCC_GetSysClockFreq+0xa6>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d003      	beq.n	8004e14 <HAL_RCC_GetSysClockFreq+0xac>
 8004e0c:	e005      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e10:	617b      	str	r3, [r7, #20]
      break;
 8004e12:	e005      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e14:	4b19      	ldr	r3, [pc, #100]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x114>)
 8004e16:	617b      	str	r3, [r7, #20]
      break;
 8004e18:	e002      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	617b      	str	r3, [r7, #20]
      break;
 8004e1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e20:	4b13      	ldr	r3, [pc, #76]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	091b      	lsrs	r3, r3, #4
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e2e:	4b10      	ldr	r3, [pc, #64]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	0a1b      	lsrs	r3, r3, #8
 8004e34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	fb03 f202 	mul.w	r2, r3, r2
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e46:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	0e5b      	lsrs	r3, r3, #25
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	3301      	adds	r3, #1
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e60:	69bb      	ldr	r3, [r7, #24]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3724      	adds	r7, #36	@ 0x24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40021000 	.word	0x40021000
 8004e74:	0800ba74 	.word	0x0800ba74
 8004e78:	00f42400 	.word	0x00f42400
 8004e7c:	007a1200 	.word	0x007a1200

08004e80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e84:	4b03      	ldr	r3, [pc, #12]	@ (8004e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e86:	681b      	ldr	r3, [r3, #0]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	2000000c 	.word	0x2000000c

08004e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e9c:	f7ff fff0 	bl	8004e80 <HAL_RCC_GetHCLKFreq>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	4b06      	ldr	r3, [pc, #24]	@ (8004ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	0a1b      	lsrs	r3, r3, #8
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	4904      	ldr	r1, [pc, #16]	@ (8004ec0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004eae:	5ccb      	ldrb	r3, [r1, r3]
 8004eb0:	f003 031f 	and.w	r3, r3, #31
 8004eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	0800ba6c 	.word	0x0800ba6c

08004ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ec8:	f7ff ffda 	bl	8004e80 <HAL_RCC_GetHCLKFreq>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4b06      	ldr	r3, [pc, #24]	@ (8004ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	0adb      	lsrs	r3, r3, #11
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	4904      	ldr	r1, [pc, #16]	@ (8004eec <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eda:	5ccb      	ldrb	r3, [r1, r3]
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	0800ba6c 	.word	0x0800ba6c

08004ef0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ef8:	2300      	movs	r3, #0
 8004efa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004efc:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f08:	f7ff f9ee 	bl	80042e8 <HAL_PWREx_GetVoltageRange>
 8004f0c:	6178      	str	r0, [r7, #20]
 8004f0e:	e014      	b.n	8004f3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f10:	4b25      	ldr	r3, [pc, #148]	@ (8004fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f14:	4a24      	ldr	r2, [pc, #144]	@ (8004fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f1c:	4b22      	ldr	r3, [pc, #136]	@ (8004fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f28:	f7ff f9de 	bl	80042e8 <HAL_PWREx_GetVoltageRange>
 8004f2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f32:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f38:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f40:	d10b      	bne.n	8004f5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b80      	cmp	r3, #128	@ 0x80
 8004f46:	d919      	bls.n	8004f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f4c:	d902      	bls.n	8004f54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f4e:	2302      	movs	r3, #2
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	e013      	b.n	8004f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f54:	2301      	movs	r3, #1
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	e010      	b.n	8004f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b80      	cmp	r3, #128	@ 0x80
 8004f5e:	d902      	bls.n	8004f66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f60:	2303      	movs	r3, #3
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	e00a      	b.n	8004f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b80      	cmp	r3, #128	@ 0x80
 8004f6a:	d102      	bne.n	8004f72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	e004      	b.n	8004f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b70      	cmp	r3, #112	@ 0x70
 8004f76:	d101      	bne.n	8004f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f78:	2301      	movs	r3, #1
 8004f7a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f023 0207 	bic.w	r2, r3, #7
 8004f84:	4909      	ldr	r1, [pc, #36]	@ (8004fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f8c:	4b07      	ldr	r3, [pc, #28]	@ (8004fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d001      	beq.n	8004f9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	40022000 	.word	0x40022000

08004fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fb8:	2300      	movs	r3, #0
 8004fba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d041      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fd0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fd4:	d02a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004fd6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fda:	d824      	bhi.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fe0:	d008      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fe2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fe6:	d81e      	bhi.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004fec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ff0:	d010      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ff2:	e018      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ff4:	4b86      	ldr	r3, [pc, #536]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4a85      	ldr	r2, [pc, #532]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ffe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005000:	e015      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3304      	adds	r3, #4
 8005006:	2100      	movs	r1, #0
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fabb 	bl	8005584 <RCCEx_PLLSAI1_Config>
 800500e:	4603      	mov	r3, r0
 8005010:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005012:	e00c      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3320      	adds	r3, #32
 8005018:	2100      	movs	r1, #0
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fba6 	bl	800576c <RCCEx_PLLSAI2_Config>
 8005020:	4603      	mov	r3, r0
 8005022:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005024:	e003      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	74fb      	strb	r3, [r7, #19]
      break;
 800502a:	e000      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800502c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800502e:	7cfb      	ldrb	r3, [r7, #19]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10b      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005034:	4b76      	ldr	r3, [pc, #472]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005042:	4973      	ldr	r1, [pc, #460]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800504a:	e001      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504c:	7cfb      	ldrb	r3, [r7, #19]
 800504e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d041      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005060:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005064:	d02a      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005066:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800506a:	d824      	bhi.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800506c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005070:	d008      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005072:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005076:	d81e      	bhi.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800507c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005080:	d010      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005082:	e018      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005084:	4b62      	ldr	r3, [pc, #392]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	4a61      	ldr	r2, [pc, #388]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800508e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005090:	e015      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3304      	adds	r3, #4
 8005096:	2100      	movs	r1, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fa73 	bl	8005584 <RCCEx_PLLSAI1_Config>
 800509e:	4603      	mov	r3, r0
 80050a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050a2:	e00c      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3320      	adds	r3, #32
 80050a8:	2100      	movs	r1, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fb5e 	bl	800576c <RCCEx_PLLSAI2_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050b4:	e003      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	74fb      	strb	r3, [r7, #19]
      break;
 80050ba:	e000      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80050bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050be:	7cfb      	ldrb	r3, [r7, #19]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10b      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050c4:	4b52      	ldr	r3, [pc, #328]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050d2:	494f      	ldr	r1, [pc, #316]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80050da:	e001      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	7cfb      	ldrb	r3, [r7, #19]
 80050de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80a0 	beq.w	800522e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ee:	2300      	movs	r3, #0
 80050f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050f2:	4b47      	ldr	r3, [pc, #284]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005102:	2300      	movs	r3, #0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00d      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005108:	4b41      	ldr	r3, [pc, #260]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510c:	4a40      	ldr	r2, [pc, #256]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005112:	6593      	str	r3, [r2, #88]	@ 0x58
 8005114:	4b3e      	ldr	r3, [pc, #248]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005120:	2301      	movs	r3, #1
 8005122:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005124:	4b3b      	ldr	r3, [pc, #236]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a3a      	ldr	r2, [pc, #232]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800512a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800512e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005130:	f7fe fb84 	bl	800383c <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005136:	e009      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005138:	f7fe fb80 	bl	800383c <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d902      	bls.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	74fb      	strb	r3, [r7, #19]
        break;
 800514a:	e005      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800514c:	4b31      	ldr	r3, [pc, #196]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0ef      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d15c      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800515e:	4b2c      	ldr	r3, [pc, #176]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005168:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01f      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	429a      	cmp	r2, r3
 800517a:	d019      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800517c:	4b24      	ldr	r3, [pc, #144]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005186:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005188:	4b21      	ldr	r3, [pc, #132]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518e:	4a20      	ldr	r2, [pc, #128]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005198:	4b1d      	ldr	r3, [pc, #116]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800519a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519e:	4a1c      	ldr	r2, [pc, #112]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051a8:	4a19      	ldr	r2, [pc, #100]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d016      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ba:	f7fe fb3f 	bl	800383c <HAL_GetTick>
 80051be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051c0:	e00b      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c2:	f7fe fb3b 	bl	800383c <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d902      	bls.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	74fb      	strb	r3, [r7, #19]
            break;
 80051d8:	e006      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051da:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0ec      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80051e8:	7cfb      	ldrb	r3, [r7, #19]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10c      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051ee:	4b08      	ldr	r3, [pc, #32]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051fe:	4904      	ldr	r1, [pc, #16]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005206:	e009      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005208:	7cfb      	ldrb	r3, [r7, #19]
 800520a:	74bb      	strb	r3, [r7, #18]
 800520c:	e006      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800520e:	bf00      	nop
 8005210:	40021000 	.word	0x40021000
 8005214:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	7cfb      	ldrb	r3, [r7, #19]
 800521a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800521c:	7c7b      	ldrb	r3, [r7, #17]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d105      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005222:	4b9e      	ldr	r3, [pc, #632]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005226:	4a9d      	ldr	r2, [pc, #628]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005228:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800522c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800523a:	4b98      	ldr	r3, [pc, #608]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005240:	f023 0203 	bic.w	r2, r3, #3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	4994      	ldr	r1, [pc, #592]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800525c:	4b8f      	ldr	r3, [pc, #572]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005262:	f023 020c 	bic.w	r2, r3, #12
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526a:	498c      	ldr	r1, [pc, #560]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800527e:	4b87      	ldr	r3, [pc, #540]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005284:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528c:	4983      	ldr	r1, [pc, #524]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052a0:	4b7e      	ldr	r3, [pc, #504]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ae:	497b      	ldr	r1, [pc, #492]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052c2:	4b76      	ldr	r3, [pc, #472]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d0:	4972      	ldr	r1, [pc, #456]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052e4:	4b6d      	ldr	r3, [pc, #436]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052f2:	496a      	ldr	r1, [pc, #424]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005306:	4b65      	ldr	r3, [pc, #404]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005314:	4961      	ldr	r1, [pc, #388]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005328:	4b5c      	ldr	r3, [pc, #368]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005336:	4959      	ldr	r1, [pc, #356]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800534a:	4b54      	ldr	r3, [pc, #336]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005350:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005358:	4950      	ldr	r1, [pc, #320]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800536c:	4b4b      	ldr	r3, [pc, #300]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005372:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537a:	4948      	ldr	r1, [pc, #288]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800538e:	4b43      	ldr	r3, [pc, #268]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005394:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539c:	493f      	ldr	r1, [pc, #252]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d028      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053b0:	4b3a      	ldr	r3, [pc, #232]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053be:	4937      	ldr	r1, [pc, #220]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053ce:	d106      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053d0:	4b32      	ldr	r3, [pc, #200]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	4a31      	ldr	r2, [pc, #196]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053da:	60d3      	str	r3, [r2, #12]
 80053dc:	e011      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053e6:	d10c      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3304      	adds	r3, #4
 80053ec:	2101      	movs	r1, #1
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f8c8 	bl	8005584 <RCCEx_PLLSAI1_Config>
 80053f4:	4603      	mov	r3, r0
 80053f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80053fe:	7cfb      	ldrb	r3, [r7, #19]
 8005400:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d028      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800540e:	4b23      	ldr	r3, [pc, #140]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005414:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541c:	491f      	ldr	r1, [pc, #124]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005428:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800542c:	d106      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800542e:	4b1b      	ldr	r3, [pc, #108]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	4a1a      	ldr	r2, [pc, #104]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005434:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005438:	60d3      	str	r3, [r2, #12]
 800543a:	e011      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005440:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005444:	d10c      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3304      	adds	r3, #4
 800544a:	2101      	movs	r1, #1
 800544c:	4618      	mov	r0, r3
 800544e:	f000 f899 	bl	8005584 <RCCEx_PLLSAI1_Config>
 8005452:	4603      	mov	r3, r0
 8005454:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005456:	7cfb      	ldrb	r3, [r7, #19]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800545c:	7cfb      	ldrb	r3, [r7, #19]
 800545e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d02b      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800546c:	4b0b      	ldr	r3, [pc, #44]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005472:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800547a:	4908      	ldr	r1, [pc, #32]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005486:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800548a:	d109      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800548c:	4b03      	ldr	r3, [pc, #12]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4a02      	ldr	r2, [pc, #8]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005492:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005496:	60d3      	str	r3, [r2, #12]
 8005498:	e014      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800549a:	bf00      	nop
 800549c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054a8:	d10c      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3304      	adds	r3, #4
 80054ae:	2101      	movs	r1, #1
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 f867 	bl	8005584 <RCCEx_PLLSAI1_Config>
 80054b6:	4603      	mov	r3, r0
 80054b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054ba:	7cfb      	ldrb	r3, [r7, #19]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80054c0:	7cfb      	ldrb	r3, [r7, #19]
 80054c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d02f      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054de:	4928      	ldr	r1, [pc, #160]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054ee:	d10d      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3304      	adds	r3, #4
 80054f4:	2102      	movs	r1, #2
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f844 	bl	8005584 <RCCEx_PLLSAI1_Config>
 80054fc:	4603      	mov	r3, r0
 80054fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005500:	7cfb      	ldrb	r3, [r7, #19]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d014      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005506:	7cfb      	ldrb	r3, [r7, #19]
 8005508:	74bb      	strb	r3, [r7, #18]
 800550a:	e011      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005510:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005514:	d10c      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3320      	adds	r3, #32
 800551a:	2102      	movs	r1, #2
 800551c:	4618      	mov	r0, r3
 800551e:	f000 f925 	bl	800576c <RCCEx_PLLSAI2_Config>
 8005522:	4603      	mov	r3, r0
 8005524:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005526:	7cfb      	ldrb	r3, [r7, #19]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800552c:	7cfb      	ldrb	r3, [r7, #19]
 800552e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800553c:	4b10      	ldr	r3, [pc, #64]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005542:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800554a:	490d      	ldr	r1, [pc, #52]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800555e:	4b08      	ldr	r3, [pc, #32]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005564:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800556e:	4904      	ldr	r1, [pc, #16]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005576:	7cbb      	ldrb	r3, [r7, #18]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40021000 	.word	0x40021000

08005584 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005592:	4b75      	ldr	r3, [pc, #468]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d018      	beq.n	80055d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800559e:	4b72      	ldr	r3, [pc, #456]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f003 0203 	and.w	r2, r3, #3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d10d      	bne.n	80055ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
       ||
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055b6:	4b6c      	ldr	r3, [pc, #432]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	091b      	lsrs	r3, r3, #4
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
       ||
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d047      	beq.n	800565a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	73fb      	strb	r3, [r7, #15]
 80055ce:	e044      	b.n	800565a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d018      	beq.n	800560a <RCCEx_PLLSAI1_Config+0x86>
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d825      	bhi.n	8005628 <RCCEx_PLLSAI1_Config+0xa4>
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d002      	beq.n	80055e6 <RCCEx_PLLSAI1_Config+0x62>
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d009      	beq.n	80055f8 <RCCEx_PLLSAI1_Config+0x74>
 80055e4:	e020      	b.n	8005628 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055e6:	4b60      	ldr	r3, [pc, #384]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d11d      	bne.n	800562e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055f6:	e01a      	b.n	800562e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055f8:	4b5b      	ldr	r3, [pc, #364]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005600:	2b00      	cmp	r3, #0
 8005602:	d116      	bne.n	8005632 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005608:	e013      	b.n	8005632 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800560a:	4b57      	ldr	r3, [pc, #348]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10f      	bne.n	8005636 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005616:	4b54      	ldr	r3, [pc, #336]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005626:	e006      	b.n	8005636 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	73fb      	strb	r3, [r7, #15]
      break;
 800562c:	e004      	b.n	8005638 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800562e:	bf00      	nop
 8005630:	e002      	b.n	8005638 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005632:	bf00      	nop
 8005634:	e000      	b.n	8005638 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005636:	bf00      	nop
    }

    if(status == HAL_OK)
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10d      	bne.n	800565a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800563e:	4b4a      	ldr	r3, [pc, #296]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6819      	ldr	r1, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	3b01      	subs	r3, #1
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	430b      	orrs	r3, r1
 8005654:	4944      	ldr	r1, [pc, #272]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005656:	4313      	orrs	r3, r2
 8005658:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d17d      	bne.n	800575c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005660:	4b41      	ldr	r3, [pc, #260]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a40      	ldr	r2, [pc, #256]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005666:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800566a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800566c:	f7fe f8e6 	bl	800383c <HAL_GetTick>
 8005670:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005672:	e009      	b.n	8005688 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005674:	f7fe f8e2 	bl	800383c <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d902      	bls.n	8005688 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	73fb      	strb	r3, [r7, #15]
        break;
 8005686:	e005      	b.n	8005694 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005688:	4b37      	ldr	r3, [pc, #220]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1ef      	bne.n	8005674 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d160      	bne.n	800575c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d111      	bne.n	80056c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056a0:	4b31      	ldr	r3, [pc, #196]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80056a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6892      	ldr	r2, [r2, #8]
 80056b0:	0211      	lsls	r1, r2, #8
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	68d2      	ldr	r2, [r2, #12]
 80056b6:	0912      	lsrs	r2, r2, #4
 80056b8:	0452      	lsls	r2, r2, #17
 80056ba:	430a      	orrs	r2, r1
 80056bc:	492a      	ldr	r1, [pc, #168]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	610b      	str	r3, [r1, #16]
 80056c2:	e027      	b.n	8005714 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d112      	bne.n	80056f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056ca:	4b27      	ldr	r3, [pc, #156]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80056d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6892      	ldr	r2, [r2, #8]
 80056da:	0211      	lsls	r1, r2, #8
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6912      	ldr	r2, [r2, #16]
 80056e0:	0852      	lsrs	r2, r2, #1
 80056e2:	3a01      	subs	r2, #1
 80056e4:	0552      	lsls	r2, r2, #21
 80056e6:	430a      	orrs	r2, r1
 80056e8:	491f      	ldr	r1, [pc, #124]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	610b      	str	r3, [r1, #16]
 80056ee:	e011      	b.n	8005714 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80056f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6892      	ldr	r2, [r2, #8]
 8005700:	0211      	lsls	r1, r2, #8
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6952      	ldr	r2, [r2, #20]
 8005706:	0852      	lsrs	r2, r2, #1
 8005708:	3a01      	subs	r2, #1
 800570a:	0652      	lsls	r2, r2, #25
 800570c:	430a      	orrs	r2, r1
 800570e:	4916      	ldr	r1, [pc, #88]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005710:	4313      	orrs	r3, r2
 8005712:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005714:	4b14      	ldr	r3, [pc, #80]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a13      	ldr	r2, [pc, #76]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 800571a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800571e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005720:	f7fe f88c 	bl	800383c <HAL_GetTick>
 8005724:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005726:	e009      	b.n	800573c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005728:	f7fe f888 	bl	800383c <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d902      	bls.n	800573c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	73fb      	strb	r3, [r7, #15]
          break;
 800573a:	e005      	b.n	8005748 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800573c:	4b0a      	ldr	r3, [pc, #40]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0ef      	beq.n	8005728 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800574e:	4b06      	ldr	r3, [pc, #24]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	4904      	ldr	r1, [pc, #16]	@ (8005768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005758:	4313      	orrs	r3, r2
 800575a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800575c:	7bfb      	ldrb	r3, [r7, #15]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40021000 	.word	0x40021000

0800576c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800577a:	4b6a      	ldr	r3, [pc, #424]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d018      	beq.n	80057b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005786:	4b67      	ldr	r3, [pc, #412]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f003 0203 	and.w	r2, r3, #3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d10d      	bne.n	80057b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
       ||
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800579e:	4b61      	ldr	r3, [pc, #388]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	091b      	lsrs	r3, r3, #4
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
       ||
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d047      	beq.n	8005842 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	73fb      	strb	r3, [r7, #15]
 80057b6:	e044      	b.n	8005842 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d018      	beq.n	80057f2 <RCCEx_PLLSAI2_Config+0x86>
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d825      	bhi.n	8005810 <RCCEx_PLLSAI2_Config+0xa4>
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d002      	beq.n	80057ce <RCCEx_PLLSAI2_Config+0x62>
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d009      	beq.n	80057e0 <RCCEx_PLLSAI2_Config+0x74>
 80057cc:	e020      	b.n	8005810 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057ce:	4b55      	ldr	r3, [pc, #340]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d11d      	bne.n	8005816 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057de:	e01a      	b.n	8005816 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057e0:	4b50      	ldr	r3, [pc, #320]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d116      	bne.n	800581a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f0:	e013      	b.n	800581a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057f2:	4b4c      	ldr	r3, [pc, #304]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10f      	bne.n	800581e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057fe:	4b49      	ldr	r3, [pc, #292]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d109      	bne.n	800581e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800580e:	e006      	b.n	800581e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	73fb      	strb	r3, [r7, #15]
      break;
 8005814:	e004      	b.n	8005820 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005816:	bf00      	nop
 8005818:	e002      	b.n	8005820 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800581e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10d      	bne.n	8005842 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005826:	4b3f      	ldr	r3, [pc, #252]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6819      	ldr	r1, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	3b01      	subs	r3, #1
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	430b      	orrs	r3, r1
 800583c:	4939      	ldr	r1, [pc, #228]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800583e:	4313      	orrs	r3, r2
 8005840:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d167      	bne.n	8005918 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005848:	4b36      	ldr	r3, [pc, #216]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a35      	ldr	r2, [pc, #212]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800584e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005854:	f7fd fff2 	bl	800383c <HAL_GetTick>
 8005858:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800585a:	e009      	b.n	8005870 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800585c:	f7fd ffee 	bl	800383c <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d902      	bls.n	8005870 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	73fb      	strb	r3, [r7, #15]
        break;
 800586e:	e005      	b.n	800587c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005870:	4b2c      	ldr	r3, [pc, #176]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1ef      	bne.n	800585c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d14a      	bne.n	8005918 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d111      	bne.n	80058ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005888:	4b26      	ldr	r3, [pc, #152]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6892      	ldr	r2, [r2, #8]
 8005898:	0211      	lsls	r1, r2, #8
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	68d2      	ldr	r2, [r2, #12]
 800589e:	0912      	lsrs	r2, r2, #4
 80058a0:	0452      	lsls	r2, r2, #17
 80058a2:	430a      	orrs	r2, r1
 80058a4:	491f      	ldr	r1, [pc, #124]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	614b      	str	r3, [r1, #20]
 80058aa:	e011      	b.n	80058d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80058b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6892      	ldr	r2, [r2, #8]
 80058bc:	0211      	lsls	r1, r2, #8
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6912      	ldr	r2, [r2, #16]
 80058c2:	0852      	lsrs	r2, r2, #1
 80058c4:	3a01      	subs	r2, #1
 80058c6:	0652      	lsls	r2, r2, #25
 80058c8:	430a      	orrs	r2, r1
 80058ca:	4916      	ldr	r1, [pc, #88]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058d0:	4b14      	ldr	r3, [pc, #80]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a13      	ldr	r2, [pc, #76]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058dc:	f7fd ffae 	bl	800383c <HAL_GetTick>
 80058e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058e2:	e009      	b.n	80058f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058e4:	f7fd ffaa 	bl	800383c <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d902      	bls.n	80058f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	73fb      	strb	r3, [r7, #15]
          break;
 80058f6:	e005      	b.n	8005904 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0ef      	beq.n	80058e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800590a:	4b06      	ldr	r3, [pc, #24]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800590c:	695a      	ldr	r2, [r3, #20]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	4904      	ldr	r1, [pc, #16]	@ (8005924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005914:	4313      	orrs	r3, r2
 8005916:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005918:	7bfb      	ldrb	r3, [r7, #15]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	40021000 	.word	0x40021000

08005928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e095      	b.n	8005a66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593e:	2b00      	cmp	r3, #0
 8005940:	d108      	bne.n	8005954 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800594a:	d009      	beq.n	8005960 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	61da      	str	r2, [r3, #28]
 8005952:	e005      	b.n	8005960 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fd fbe0 	bl	8003140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005996:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059a0:	d902      	bls.n	80059a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	e002      	b.n	80059ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80059b6:	d007      	beq.n	80059c8 <HAL_SPI_Init+0xa0>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059c0:	d002      	beq.n	80059c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0a:	ea42 0103 	orr.w	r1, r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	0c1b      	lsrs	r3, r3, #16
 8005a24:	f003 0204 	and.w	r2, r3, #4
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005a44:	ea42 0103 	orr.w	r1, r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b088      	sub	sp, #32
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a7e:	f7fd fedd 	bl	800383c <HAL_GetTick>
 8005a82:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005a84:	88fb      	ldrh	r3, [r7, #6]
 8005a86:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d001      	beq.n	8005a98 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005a94:	2302      	movs	r3, #2
 8005a96:	e15c      	b.n	8005d52 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <HAL_SPI_Transmit+0x36>
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e154      	b.n	8005d52 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_SPI_Transmit+0x48>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e14d      	b.n	8005d52 <HAL_SPI_Transmit+0x2e4>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	88fa      	ldrh	r2, [r7, #6]
 8005ad6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	88fa      	ldrh	r2, [r7, #6]
 8005adc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b08:	d10f      	bne.n	8005b2a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b34:	2b40      	cmp	r3, #64	@ 0x40
 8005b36:	d007      	beq.n	8005b48 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b50:	d952      	bls.n	8005bf8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_SPI_Transmit+0xf2>
 8005b5a:	8b7b      	ldrh	r3, [r7, #26]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d145      	bne.n	8005bec <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b64:	881a      	ldrh	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b70:	1c9a      	adds	r2, r3, #2
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b84:	e032      	b.n	8005bec <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d112      	bne.n	8005bba <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b98:	881a      	ldrh	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba4:	1c9a      	adds	r2, r3, #2
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bb8:	e018      	b.n	8005bec <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bba:	f7fd fe3f 	bl	800383c <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d803      	bhi.n	8005bd2 <HAL_SPI_Transmit+0x164>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d102      	bne.n	8005bd8 <HAL_SPI_Transmit+0x16a>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d109      	bne.n	8005bec <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e0b2      	b.n	8005d52 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1c7      	bne.n	8005b86 <HAL_SPI_Transmit+0x118>
 8005bf6:	e083      	b.n	8005d00 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_SPI_Transmit+0x198>
 8005c00:	8b7b      	ldrh	r3, [r7, #26]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d177      	bne.n	8005cf6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d912      	bls.n	8005c36 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c14:	881a      	ldrh	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c20:	1c9a      	adds	r2, r3, #2
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b02      	subs	r3, #2
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c34:	e05f      	b.n	8005cf6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	7812      	ldrb	r2, [r2, #0]
 8005c42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c5c:	e04b      	b.n	8005cf6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d12b      	bne.n	8005cc4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d912      	bls.n	8005c9c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7a:	881a      	ldrh	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c86:	1c9a      	adds	r2, r3, #2
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b02      	subs	r3, #2
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c9a:	e02c      	b.n	8005cf6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	7812      	ldrb	r2, [r2, #0]
 8005ca8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cc2:	e018      	b.n	8005cf6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cc4:	f7fd fdba 	bl	800383c <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d803      	bhi.n	8005cdc <HAL_SPI_Transmit+0x26e>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cda:	d102      	bne.n	8005ce2 <HAL_SPI_Transmit+0x274>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e02d      	b.n	8005d52 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1ae      	bne.n	8005c5e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	6839      	ldr	r1, [r7, #0]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 fb65 	bl	80063d4 <SPI_EndRxTxTransaction>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10a      	bne.n	8005d34 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d1e:	2300      	movs	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005d50:	2300      	movs	r3, #0
  }
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3720      	adds	r7, #32
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b08a      	sub	sp, #40	@ 0x28
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
 8005d66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d6c:	f7fd fd66 	bl	800383c <HAL_GetTick>
 8005d70:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d78:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005d80:	887b      	ldrh	r3, [r7, #2]
 8005d82:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005d84:	887b      	ldrh	r3, [r7, #2]
 8005d86:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d88:	7ffb      	ldrb	r3, [r7, #31]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d00c      	beq.n	8005da8 <HAL_SPI_TransmitReceive+0x4e>
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d94:	d106      	bne.n	8005da4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d102      	bne.n	8005da4 <HAL_SPI_TransmitReceive+0x4a>
 8005d9e:	7ffb      	ldrb	r3, [r7, #31]
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d001      	beq.n	8005da8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
 8005da6:	e1f3      	b.n	8006190 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_SPI_TransmitReceive+0x60>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <HAL_SPI_TransmitReceive+0x60>
 8005db4:	887b      	ldrh	r3, [r7, #2]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e1e8      	b.n	8006190 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0x72>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e1e1      	b.n	8006190 <HAL_SPI_TransmitReceive+0x436>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d003      	beq.n	8005de8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2205      	movs	r2, #5
 8005de4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	887a      	ldrh	r2, [r7, #2]
 8005df8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	887a      	ldrh	r2, [r7, #2]
 8005e00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	887a      	ldrh	r2, [r7, #2]
 8005e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	887a      	ldrh	r2, [r7, #2]
 8005e14:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e2a:	d802      	bhi.n	8005e32 <HAL_SPI_TransmitReceive+0xd8>
 8005e2c:	8abb      	ldrh	r3, [r7, #20]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d908      	bls.n	8005e44 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	e007      	b.n	8005e54 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e52:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5e:	2b40      	cmp	r3, #64	@ 0x40
 8005e60:	d007      	beq.n	8005e72 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e7a:	f240 8083 	bls.w	8005f84 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <HAL_SPI_TransmitReceive+0x132>
 8005e86:	8afb      	ldrh	r3, [r7, #22]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d16f      	bne.n	8005f6c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e90:	881a      	ldrh	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9c:	1c9a      	adds	r2, r3, #2
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eb0:	e05c      	b.n	8005f6c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d11b      	bne.n	8005ef8 <HAL_SPI_TransmitReceive+0x19e>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d016      	beq.n	8005ef8 <HAL_SPI_TransmitReceive+0x19e>
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d113      	bne.n	8005ef8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed4:	881a      	ldrh	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee0:	1c9a      	adds	r2, r3, #2
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d11c      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x1e6>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d016      	beq.n	8005f40 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1c:	b292      	uxth	r2, r2
 8005f1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f24:	1c9a      	adds	r2, r3, #2
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f40:	f7fd fc7c 	bl	800383c <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d80d      	bhi.n	8005f6c <HAL_SPI_TransmitReceive+0x212>
 8005f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d009      	beq.n	8005f6c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e111      	b.n	8006190 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d19d      	bne.n	8005eb2 <HAL_SPI_TransmitReceive+0x158>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d197      	bne.n	8005eb2 <HAL_SPI_TransmitReceive+0x158>
 8005f82:	e0e5      	b.n	8006150 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <HAL_SPI_TransmitReceive+0x23a>
 8005f8c:	8afb      	ldrh	r3, [r7, #22]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	f040 80d1 	bne.w	8006136 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d912      	bls.n	8005fc4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa2:	881a      	ldrh	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fae:	1c9a      	adds	r2, r3, #2
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b02      	subs	r3, #2
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fc2:	e0b8      	b.n	8006136 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	330c      	adds	r3, #12
 8005fce:	7812      	ldrb	r2, [r2, #0]
 8005fd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fea:	e0a4      	b.n	8006136 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d134      	bne.n	8006064 <HAL_SPI_TransmitReceive+0x30a>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d02f      	beq.n	8006064 <HAL_SPI_TransmitReceive+0x30a>
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	2b01      	cmp	r3, #1
 8006008:	d12c      	bne.n	8006064 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	d912      	bls.n	800603a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006018:	881a      	ldrh	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006024:	1c9a      	adds	r2, r3, #2
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b02      	subs	r3, #2
 8006032:	b29a      	uxth	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006038:	e012      	b.n	8006060 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	330c      	adds	r3, #12
 8006044:	7812      	ldrb	r2, [r2, #0]
 8006046:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006056:	b29b      	uxth	r3, r3
 8006058:	3b01      	subs	r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b01      	cmp	r3, #1
 8006070:	d148      	bne.n	8006104 <HAL_SPI_TransmitReceive+0x3aa>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d042      	beq.n	8006104 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b01      	cmp	r3, #1
 8006088:	d923      	bls.n	80060d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006094:	b292      	uxth	r2, r2
 8006096:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609c:	1c9a      	adds	r2, r3, #2
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	3b02      	subs	r3, #2
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d81f      	bhi.n	8006100 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060ce:	605a      	str	r2, [r3, #4]
 80060d0:	e016      	b.n	8006100 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f103 020c 	add.w	r2, r3, #12
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	7812      	ldrb	r2, [r2, #0]
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006100:	2301      	movs	r3, #1
 8006102:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006104:	f7fd fb9a 	bl	800383c <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006110:	429a      	cmp	r2, r3
 8006112:	d803      	bhi.n	800611c <HAL_SPI_TransmitReceive+0x3c2>
 8006114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d102      	bne.n	8006122 <HAL_SPI_TransmitReceive+0x3c8>
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	2b00      	cmp	r3, #0
 8006120:	d109      	bne.n	8006136 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e02c      	b.n	8006190 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	f47f af55 	bne.w	8005fec <HAL_SPI_TransmitReceive+0x292>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	f47f af4e 	bne.w	8005fec <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006150:	6a3a      	ldr	r2, [r7, #32]
 8006152:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f93d 	bl	80063d4 <SPI_EndRxTxTransaction>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e00e      	b.n	8006190 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800618e:	2300      	movs	r3, #0
  }
}
 8006190:	4618      	mov	r0, r3
 8006192:	3728      	adds	r7, #40	@ 0x28
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	4613      	mov	r3, r2
 80061a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061a8:	f7fd fb48 	bl	800383c <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	4413      	add	r3, r2
 80061b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061b8:	f7fd fb40 	bl	800383c <HAL_GetTick>
 80061bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061be:	4b39      	ldr	r3, [pc, #228]	@ (80062a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	015b      	lsls	r3, r3, #5
 80061c4:	0d1b      	lsrs	r3, r3, #20
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	fb02 f303 	mul.w	r3, r2, r3
 80061cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ce:	e054      	b.n	800627a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d050      	beq.n	800627a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061d8:	f7fd fb30 	bl	800383c <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d902      	bls.n	80061ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d13d      	bne.n	800626a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006206:	d111      	bne.n	800622c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006210:	d004      	beq.n	800621c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800621a:	d107      	bne.n	800622c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800622a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006234:	d10f      	bne.n	8006256 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006254:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e017      	b.n	800629a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	3b01      	subs	r3, #1
 8006278:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4013      	ands	r3, r2
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	429a      	cmp	r2, r3
 8006288:	bf0c      	ite	eq
 800628a:	2301      	moveq	r3, #1
 800628c:	2300      	movne	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	461a      	mov	r2, r3
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	429a      	cmp	r2, r3
 8006296:	d19b      	bne.n	80061d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3720      	adds	r7, #32
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	2000000c 	.word	0x2000000c

080062a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	@ 0x28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80062b6:	2300      	movs	r3, #0
 80062b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062ba:	f7fd fabf 	bl	800383c <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c2:	1a9b      	subs	r3, r3, r2
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	4413      	add	r3, r2
 80062c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80062ca:	f7fd fab7 	bl	800383c <HAL_GetTick>
 80062ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	330c      	adds	r3, #12
 80062d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062d8:	4b3d      	ldr	r3, [pc, #244]	@ (80063d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	00da      	lsls	r2, r3, #3
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	0d1b      	lsrs	r3, r3, #20
 80062e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ea:	fb02 f303 	mul.w	r3, r2, r3
 80062ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80062f0:	e060      	b.n	80063b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80062f8:	d107      	bne.n	800630a <SPI_WaitFifoStateUntilTimeout+0x62>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d104      	bne.n	800630a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006308:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006310:	d050      	beq.n	80063b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006312:	f7fd fa93 	bl	800383c <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800631e:	429a      	cmp	r2, r3
 8006320:	d902      	bls.n	8006328 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	2b00      	cmp	r3, #0
 8006326:	d13d      	bne.n	80063a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006336:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006340:	d111      	bne.n	8006366 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800634a:	d004      	beq.n	8006356 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006354:	d107      	bne.n	8006366 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006364:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800636e:	d10f      	bne.n	8006390 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800638e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e010      	b.n	80063c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	4013      	ands	r3, r2
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d196      	bne.n	80062f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3728      	adds	r7, #40	@ 0x28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	2000000c 	.word	0x2000000c

080063d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af02      	add	r7, sp, #8
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7ff ff5b 	bl	80062a8 <SPI_WaitFifoStateUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d007      	beq.n	8006408 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063fc:	f043 0220 	orr.w	r2, r3, #32
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e027      	b.n	8006458 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2200      	movs	r2, #0
 8006410:	2180      	movs	r1, #128	@ 0x80
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f7ff fec0 	bl	8006198 <SPI_WaitFlagStateUntilTimeout>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d007      	beq.n	800642e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006422:	f043 0220 	orr.w	r2, r3, #32
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e014      	b.n	8006458 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2200      	movs	r2, #0
 8006436:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f7ff ff34 	bl	80062a8 <SPI_WaitFifoStateUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d007      	beq.n	8006456 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800644a:	f043 0220 	orr.w	r2, r3, #32
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e000      	b.n	8006458 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e040      	b.n	80064f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fc fe9e 	bl	80031c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2224      	movs	r2, #36	@ 0x24
 800648c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0201 	bic.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fea6 	bl	80071f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fbeb 	bl	8006c88 <UART_SetConfig>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d101      	bne.n	80064bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e01b      	b.n	80064f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0201 	orr.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 ff25 	bl	800733c <UART_CheckIdleState>
 80064f2:	4603      	mov	r3, r0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b08b      	sub	sp, #44	@ 0x2c
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	4613      	mov	r3, r2
 8006508:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800650e:	2b20      	cmp	r3, #32
 8006510:	d147      	bne.n	80065a2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <HAL_UART_Transmit_IT+0x22>
 8006518:	88fb      	ldrh	r3, [r7, #6]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e040      	b.n	80065a4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	88fa      	ldrh	r2, [r7, #6]
 800652c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2221      	movs	r2, #33	@ 0x21
 800654a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006554:	d107      	bne.n	8006566 <HAL_UART_Transmit_IT+0x6a>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4a13      	ldr	r2, [pc, #76]	@ (80065b0 <HAL_UART_Transmit_IT+0xb4>)
 8006562:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006564:	e002      	b.n	800656c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4a12      	ldr	r2, [pc, #72]	@ (80065b4 <HAL_UART_Transmit_IT+0xb8>)
 800656a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	613b      	str	r3, [r7, #16]
   return(result);
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658a:	623b      	str	r3, [r7, #32]
 800658c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	69f9      	ldr	r1, [r7, #28]
 8006590:	6a3a      	ldr	r2, [r7, #32]
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	61bb      	str	r3, [r7, #24]
   return(result);
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e6      	bne.n	800656c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	e000      	b.n	80065a4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80065a2:	2302      	movs	r3, #2
  }
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	372c      	adds	r7, #44	@ 0x2c
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	08007a87 	.word	0x08007a87
 80065b4:	080079d1 	.word	0x080079d1

080065b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08a      	sub	sp, #40	@ 0x28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	4613      	mov	r3, r2
 80065c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d137      	bne.n	8006640 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <HAL_UART_Receive_DMA+0x24>
 80065d6:	88fb      	ldrh	r3, [r7, #6]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e030      	b.n	8006642 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a18      	ldr	r2, [pc, #96]	@ (800664c <HAL_UART_Receive_DMA+0x94>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d01f      	beq.n	8006630 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d018      	beq.n	8006630 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	e853 3f00 	ldrex	r3, [r3]
 800660a:	613b      	str	r3, [r7, #16]
   return(result);
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006612:	627b      	str	r3, [r7, #36]	@ 0x24
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	623b      	str	r3, [r7, #32]
 800661e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006620:	69f9      	ldr	r1, [r7, #28]
 8006622:	6a3a      	ldr	r2, [r7, #32]
 8006624:	e841 2300 	strex	r3, r2, [r1]
 8006628:	61bb      	str	r3, [r7, #24]
   return(result);
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e6      	bne.n	80065fe <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	461a      	mov	r2, r3
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 ff96 	bl	8007568 <UART_Start_Receive_DMA>
 800663c:	4603      	mov	r3, r0
 800663e:	e000      	b.n	8006642 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006640:	2302      	movs	r3, #2
  }
}
 8006642:	4618      	mov	r0, r3
 8006644:	3728      	adds	r7, #40	@ 0x28
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40008000 	.word	0x40008000

08006650 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b0ba      	sub	sp, #232	@ 0xe8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006676:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800667a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800667e:	4013      	ands	r3, r2
 8006680:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006688:	2b00      	cmp	r3, #0
 800668a:	d115      	bne.n	80066b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800668c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00f      	beq.n	80066b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d009      	beq.n	80066b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 82ca 	beq.w	8006c42 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
      }
      return;
 80066b6:	e2c4      	b.n	8006c42 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80066b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8117 	beq.w	80068f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80066c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d106      	bne.n	80066dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80066ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80066d2:	4b85      	ldr	r3, [pc, #532]	@ (80068e8 <HAL_UART_IRQHandler+0x298>)
 80066d4:	4013      	ands	r3, r2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 810a 	beq.w	80068f0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d011      	beq.n	800670c <HAL_UART_IRQHandler+0xbc>
 80066e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00b      	beq.n	800670c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2201      	movs	r2, #1
 80066fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006702:	f043 0201 	orr.w	r2, r3, #1
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800670c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d011      	beq.n	800673c <HAL_UART_IRQHandler+0xec>
 8006718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2202      	movs	r2, #2
 800672a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006732:	f043 0204 	orr.w	r2, r3, #4
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800673c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b00      	cmp	r3, #0
 8006746:	d011      	beq.n	800676c <HAL_UART_IRQHandler+0x11c>
 8006748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00b      	beq.n	800676c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2204      	movs	r2, #4
 800675a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006762:	f043 0202 	orr.w	r2, r3, #2
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800676c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b00      	cmp	r3, #0
 8006776:	d017      	beq.n	80067a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	d105      	bne.n	8006790 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006788:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00b      	beq.n	80067a8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2208      	movs	r2, #8
 8006796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800679e:	f043 0208 	orr.w	r2, r3, #8
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d012      	beq.n	80067da <HAL_UART_IRQHandler+0x18a>
 80067b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00c      	beq.n	80067da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067d0:	f043 0220 	orr.w	r2, r3, #32
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 8230 	beq.w	8006c46 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80067e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00d      	beq.n	800680e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f6:	f003 0320 	and.w	r3, r3, #32
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d007      	beq.n	800680e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006814:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006822:	2b40      	cmp	r3, #64	@ 0x40
 8006824:	d005      	beq.n	8006832 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800682a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800682e:	2b00      	cmp	r3, #0
 8006830:	d04f      	beq.n	80068d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 ff5e 	bl	80076f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006842:	2b40      	cmp	r3, #64	@ 0x40
 8006844:	d141      	bne.n	80068ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3308      	adds	r3, #8
 800684c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800685c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3308      	adds	r3, #8
 800686e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006872:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006876:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800687e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800688a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1d9      	bne.n	8006846 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006896:	2b00      	cmp	r3, #0
 8006898:	d013      	beq.n	80068c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800689e:	4a13      	ldr	r2, [pc, #76]	@ (80068ec <HAL_UART_IRQHandler+0x29c>)
 80068a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fd fa3c 	bl	8003d24 <HAL_DMA_Abort_IT>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d017      	beq.n	80068e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80068bc:	4610      	mov	r0, r2
 80068be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c0:	e00f      	b.n	80068e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f9ca 	bl	8006c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c8:	e00b      	b.n	80068e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f9c6 	bl	8006c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d0:	e007      	b.n	80068e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f9c2 	bl	8006c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80068e0:	e1b1      	b.n	8006c46 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e2:	bf00      	nop
    return;
 80068e4:	e1af      	b.n	8006c46 <HAL_UART_IRQHandler+0x5f6>
 80068e6:	bf00      	nop
 80068e8:	04000120 	.word	0x04000120
 80068ec:	080079a5 	.word	0x080079a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	f040 816a 	bne.w	8006bce <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fe:	f003 0310 	and.w	r3, r3, #16
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 8163 	beq.w	8006bce <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 815c 	beq.w	8006bce <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2210      	movs	r2, #16
 800691c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006928:	2b40      	cmp	r3, #64	@ 0x40
 800692a:	f040 80d4 	bne.w	8006ad6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800693a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 80ad 	beq.w	8006a9e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800694a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800694e:	429a      	cmp	r2, r3
 8006950:	f080 80a5 	bcs.w	8006a9e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800695a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	f040 8086 	bne.w	8006a7c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006984:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800698c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800699a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800699e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80069b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1da      	bne.n	8006970 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3308      	adds	r3, #8
 80069c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3308      	adds	r3, #8
 80069da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e1      	bne.n	80069ba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3308      	adds	r3, #8
 8006a16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e3      	bne.n	80069f6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a4c:	f023 0310 	bic.w	r3, r3, #16
 8006a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e4      	bne.n	8006a3c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fd f916 	bl	8003ca8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f8ea 	bl	8006c70 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006a9c:	e0d5      	b.n	8006c4a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006aa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	f040 80ce 	bne.w	8006c4a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	f040 80c5 	bne.w	8006c4a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f8ce 	bl	8006c70 <HAL_UARTEx_RxEventCallback>
      return;
 8006ad4:	e0b9      	b.n	8006c4a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 80ab 	beq.w	8006c4e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 80a6 	beq.w	8006c4e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e4      	bne.n	8006b02 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	623b      	str	r3, [r7, #32]
   return(result);
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	f023 0301 	bic.w	r3, r3, #1
 8006b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3308      	adds	r3, #8
 8006b58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e3      	bne.n	8006b38 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f023 0310 	bic.w	r3, r3, #16
 8006b98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006ba6:	61fb      	str	r3, [r7, #28]
 8006ba8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	69b9      	ldr	r1, [r7, #24]
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	617b      	str	r3, [r7, #20]
   return(result);
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e4      	bne.n	8006b84 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f852 	bl	8006c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bcc:	e03f      	b.n	8006c4e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00e      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x5a8>
 8006bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d008      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006bee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 ffd2 	bl	8007b9a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bf6:	e02d      	b.n	8006c54 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00e      	beq.n	8006c22 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d008      	beq.n	8006c22 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d01c      	beq.n	8006c52 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	4798      	blx	r3
    }
    return;
 8006c20:	e017      	b.n	8006c52 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d012      	beq.n	8006c54 <HAL_UART_IRQHandler+0x604>
 8006c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00c      	beq.n	8006c54 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 ff83 	bl	8007b46 <UART_EndTransmit_IT>
    return;
 8006c40:	e008      	b.n	8006c54 <HAL_UART_IRQHandler+0x604>
      return;
 8006c42:	bf00      	nop
 8006c44:	e006      	b.n	8006c54 <HAL_UART_IRQHandler+0x604>
    return;
 8006c46:	bf00      	nop
 8006c48:	e004      	b.n	8006c54 <HAL_UART_IRQHandler+0x604>
      return;
 8006c4a:	bf00      	nop
 8006c4c:	e002      	b.n	8006c54 <HAL_UART_IRQHandler+0x604>
      return;
 8006c4e:	bf00      	nop
 8006c50:	e000      	b.n	8006c54 <HAL_UART_IRQHandler+0x604>
    return;
 8006c52:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006c54:	37e8      	adds	r7, #232	@ 0xe8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop

08006c5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c8c:	b08a      	sub	sp, #40	@ 0x28
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	4ba4      	ldr	r3, [pc, #656]	@ (8006f48 <UART_SetConfig+0x2c0>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	6812      	ldr	r2, [r2, #0]
 8006cbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a99      	ldr	r2, [pc, #612]	@ (8006f4c <UART_SetConfig+0x2c4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d004      	beq.n	8006cf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d04:	430a      	orrs	r2, r1
 8006d06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a90      	ldr	r2, [pc, #576]	@ (8006f50 <UART_SetConfig+0x2c8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d126      	bne.n	8006d60 <UART_SetConfig+0xd8>
 8006d12:	4b90      	ldr	r3, [pc, #576]	@ (8006f54 <UART_SetConfig+0x2cc>)
 8006d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d81b      	bhi.n	8006d58 <UART_SetConfig+0xd0>
 8006d20:	a201      	add	r2, pc, #4	@ (adr r2, 8006d28 <UART_SetConfig+0xa0>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d49 	.word	0x08006d49
 8006d30:	08006d41 	.word	0x08006d41
 8006d34:	08006d51 	.word	0x08006d51
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d3e:	e116      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006d40:	2302      	movs	r3, #2
 8006d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d46:	e112      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006d48:	2304      	movs	r3, #4
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d4e:	e10e      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006d50:	2308      	movs	r3, #8
 8006d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d56:	e10a      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006d58:	2310      	movs	r3, #16
 8006d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d5e:	e106      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a7c      	ldr	r2, [pc, #496]	@ (8006f58 <UART_SetConfig+0x2d0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d138      	bne.n	8006ddc <UART_SetConfig+0x154>
 8006d6a:	4b7a      	ldr	r3, [pc, #488]	@ (8006f54 <UART_SetConfig+0x2cc>)
 8006d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d70:	f003 030c 	and.w	r3, r3, #12
 8006d74:	2b0c      	cmp	r3, #12
 8006d76:	d82d      	bhi.n	8006dd4 <UART_SetConfig+0x14c>
 8006d78:	a201      	add	r2, pc, #4	@ (adr r2, 8006d80 <UART_SetConfig+0xf8>)
 8006d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7e:	bf00      	nop
 8006d80:	08006db5 	.word	0x08006db5
 8006d84:	08006dd5 	.word	0x08006dd5
 8006d88:	08006dd5 	.word	0x08006dd5
 8006d8c:	08006dd5 	.word	0x08006dd5
 8006d90:	08006dc5 	.word	0x08006dc5
 8006d94:	08006dd5 	.word	0x08006dd5
 8006d98:	08006dd5 	.word	0x08006dd5
 8006d9c:	08006dd5 	.word	0x08006dd5
 8006da0:	08006dbd 	.word	0x08006dbd
 8006da4:	08006dd5 	.word	0x08006dd5
 8006da8:	08006dd5 	.word	0x08006dd5
 8006dac:	08006dd5 	.word	0x08006dd5
 8006db0:	08006dcd 	.word	0x08006dcd
 8006db4:	2300      	movs	r3, #0
 8006db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dba:	e0d8      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dc2:	e0d4      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dca:	e0d0      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006dcc:	2308      	movs	r3, #8
 8006dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dd2:	e0cc      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006dd4:	2310      	movs	r3, #16
 8006dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dda:	e0c8      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a5e      	ldr	r2, [pc, #376]	@ (8006f5c <UART_SetConfig+0x2d4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d125      	bne.n	8006e32 <UART_SetConfig+0x1aa>
 8006de6:	4b5b      	ldr	r3, [pc, #364]	@ (8006f54 <UART_SetConfig+0x2cc>)
 8006de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006df0:	2b30      	cmp	r3, #48	@ 0x30
 8006df2:	d016      	beq.n	8006e22 <UART_SetConfig+0x19a>
 8006df4:	2b30      	cmp	r3, #48	@ 0x30
 8006df6:	d818      	bhi.n	8006e2a <UART_SetConfig+0x1a2>
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	d00a      	beq.n	8006e12 <UART_SetConfig+0x18a>
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	d814      	bhi.n	8006e2a <UART_SetConfig+0x1a2>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <UART_SetConfig+0x182>
 8006e04:	2b10      	cmp	r3, #16
 8006e06:	d008      	beq.n	8006e1a <UART_SetConfig+0x192>
 8006e08:	e00f      	b.n	8006e2a <UART_SetConfig+0x1a2>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e10:	e0ad      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e12:	2302      	movs	r3, #2
 8006e14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e18:	e0a9      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e1a:	2304      	movs	r3, #4
 8006e1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e20:	e0a5      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e22:	2308      	movs	r3, #8
 8006e24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e28:	e0a1      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e2a:	2310      	movs	r3, #16
 8006e2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e30:	e09d      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a4a      	ldr	r2, [pc, #296]	@ (8006f60 <UART_SetConfig+0x2d8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d125      	bne.n	8006e88 <UART_SetConfig+0x200>
 8006e3c:	4b45      	ldr	r3, [pc, #276]	@ (8006f54 <UART_SetConfig+0x2cc>)
 8006e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006e46:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e48:	d016      	beq.n	8006e78 <UART_SetConfig+0x1f0>
 8006e4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e4c:	d818      	bhi.n	8006e80 <UART_SetConfig+0x1f8>
 8006e4e:	2b80      	cmp	r3, #128	@ 0x80
 8006e50:	d00a      	beq.n	8006e68 <UART_SetConfig+0x1e0>
 8006e52:	2b80      	cmp	r3, #128	@ 0x80
 8006e54:	d814      	bhi.n	8006e80 <UART_SetConfig+0x1f8>
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <UART_SetConfig+0x1d8>
 8006e5a:	2b40      	cmp	r3, #64	@ 0x40
 8006e5c:	d008      	beq.n	8006e70 <UART_SetConfig+0x1e8>
 8006e5e:	e00f      	b.n	8006e80 <UART_SetConfig+0x1f8>
 8006e60:	2300      	movs	r3, #0
 8006e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e66:	e082      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e6e:	e07e      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e70:	2304      	movs	r3, #4
 8006e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e76:	e07a      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e78:	2308      	movs	r3, #8
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e7e:	e076      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e80:	2310      	movs	r3, #16
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e86:	e072      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a35      	ldr	r2, [pc, #212]	@ (8006f64 <UART_SetConfig+0x2dc>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d12a      	bne.n	8006ee8 <UART_SetConfig+0x260>
 8006e92:	4b30      	ldr	r3, [pc, #192]	@ (8006f54 <UART_SetConfig+0x2cc>)
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ea0:	d01a      	beq.n	8006ed8 <UART_SetConfig+0x250>
 8006ea2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ea6:	d81b      	bhi.n	8006ee0 <UART_SetConfig+0x258>
 8006ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eac:	d00c      	beq.n	8006ec8 <UART_SetConfig+0x240>
 8006eae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eb2:	d815      	bhi.n	8006ee0 <UART_SetConfig+0x258>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <UART_SetConfig+0x238>
 8006eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ebc:	d008      	beq.n	8006ed0 <UART_SetConfig+0x248>
 8006ebe:	e00f      	b.n	8006ee0 <UART_SetConfig+0x258>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ec6:	e052      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ece:	e04e      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ed6:	e04a      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006ed8:	2308      	movs	r3, #8
 8006eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ede:	e046      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ee6:	e042      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a17      	ldr	r2, [pc, #92]	@ (8006f4c <UART_SetConfig+0x2c4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d13a      	bne.n	8006f68 <UART_SetConfig+0x2e0>
 8006ef2:	4b18      	ldr	r3, [pc, #96]	@ (8006f54 <UART_SetConfig+0x2cc>)
 8006ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006efc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f00:	d01a      	beq.n	8006f38 <UART_SetConfig+0x2b0>
 8006f02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f06:	d81b      	bhi.n	8006f40 <UART_SetConfig+0x2b8>
 8006f08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f0c:	d00c      	beq.n	8006f28 <UART_SetConfig+0x2a0>
 8006f0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f12:	d815      	bhi.n	8006f40 <UART_SetConfig+0x2b8>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <UART_SetConfig+0x298>
 8006f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f1c:	d008      	beq.n	8006f30 <UART_SetConfig+0x2a8>
 8006f1e:	e00f      	b.n	8006f40 <UART_SetConfig+0x2b8>
 8006f20:	2300      	movs	r3, #0
 8006f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f26:	e022      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f2e:	e01e      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006f30:	2304      	movs	r3, #4
 8006f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f36:	e01a      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006f38:	2308      	movs	r3, #8
 8006f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f3e:	e016      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006f40:	2310      	movs	r3, #16
 8006f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f46:	e012      	b.n	8006f6e <UART_SetConfig+0x2e6>
 8006f48:	efff69f3 	.word	0xefff69f3
 8006f4c:	40008000 	.word	0x40008000
 8006f50:	40013800 	.word	0x40013800
 8006f54:	40021000 	.word	0x40021000
 8006f58:	40004400 	.word	0x40004400
 8006f5c:	40004800 	.word	0x40004800
 8006f60:	40004c00 	.word	0x40004c00
 8006f64:	40005000 	.word	0x40005000
 8006f68:	2310      	movs	r3, #16
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a9f      	ldr	r2, [pc, #636]	@ (80071f0 <UART_SetConfig+0x568>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d17a      	bne.n	800706e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d824      	bhi.n	8006fca <UART_SetConfig+0x342>
 8006f80:	a201      	add	r2, pc, #4	@ (adr r2, 8006f88 <UART_SetConfig+0x300>)
 8006f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f86:	bf00      	nop
 8006f88:	08006fad 	.word	0x08006fad
 8006f8c:	08006fcb 	.word	0x08006fcb
 8006f90:	08006fb5 	.word	0x08006fb5
 8006f94:	08006fcb 	.word	0x08006fcb
 8006f98:	08006fbb 	.word	0x08006fbb
 8006f9c:	08006fcb 	.word	0x08006fcb
 8006fa0:	08006fcb 	.word	0x08006fcb
 8006fa4:	08006fcb 	.word	0x08006fcb
 8006fa8:	08006fc3 	.word	0x08006fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fac:	f7fd ff74 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 8006fb0:	61f8      	str	r0, [r7, #28]
        break;
 8006fb2:	e010      	b.n	8006fd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb4:	4b8f      	ldr	r3, [pc, #572]	@ (80071f4 <UART_SetConfig+0x56c>)
 8006fb6:	61fb      	str	r3, [r7, #28]
        break;
 8006fb8:	e00d      	b.n	8006fd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fba:	f7fd fed5 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8006fbe:	61f8      	str	r0, [r7, #28]
        break;
 8006fc0:	e009      	b.n	8006fd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fc6:	61fb      	str	r3, [r7, #28]
        break;
 8006fc8:	e005      	b.n	8006fd6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006fd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80fb 	beq.w	80071d4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	4413      	add	r3, r2
 8006fe8:	69fa      	ldr	r2, [r7, #28]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d305      	bcc.n	8006ffa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ff4:	69fa      	ldr	r2, [r7, #28]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d903      	bls.n	8007002 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007000:	e0e8      	b.n	80071d4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	2200      	movs	r2, #0
 8007006:	461c      	mov	r4, r3
 8007008:	4615      	mov	r5, r2
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	022b      	lsls	r3, r5, #8
 8007014:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007018:	0222      	lsls	r2, r4, #8
 800701a:	68f9      	ldr	r1, [r7, #12]
 800701c:	6849      	ldr	r1, [r1, #4]
 800701e:	0849      	lsrs	r1, r1, #1
 8007020:	2000      	movs	r0, #0
 8007022:	4688      	mov	r8, r1
 8007024:	4681      	mov	r9, r0
 8007026:	eb12 0a08 	adds.w	sl, r2, r8
 800702a:	eb43 0b09 	adc.w	fp, r3, r9
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	603b      	str	r3, [r7, #0]
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800703c:	4650      	mov	r0, sl
 800703e:	4659      	mov	r1, fp
 8007040:	f7f9 fdc2 	bl	8000bc8 <__aeabi_uldivmod>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4613      	mov	r3, r2
 800704a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007052:	d308      	bcc.n	8007066 <UART_SetConfig+0x3de>
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800705a:	d204      	bcs.n	8007066 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	60da      	str	r2, [r3, #12]
 8007064:	e0b6      	b.n	80071d4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800706c:	e0b2      	b.n	80071d4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007076:	d15e      	bne.n	8007136 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007078:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800707c:	2b08      	cmp	r3, #8
 800707e:	d828      	bhi.n	80070d2 <UART_SetConfig+0x44a>
 8007080:	a201      	add	r2, pc, #4	@ (adr r2, 8007088 <UART_SetConfig+0x400>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070ad 	.word	0x080070ad
 800708c:	080070b5 	.word	0x080070b5
 8007090:	080070bd 	.word	0x080070bd
 8007094:	080070d3 	.word	0x080070d3
 8007098:	080070c3 	.word	0x080070c3
 800709c:	080070d3 	.word	0x080070d3
 80070a0:	080070d3 	.word	0x080070d3
 80070a4:	080070d3 	.word	0x080070d3
 80070a8:	080070cb 	.word	0x080070cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070ac:	f7fd fef4 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 80070b0:	61f8      	str	r0, [r7, #28]
        break;
 80070b2:	e014      	b.n	80070de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070b4:	f7fd ff06 	bl	8004ec4 <HAL_RCC_GetPCLK2Freq>
 80070b8:	61f8      	str	r0, [r7, #28]
        break;
 80070ba:	e010      	b.n	80070de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070bc:	4b4d      	ldr	r3, [pc, #308]	@ (80071f4 <UART_SetConfig+0x56c>)
 80070be:	61fb      	str	r3, [r7, #28]
        break;
 80070c0:	e00d      	b.n	80070de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070c2:	f7fd fe51 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 80070c6:	61f8      	str	r0, [r7, #28]
        break;
 80070c8:	e009      	b.n	80070de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070ce:	61fb      	str	r3, [r7, #28]
        break;
 80070d0:	e005      	b.n	80070de <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80070dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d077      	beq.n	80071d4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	005a      	lsls	r2, r3, #1
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	441a      	add	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2b0f      	cmp	r3, #15
 80070fe:	d916      	bls.n	800712e <UART_SetConfig+0x4a6>
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007106:	d212      	bcs.n	800712e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f023 030f 	bic.w	r3, r3, #15
 8007110:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	085b      	lsrs	r3, r3, #1
 8007116:	b29b      	uxth	r3, r3
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	b29a      	uxth	r2, r3
 800711e:	8afb      	ldrh	r3, [r7, #22]
 8007120:	4313      	orrs	r3, r2
 8007122:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	8afa      	ldrh	r2, [r7, #22]
 800712a:	60da      	str	r2, [r3, #12]
 800712c:	e052      	b.n	80071d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007134:	e04e      	b.n	80071d4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007136:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800713a:	2b08      	cmp	r3, #8
 800713c:	d827      	bhi.n	800718e <UART_SetConfig+0x506>
 800713e:	a201      	add	r2, pc, #4	@ (adr r2, 8007144 <UART_SetConfig+0x4bc>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007169 	.word	0x08007169
 8007148:	08007171 	.word	0x08007171
 800714c:	08007179 	.word	0x08007179
 8007150:	0800718f 	.word	0x0800718f
 8007154:	0800717f 	.word	0x0800717f
 8007158:	0800718f 	.word	0x0800718f
 800715c:	0800718f 	.word	0x0800718f
 8007160:	0800718f 	.word	0x0800718f
 8007164:	08007187 	.word	0x08007187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007168:	f7fd fe96 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 800716c:	61f8      	str	r0, [r7, #28]
        break;
 800716e:	e014      	b.n	800719a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007170:	f7fd fea8 	bl	8004ec4 <HAL_RCC_GetPCLK2Freq>
 8007174:	61f8      	str	r0, [r7, #28]
        break;
 8007176:	e010      	b.n	800719a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007178:	4b1e      	ldr	r3, [pc, #120]	@ (80071f4 <UART_SetConfig+0x56c>)
 800717a:	61fb      	str	r3, [r7, #28]
        break;
 800717c:	e00d      	b.n	800719a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800717e:	f7fd fdf3 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8007182:	61f8      	str	r0, [r7, #28]
        break;
 8007184:	e009      	b.n	800719a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800718a:	61fb      	str	r3, [r7, #28]
        break;
 800718c:	e005      	b.n	800719a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007198:	bf00      	nop
    }

    if (pclk != 0U)
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d019      	beq.n	80071d4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	085a      	lsrs	r2, r3, #1
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	441a      	add	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	2b0f      	cmp	r3, #15
 80071b8:	d909      	bls.n	80071ce <UART_SetConfig+0x546>
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071c0:	d205      	bcs.n	80071ce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	60da      	str	r2, [r3, #12]
 80071cc:	e002      	b.n	80071d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80071e0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3728      	adds	r7, #40	@ 0x28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071ee:	bf00      	nop
 80071f0:	40008000 	.word	0x40008000
 80071f4:	00f42400 	.word	0x00f42400

080071f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007204:	f003 0308 	and.w	r3, r3, #8
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00a      	beq.n	8007222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00a      	beq.n	8007266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726a:	f003 0304 	and.w	r3, r3, #4
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00a      	beq.n	80072aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01a      	beq.n	800730e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072f6:	d10a      	bne.n	800730e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	605a      	str	r2, [r3, #4]
  }
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b098      	sub	sp, #96	@ 0x60
 8007340:	af02      	add	r7, sp, #8
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800734c:	f7fc fa76 	bl	800383c <HAL_GetTick>
 8007350:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b08      	cmp	r3, #8
 800735e:	d12e      	bne.n	80073be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007360:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007368:	2200      	movs	r2, #0
 800736a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f88c 	bl	800748c <UART_WaitOnFlagUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d021      	beq.n	80073be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800738a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800738e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007398:	647b      	str	r3, [r7, #68]	@ 0x44
 800739a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800739e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e6      	bne.n	800737a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e062      	b.n	8007484 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0304 	and.w	r3, r3, #4
 80073c8:	2b04      	cmp	r3, #4
 80073ca:	d149      	bne.n	8007460 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073d4:	2200      	movs	r2, #0
 80073d6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f856 	bl	800748c <UART_WaitOnFlagUntilTimeout>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d03c      	beq.n	8007460 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ee:	e853 3f00 	ldrex	r3, [r3]
 80073f2:	623b      	str	r3, [r7, #32]
   return(result);
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007404:	633b      	str	r3, [r7, #48]	@ 0x30
 8007406:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800740a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800740c:	e841 2300 	strex	r3, r2, [r1]
 8007410:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1e6      	bne.n	80073e6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3308      	adds	r3, #8
 800741e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	60fb      	str	r3, [r7, #12]
   return(result);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3308      	adds	r3, #8
 8007436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007438:	61fa      	str	r2, [r7, #28]
 800743a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	69b9      	ldr	r1, [r7, #24]
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	617b      	str	r3, [r7, #20]
   return(result);
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e5      	bne.n	8007418 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e011      	b.n	8007484 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2220      	movs	r2, #32
 8007464:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3758      	adds	r7, #88	@ 0x58
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	4613      	mov	r3, r2
 800749a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800749c:	e04f      	b.n	800753e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a4:	d04b      	beq.n	800753e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074a6:	f7fc f9c9 	bl	800383c <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d302      	bcc.n	80074bc <UART_WaitOnFlagUntilTimeout+0x30>
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e04e      	b.n	800755e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d037      	beq.n	800753e <UART_WaitOnFlagUntilTimeout+0xb2>
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b80      	cmp	r3, #128	@ 0x80
 80074d2:	d034      	beq.n	800753e <UART_WaitOnFlagUntilTimeout+0xb2>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b40      	cmp	r3, #64	@ 0x40
 80074d8:	d031      	beq.n	800753e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	f003 0308 	and.w	r3, r3, #8
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d110      	bne.n	800750a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2208      	movs	r2, #8
 80074ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 f8ff 	bl	80076f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2208      	movs	r2, #8
 80074fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e029      	b.n	800755e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007518:	d111      	bne.n	800753e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007522:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 f8e5 	bl	80076f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2220      	movs	r2, #32
 800752e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e00f      	b.n	800755e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69da      	ldr	r2, [r3, #28]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4013      	ands	r3, r2
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	429a      	cmp	r2, r3
 800754c:	bf0c      	ite	eq
 800754e:	2301      	moveq	r3, #1
 8007550:	2300      	movne	r3, #0
 8007552:	b2db      	uxtb	r3, r3
 8007554:	461a      	mov	r2, r3
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	429a      	cmp	r2, r3
 800755a:	d0a0      	beq.n	800749e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b096      	sub	sp, #88	@ 0x58
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	4613      	mov	r3, r2
 8007574:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	88fa      	ldrh	r2, [r7, #6]
 8007580:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2222      	movs	r2, #34	@ 0x22
 8007590:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007598:	2b00      	cmp	r3, #0
 800759a:	d028      	beq.n	80075ee <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075a0:	4a3e      	ldr	r2, [pc, #248]	@ (800769c <UART_Start_Receive_DMA+0x134>)
 80075a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075a8:	4a3d      	ldr	r2, [pc, #244]	@ (80076a0 <UART_Start_Receive_DMA+0x138>)
 80075aa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075b0:	4a3c      	ldr	r2, [pc, #240]	@ (80076a4 <UART_Start_Receive_DMA+0x13c>)
 80075b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075b8:	2200      	movs	r2, #0
 80075ba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3324      	adds	r3, #36	@ 0x24
 80075c6:	4619      	mov	r1, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075cc:	461a      	mov	r2, r3
 80075ce:	88fb      	ldrh	r3, [r7, #6]
 80075d0:	f7fc fb0a 	bl	8003be8 <HAL_DMA_Start_IT>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d009      	beq.n	80075ee <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2210      	movs	r2, #16
 80075de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2220      	movs	r2, #32
 80075e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e051      	b.n	8007692 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d018      	beq.n	8007628 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075fe:	e853 3f00 	ldrex	r3, [r3]
 8007602:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800760a:	657b      	str	r3, [r7, #84]	@ 0x54
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	461a      	mov	r2, r3
 8007612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007614:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007616:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007618:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800761a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800761c:	e841 2300 	strex	r3, r2, [r1]
 8007620:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1e6      	bne.n	80075f6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3308      	adds	r3, #8
 800762e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763a:	f043 0301 	orr.w	r3, r3, #1
 800763e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3308      	adds	r3, #8
 8007646:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007648:	637a      	str	r2, [r7, #52]	@ 0x34
 800764a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800764e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e5      	bne.n	8007628 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3308      	adds	r3, #8
 8007662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	613b      	str	r3, [r7, #16]
   return(result);
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3308      	adds	r3, #8
 800767a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800767c:	623a      	str	r2, [r7, #32]
 800767e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	69f9      	ldr	r1, [r7, #28]
 8007682:	6a3a      	ldr	r2, [r7, #32]
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	61bb      	str	r3, [r7, #24]
   return(result);
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e5      	bne.n	800765c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3758      	adds	r7, #88	@ 0x58
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	080077bd 	.word	0x080077bd
 80076a0:	080078e9 	.word	0x080078e9
 80076a4:	08007927 	.word	0x08007927

080076a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b089      	sub	sp, #36	@ 0x24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80076c4:	61fb      	str	r3, [r7, #28]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	61bb      	str	r3, [r7, #24]
 80076d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	6979      	ldr	r1, [r7, #20]
 80076d4:	69ba      	ldr	r2, [r7, #24]
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	613b      	str	r3, [r7, #16]
   return(result);
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e6      	bne.n	80076b0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2220      	movs	r2, #32
 80076e6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80076e8:	bf00      	nop
 80076ea:	3724      	adds	r7, #36	@ 0x24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b095      	sub	sp, #84	@ 0x54
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800770a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800771a:	643b      	str	r3, [r7, #64]	@ 0x40
 800771c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007720:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e6      	bne.n	80076fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3308      	adds	r3, #8
 8007734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	61fb      	str	r3, [r7, #28]
   return(result);
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	f023 0301 	bic.w	r3, r3, #1
 8007744:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3308      	adds	r3, #8
 800774c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800774e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007750:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007754:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800775c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e5      	bne.n	800772e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007766:	2b01      	cmp	r3, #1
 8007768:	d118      	bne.n	800779c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	60bb      	str	r3, [r7, #8]
   return(result);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	f023 0310 	bic.w	r3, r3, #16
 800777e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007788:	61bb      	str	r3, [r7, #24]
 800778a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	6979      	ldr	r1, [r7, #20]
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	613b      	str	r3, [r7, #16]
   return(result);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e6      	bne.n	800776a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2220      	movs	r2, #32
 80077a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80077b0:	bf00      	nop
 80077b2:	3754      	adds	r7, #84	@ 0x54
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b09c      	sub	sp, #112	@ 0x70
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d171      	bne.n	80078bc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80077d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077da:	2200      	movs	r2, #0
 80077dc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007800:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007804:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800780c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e6      	bne.n	80077e0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3308      	adds	r3, #8
 8007818:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007824:	f023 0301 	bic.w	r3, r3, #1
 8007828:	667b      	str	r3, [r7, #100]	@ 0x64
 800782a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3308      	adds	r3, #8
 8007830:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007832:	647a      	str	r2, [r7, #68]	@ 0x44
 8007834:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007838:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e5      	bne.n	8007812 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	623b      	str	r3, [r7, #32]
   return(result);
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800785c:	663b      	str	r3, [r7, #96]	@ 0x60
 800785e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007866:	633a      	str	r2, [r7, #48]	@ 0x30
 8007868:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800786c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e5      	bne.n	8007846 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800787a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800787c:	2220      	movs	r2, #32
 800787e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007886:	2b01      	cmp	r3, #1
 8007888:	d118      	bne.n	80078bc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	60fb      	str	r3, [r7, #12]
   return(result);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f023 0310 	bic.w	r3, r3, #16
 800789e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078a8:	61fb      	str	r3, [r7, #28]
 80078aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	69b9      	ldr	r1, [r7, #24]
 80078ae:	69fa      	ldr	r2, [r7, #28]
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	617b      	str	r3, [r7, #20]
   return(result);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e6      	bne.n	800788a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078be:	2200      	movs	r2, #0
 80078c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d107      	bne.n	80078da <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80078d0:	4619      	mov	r1, r3
 80078d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80078d4:	f7ff f9cc 	bl	8006c70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078d8:	e002      	b.n	80078e0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80078da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80078dc:	f7fa f968 	bl	8001bb0 <HAL_UART_RxCpltCallback>
}
 80078e0:	bf00      	nop
 80078e2:	3770      	adds	r7, #112	@ 0x70
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2201      	movs	r2, #1
 80078fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007900:	2b01      	cmp	r3, #1
 8007902:	d109      	bne.n	8007918 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800790a:	085b      	lsrs	r3, r3, #1
 800790c:	b29b      	uxth	r3, r3
 800790e:	4619      	mov	r1, r3
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f7ff f9ad 	bl	8006c70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007916:	e002      	b.n	800791e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7fa f925 	bl	8001b68 <HAL_UART_RxHalfCpltCallback>
}
 800791e:	bf00      	nop
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b086      	sub	sp, #24
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007932:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007938:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007940:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800794c:	2b80      	cmp	r3, #128	@ 0x80
 800794e:	d109      	bne.n	8007964 <UART_DMAError+0x3e>
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	2b21      	cmp	r3, #33	@ 0x21
 8007954:	d106      	bne.n	8007964 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2200      	movs	r2, #0
 800795a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800795e:	6978      	ldr	r0, [r7, #20]
 8007960:	f7ff fea2 	bl	80076a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800796e:	2b40      	cmp	r3, #64	@ 0x40
 8007970:	d109      	bne.n	8007986 <UART_DMAError+0x60>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2b22      	cmp	r3, #34	@ 0x22
 8007976:	d106      	bne.n	8007986 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2200      	movs	r2, #0
 800797c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007980:	6978      	ldr	r0, [r7, #20]
 8007982:	f7ff feb7 	bl	80076f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800798c:	f043 0210 	orr.w	r2, r3, #16
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007996:	6978      	ldr	r0, [r7, #20]
 8007998:	f7ff f960 	bl	8006c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800799c:	bf00      	nop
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f7ff f94a 	bl	8006c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079c8:	bf00      	nop
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b08f      	sub	sp, #60	@ 0x3c
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079dc:	2b21      	cmp	r3, #33	@ 0x21
 80079de:	d14c      	bne.n	8007a7a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d132      	bne.n	8007a52 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a0c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e6      	bne.n	80079ec <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3c:	61bb      	str	r3, [r7, #24]
 8007a3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6979      	ldr	r1, [r7, #20]
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	613b      	str	r3, [r7, #16]
   return(result);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e6      	bne.n	8007a1e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007a50:	e013      	b.n	8007a7a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a56:	781a      	ldrb	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007a7a:	bf00      	nop
 8007a7c:	373c      	adds	r7, #60	@ 0x3c
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b091      	sub	sp, #68	@ 0x44
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a92:	2b21      	cmp	r3, #33	@ 0x21
 8007a94:	d151      	bne.n	8007b3a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d132      	bne.n	8007b08 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aaa:	e853 3f00 	ldrex	r3, [r3]
 8007aae:	623b      	str	r3, [r7, #32]
   return(result);
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	461a      	mov	r2, r3
 8007abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ac2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ac8:	e841 2300 	strex	r3, r2, [r1]
 8007acc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e6      	bne.n	8007aa2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af2:	61fb      	str	r3, [r7, #28]
 8007af4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	69b9      	ldr	r1, [r7, #24]
 8007af8:	69fa      	ldr	r2, [r7, #28]
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	617b      	str	r3, [r7, #20]
   return(result);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e6      	bne.n	8007ad4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007b06:	e018      	b.n	8007b3a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b10:	881a      	ldrh	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b1a:	b292      	uxth	r2, r2
 8007b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b22:	1c9a      	adds	r2, r3, #2
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	3b01      	subs	r3, #1
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007b3a:	bf00      	nop
 8007b3c:	3744      	adds	r7, #68	@ 0x44
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b088      	sub	sp, #32
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	e853 3f00 	ldrex	r3, [r3]
 8007b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b62:	61fb      	str	r3, [r7, #28]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	61bb      	str	r3, [r7, #24]
 8007b6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b70:	6979      	ldr	r1, [r7, #20]
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	e841 2300 	strex	r3, r2, [r1]
 8007b78:	613b      	str	r3, [r7, #16]
   return(result);
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1e6      	bne.n	8007b4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2220      	movs	r2, #32
 8007b84:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7fa f839 	bl	8001c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b92:	bf00      	nop
 8007b94:	3720      	adds	r7, #32
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ba2:	bf00      	nop
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
	...

08007bb0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007bb4:	4904      	ldr	r1, [pc, #16]	@ (8007bc8 <MX_FATFS_Init+0x18>)
 8007bb6:	4805      	ldr	r0, [pc, #20]	@ (8007bcc <MX_FATFS_Init+0x1c>)
 8007bb8:	f000 fd72 	bl	80086a0 <FATFS_LinkDriver>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	4b03      	ldr	r3, [pc, #12]	@ (8007bd0 <MX_FATFS_Init+0x20>)
 8007bc2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007bc4:	bf00      	nop
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	20000af8 	.word	0x20000af8
 8007bcc:	20000018 	.word	0x20000018
 8007bd0:	20000af4 	.word	0x20000af4

08007bd4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 f9fd 	bl	8007fe0 <SD_disk_initialize>
 8007be6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 fad5 	bl	80081ac <SD_disk_status>
 8007c02:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	607a      	str	r2, [r7, #4]
 8007c16:	603b      	str	r3, [r7, #0]
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8007c1c:	7bf8      	ldrb	r0, [r7, #15]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	68b9      	ldr	r1, [r7, #8]
 8007c24:	f000 fad8 	bl	80081d8 <SD_disk_read>
 8007c28:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
 8007c3c:	603b      	str	r3, [r7, #0]
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8007c42:	7bf8      	ldrb	r0, [r7, #15]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	68b9      	ldr	r1, [r7, #8]
 8007c4a:	f000 fb2f 	bl	80082ac <SD_disk_write>
 8007c4e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	603a      	str	r2, [r7, #0]
 8007c62:	71fb      	strb	r3, [r7, #7]
 8007c64:	460b      	mov	r3, r1
 8007c66:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007c68:	79b9      	ldrb	r1, [r7, #6]
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 fba0 	bl	80083b4 <SD_disk_ioctl>
 8007c74:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8007c84:	2200      	movs	r2, #0
 8007c86:	2102      	movs	r1, #2
 8007c88:	4802      	ldr	r0, [pc, #8]	@ (8007c94 <SELECT+0x14>)
 8007c8a:	f7fc fb15 	bl	80042b8 <HAL_GPIO_WritePin>
}
 8007c8e:	bf00      	nop
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	48000400 	.word	0x48000400

08007c98 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	2102      	movs	r1, #2
 8007ca0:	4802      	ldr	r0, [pc, #8]	@ (8007cac <DESELECT+0x14>)
 8007ca2:	f7fc fb09 	bl	80042b8 <HAL_GPIO_WritePin>
}
 8007ca6:	bf00      	nop
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	48000400 	.word	0x48000400

08007cb0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8007cba:	bf00      	nop
 8007cbc:	4b08      	ldr	r3, [pc, #32]	@ (8007ce0 <SPI_TxByte+0x30>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d1f8      	bne.n	8007cbc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8007cca:	1df9      	adds	r1, r7, #7
 8007ccc:	2364      	movs	r3, #100	@ 0x64
 8007cce:	2201      	movs	r2, #1
 8007cd0:	4803      	ldr	r0, [pc, #12]	@ (8007ce0 <SPI_TxByte+0x30>)
 8007cd2:	f7fd fecc 	bl	8005a6e <HAL_SPI_Transmit>
}
 8007cd6:	bf00      	nop
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	200002dc 	.word	0x200002dc

08007ce4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8007cf0:	bf00      	nop
 8007cf2:	4b08      	ldr	r3, [pc, #32]	@ (8007d14 <SPI_TxBuffer+0x30>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d1f8      	bne.n	8007cf2 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8007d00:	887a      	ldrh	r2, [r7, #2]
 8007d02:	2364      	movs	r3, #100	@ 0x64
 8007d04:	6879      	ldr	r1, [r7, #4]
 8007d06:	4803      	ldr	r0, [pc, #12]	@ (8007d14 <SPI_TxBuffer+0x30>)
 8007d08:	f7fd feb1 	bl	8005a6e <HAL_SPI_Transmit>
}
 8007d0c:	bf00      	nop
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	200002dc 	.word	0x200002dc

08007d18 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8007d1e:	23ff      	movs	r3, #255	@ 0xff
 8007d20:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8007d22:	bf00      	nop
 8007d24:	4b09      	ldr	r3, [pc, #36]	@ (8007d4c <SPI_RxByte+0x34>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d1f8      	bne.n	8007d24 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8007d32:	1dba      	adds	r2, r7, #6
 8007d34:	1df9      	adds	r1, r7, #7
 8007d36:	2364      	movs	r3, #100	@ 0x64
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4803      	ldr	r0, [pc, #12]	@ (8007d4c <SPI_RxByte+0x34>)
 8007d3e:	f7fe f80c 	bl	8005d5a <HAL_SPI_TransmitReceive>
  return data;
 8007d42:	79bb      	ldrb	r3, [r7, #6]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	200002dc 	.word	0x200002dc

08007d50 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8007d58:	f7ff ffde 	bl	8007d18 <SPI_RxByte>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	461a      	mov	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	701a      	strb	r2, [r3, #0]
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8007d72:	4b0a      	ldr	r3, [pc, #40]	@ (8007d9c <SD_ReadyWait+0x30>)
 8007d74:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8007d78:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8007d7a:	f7ff ffcd 	bl	8007d18 <SPI_RxByte>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	2bff      	cmp	r3, #255	@ 0xff
 8007d86:	d003      	beq.n	8007d90 <SD_ReadyWait+0x24>
 8007d88:	4b04      	ldr	r3, [pc, #16]	@ (8007d9c <SD_ReadyWait+0x30>)
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1f4      	bne.n	8007d7a <SD_ReadyWait+0xe>
  return res;
 8007d90:	79fb      	ldrb	r3, [r7, #7]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20000afe 	.word	0x20000afe

08007da0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8007da6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8007daa:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8007dac:	f7ff ff74 	bl	8007c98 <DESELECT>
  for(int i = 0; i < 10; i++)
 8007db0:	2300      	movs	r3, #0
 8007db2:	60bb      	str	r3, [r7, #8]
 8007db4:	e005      	b.n	8007dc2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8007db6:	20ff      	movs	r0, #255	@ 0xff
 8007db8:	f7ff ff7a 	bl	8007cb0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	60bb      	str	r3, [r7, #8]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2b09      	cmp	r3, #9
 8007dc6:	ddf6      	ble.n	8007db6 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8007dc8:	f7ff ff5a 	bl	8007c80 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8007dcc:	2340      	movs	r3, #64	@ 0x40
 8007dce:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8007de0:	2395      	movs	r3, #149	@ 0x95
 8007de2:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8007de4:	463b      	mov	r3, r7
 8007de6:	2106      	movs	r1, #6
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff ff7b 	bl	8007ce4 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8007dee:	e002      	b.n	8007df6 <SD_PowerOn+0x56>
  {
    cnt--;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8007df6:	f7ff ff8f 	bl	8007d18 <SPI_RxByte>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d002      	beq.n	8007e06 <SD_PowerOn+0x66>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1f4      	bne.n	8007df0 <SD_PowerOn+0x50>
  }
  DESELECT();
 8007e06:	f7ff ff47 	bl	8007c98 <DESELECT>
  SPI_TxByte(0XFF);
 8007e0a:	20ff      	movs	r0, #255	@ 0xff
 8007e0c:	f7ff ff50 	bl	8007cb0 <SPI_TxByte>
  PowerFlag = 1;
 8007e10:	4b03      	ldr	r3, [pc, #12]	@ (8007e20 <SD_PowerOn+0x80>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	701a      	strb	r2, [r3, #0]
}
 8007e16:	bf00      	nop
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000b01 	.word	0x20000b01

08007e24 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8007e24:	b480      	push	{r7}
 8007e26:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8007e28:	4b03      	ldr	r3, [pc, #12]	@ (8007e38 <SD_PowerOff+0x14>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	701a      	strb	r2, [r3, #0]
}
 8007e2e:	bf00      	nop
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	20000b01 	.word	0x20000b01

08007e3c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
  return PowerFlag;
 8007e40:	4b03      	ldr	r3, [pc, #12]	@ (8007e50 <SD_CheckPower+0x14>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	20000b01 	.word	0x20000b01

08007e54 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8007e5e:	4b13      	ldr	r3, [pc, #76]	@ (8007eac <SD_RxDataBlock+0x58>)
 8007e60:	22c8      	movs	r2, #200	@ 0xc8
 8007e62:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8007e64:	f7ff ff58 	bl	8007d18 <SPI_RxByte>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
 8007e6e:	2bff      	cmp	r3, #255	@ 0xff
 8007e70:	d103      	bne.n	8007e7a <SD_RxDataBlock+0x26>
 8007e72:	4b0e      	ldr	r3, [pc, #56]	@ (8007eac <SD_RxDataBlock+0x58>)
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1f4      	bne.n	8007e64 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	2bfe      	cmp	r3, #254	@ 0xfe
 8007e7e:	d001      	beq.n	8007e84 <SD_RxDataBlock+0x30>
 8007e80:	2300      	movs	r3, #0
 8007e82:	e00f      	b.n	8007ea4 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	607a      	str	r2, [r7, #4]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff ff60 	bl	8007d50 <SPI_RxBytePtr>
  } while(len--);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	1e5a      	subs	r2, r3, #1
 8007e94:	603a      	str	r2, [r7, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1f4      	bne.n	8007e84 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8007e9a:	f7ff ff3d 	bl	8007d18 <SPI_RxByte>
  SPI_RxByte();
 8007e9e:	f7ff ff3b 	bl	8007d18 <SPI_RxByte>
  return TRUE;
 8007ea2:	2301      	movs	r3, #1
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	20000afc 	.word	0x20000afc

08007eb0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8007ec0:	f7ff ff54 	bl	8007d6c <SD_ReadyWait>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2bff      	cmp	r3, #255	@ 0xff
 8007ec8:	d001      	beq.n	8007ece <SD_TxDataBlock+0x1e>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e02f      	b.n	8007f2e <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7ff feed 	bl	8007cb0 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	2bfd      	cmp	r3, #253	@ 0xfd
 8007eda:	d020      	beq.n	8007f1e <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8007edc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7ff feff 	bl	8007ce4 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8007ee6:	f7ff ff17 	bl	8007d18 <SPI_RxByte>
    SPI_RxByte();
 8007eea:	f7ff ff15 	bl	8007d18 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8007eee:	e00b      	b.n	8007f08 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8007ef0:	f7ff ff12 	bl	8007d18 <SPI_RxByte>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	f003 031f 	and.w	r3, r3, #31
 8007efe:	2b05      	cmp	r3, #5
 8007f00:	d006      	beq.n	8007f10 <SD_TxDataBlock+0x60>
      i++;
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	3301      	adds	r3, #1
 8007f06:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	2b40      	cmp	r3, #64	@ 0x40
 8007f0c:	d9f0      	bls.n	8007ef0 <SD_TxDataBlock+0x40>
 8007f0e:	e000      	b.n	8007f12 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8007f10:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8007f12:	bf00      	nop
 8007f14:	f7ff ff00 	bl	8007d18 <SPI_RxByte>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0fa      	beq.n	8007f14 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	f003 031f 	and.w	r3, r3, #31
 8007f24:	2b05      	cmp	r3, #5
 8007f26:	d101      	bne.n	8007f2c <SD_TxDataBlock+0x7c>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e000      	b.n	8007f2e <SD_TxDataBlock+0x7e>

  return FALSE;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	6039      	str	r1, [r7, #0]
 8007f40:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8007f42:	f7ff ff13 	bl	8007d6c <SD_ReadyWait>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2bff      	cmp	r3, #255	@ 0xff
 8007f4a:	d001      	beq.n	8007f50 <SD_SendCmd+0x1a>
 8007f4c:	23ff      	movs	r3, #255	@ 0xff
 8007f4e:	e042      	b.n	8007fd6 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8007f50:	79fb      	ldrb	r3, [r7, #7]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff feac 	bl	8007cb0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	0e1b      	lsrs	r3, r3, #24
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7ff fea6 	bl	8007cb0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	0c1b      	lsrs	r3, r3, #16
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7ff fea0 	bl	8007cb0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	0a1b      	lsrs	r3, r3, #8
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff fe9a 	bl	8007cb0 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7ff fe95 	bl	8007cb0 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8007f86:	79fb      	ldrb	r3, [r7, #7]
 8007f88:	2b40      	cmp	r3, #64	@ 0x40
 8007f8a:	d102      	bne.n	8007f92 <SD_SendCmd+0x5c>
 8007f8c:	2395      	movs	r3, #149	@ 0x95
 8007f8e:	73fb      	strb	r3, [r7, #15]
 8007f90:	e007      	b.n	8007fa2 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	2b48      	cmp	r3, #72	@ 0x48
 8007f96:	d102      	bne.n	8007f9e <SD_SendCmd+0x68>
 8007f98:	2387      	movs	r3, #135	@ 0x87
 8007f9a:	73fb      	strb	r3, [r7, #15]
 8007f9c:	e001      	b.n	8007fa2 <SD_SendCmd+0x6c>
  else crc = 1;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7ff fe83 	bl	8007cb0 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	2b4c      	cmp	r3, #76	@ 0x4c
 8007fae:	d101      	bne.n	8007fb4 <SD_SendCmd+0x7e>
 8007fb0:	f7ff feb2 	bl	8007d18 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8007fb4:	230a      	movs	r3, #10
 8007fb6:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8007fb8:	f7ff feae 	bl	8007d18 <SPI_RxByte>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8007fc0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	da05      	bge.n	8007fd4 <SD_SendCmd+0x9e>
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	73bb      	strb	r3, [r7, #14]
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1f1      	bne.n	8007fb8 <SD_SendCmd+0x82>

  return res;
 8007fd4:	7b7b      	ldrb	r3, [r7, #13]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8007fe0:	b590      	push	{r4, r7, lr}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <SD_disk_initialize+0x14>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e0d1      	b.n	8008198 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8007ff4:	4b6a      	ldr	r3, [pc, #424]	@ (80081a0 <SD_disk_initialize+0x1c0>)
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <SD_disk_initialize+0x2a>
 8008002:	4b67      	ldr	r3, [pc, #412]	@ (80081a0 <SD_disk_initialize+0x1c0>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	e0c6      	b.n	8008198 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800800a:	f7ff fec9 	bl	8007da0 <SD_PowerOn>
  /* slave select */
  SELECT();
 800800e:	f7ff fe37 	bl	8007c80 <SELECT>
  /* check disk type */
  type = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8008016:	2100      	movs	r1, #0
 8008018:	2040      	movs	r0, #64	@ 0x40
 800801a:	f7ff ff8c 	bl	8007f36 <SD_SendCmd>
 800801e:	4603      	mov	r3, r0
 8008020:	2b01      	cmp	r3, #1
 8008022:	f040 80a1 	bne.w	8008168 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8008026:	4b5f      	ldr	r3, [pc, #380]	@ (80081a4 <SD_disk_initialize+0x1c4>)
 8008028:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800802c:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800802e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8008032:	2048      	movs	r0, #72	@ 0x48
 8008034:	f7ff ff7f 	bl	8007f36 <SD_SendCmd>
 8008038:	4603      	mov	r3, r0
 800803a:	2b01      	cmp	r3, #1
 800803c:	d155      	bne.n	80080ea <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]
 8008042:	e00c      	b.n	800805e <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8008044:	7bfc      	ldrb	r4, [r7, #15]
 8008046:	f7ff fe67 	bl	8007d18 <SPI_RxByte>
 800804a:	4603      	mov	r3, r0
 800804c:	461a      	mov	r2, r3
 800804e:	f104 0310 	add.w	r3, r4, #16
 8008052:	443b      	add	r3, r7
 8008054:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	3301      	adds	r3, #1
 800805c:	73fb      	strb	r3, [r7, #15]
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	2b03      	cmp	r3, #3
 8008062:	d9ef      	bls.n	8008044 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8008064:	7abb      	ldrb	r3, [r7, #10]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d17e      	bne.n	8008168 <SD_disk_initialize+0x188>
 800806a:	7afb      	ldrb	r3, [r7, #11]
 800806c:	2baa      	cmp	r3, #170	@ 0xaa
 800806e:	d17b      	bne.n	8008168 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8008070:	2100      	movs	r1, #0
 8008072:	2077      	movs	r0, #119	@ 0x77
 8008074:	f7ff ff5f 	bl	8007f36 <SD_SendCmd>
 8008078:	4603      	mov	r3, r0
 800807a:	2b01      	cmp	r3, #1
 800807c:	d807      	bhi.n	800808e <SD_disk_initialize+0xae>
 800807e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008082:	2069      	movs	r0, #105	@ 0x69
 8008084:	f7ff ff57 	bl	8007f36 <SD_SendCmd>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d004      	beq.n	8008098 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800808e:	4b45      	ldr	r3, [pc, #276]	@ (80081a4 <SD_disk_initialize+0x1c4>)
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1ec      	bne.n	8008070 <SD_disk_initialize+0x90>
 8008096:	e000      	b.n	800809a <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8008098:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800809a:	4b42      	ldr	r3, [pc, #264]	@ (80081a4 <SD_disk_initialize+0x1c4>)
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d062      	beq.n	8008168 <SD_disk_initialize+0x188>
 80080a2:	2100      	movs	r1, #0
 80080a4:	207a      	movs	r0, #122	@ 0x7a
 80080a6:	f7ff ff46 	bl	8007f36 <SD_SendCmd>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d15b      	bne.n	8008168 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80080b0:	2300      	movs	r3, #0
 80080b2:	73fb      	strb	r3, [r7, #15]
 80080b4:	e00c      	b.n	80080d0 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80080b6:	7bfc      	ldrb	r4, [r7, #15]
 80080b8:	f7ff fe2e 	bl	8007d18 <SPI_RxByte>
 80080bc:	4603      	mov	r3, r0
 80080be:	461a      	mov	r2, r3
 80080c0:	f104 0310 	add.w	r3, r4, #16
 80080c4:	443b      	add	r3, r7
 80080c6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	3301      	adds	r3, #1
 80080ce:	73fb      	strb	r3, [r7, #15]
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d9ef      	bls.n	80080b6 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80080d6:	7a3b      	ldrb	r3, [r7, #8]
 80080d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <SD_disk_initialize+0x104>
 80080e0:	230c      	movs	r3, #12
 80080e2:	e000      	b.n	80080e6 <SD_disk_initialize+0x106>
 80080e4:	2304      	movs	r3, #4
 80080e6:	73bb      	strb	r3, [r7, #14]
 80080e8:	e03e      	b.n	8008168 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80080ea:	2100      	movs	r1, #0
 80080ec:	2077      	movs	r0, #119	@ 0x77
 80080ee:	f7ff ff22 	bl	8007f36 <SD_SendCmd>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d808      	bhi.n	800810a <SD_disk_initialize+0x12a>
 80080f8:	2100      	movs	r1, #0
 80080fa:	2069      	movs	r0, #105	@ 0x69
 80080fc:	f7ff ff1b 	bl	8007f36 <SD_SendCmd>
 8008100:	4603      	mov	r3, r0
 8008102:	2b01      	cmp	r3, #1
 8008104:	d801      	bhi.n	800810a <SD_disk_initialize+0x12a>
 8008106:	2302      	movs	r3, #2
 8008108:	e000      	b.n	800810c <SD_disk_initialize+0x12c>
 800810a:	2301      	movs	r3, #1
 800810c:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	2b02      	cmp	r3, #2
 8008112:	d10e      	bne.n	8008132 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8008114:	2100      	movs	r1, #0
 8008116:	2077      	movs	r0, #119	@ 0x77
 8008118:	f7ff ff0d 	bl	8007f36 <SD_SendCmd>
 800811c:	4603      	mov	r3, r0
 800811e:	2b01      	cmp	r3, #1
 8008120:	d80e      	bhi.n	8008140 <SD_disk_initialize+0x160>
 8008122:	2100      	movs	r1, #0
 8008124:	2069      	movs	r0, #105	@ 0x69
 8008126:	f7ff ff06 	bl	8007f36 <SD_SendCmd>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d107      	bne.n	8008140 <SD_disk_initialize+0x160>
 8008130:	e00c      	b.n	800814c <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8008132:	2100      	movs	r1, #0
 8008134:	2041      	movs	r0, #65	@ 0x41
 8008136:	f7ff fefe 	bl	8007f36 <SD_SendCmd>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d004      	beq.n	800814a <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8008140:	4b18      	ldr	r3, [pc, #96]	@ (80081a4 <SD_disk_initialize+0x1c4>)
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e2      	bne.n	800810e <SD_disk_initialize+0x12e>
 8008148:	e000      	b.n	800814c <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800814a:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800814c:	4b15      	ldr	r3, [pc, #84]	@ (80081a4 <SD_disk_initialize+0x1c4>)
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d007      	beq.n	8008164 <SD_disk_initialize+0x184>
 8008154:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008158:	2050      	movs	r0, #80	@ 0x50
 800815a:	f7ff feec 	bl	8007f36 <SD_SendCmd>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <SD_disk_initialize+0x188>
 8008164:	2300      	movs	r3, #0
 8008166:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8008168:	4a0f      	ldr	r2, [pc, #60]	@ (80081a8 <SD_disk_initialize+0x1c8>)
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800816e:	f7ff fd93 	bl	8007c98 <DESELECT>
  SPI_RxByte();
 8008172:	f7ff fdd1 	bl	8007d18 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d008      	beq.n	800818e <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800817c:	4b08      	ldr	r3, [pc, #32]	@ (80081a0 <SD_disk_initialize+0x1c0>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	f023 0301 	bic.w	r3, r3, #1
 8008186:	b2da      	uxtb	r2, r3
 8008188:	4b05      	ldr	r3, [pc, #20]	@ (80081a0 <SD_disk_initialize+0x1c0>)
 800818a:	701a      	strb	r2, [r3, #0]
 800818c:	e001      	b.n	8008192 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800818e:	f7ff fe49 	bl	8007e24 <SD_PowerOff>
  }
  return Stat;
 8008192:	4b03      	ldr	r3, [pc, #12]	@ (80081a0 <SD_disk_initialize+0x1c0>)
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	b2db      	uxtb	r3, r3
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	bd90      	pop	{r4, r7, pc}
 80081a0:	2000002c 	.word	0x2000002c
 80081a4:	20000afc 	.word	0x20000afc
 80081a8:	20000b00 	.word	0x20000b00

080081ac <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	4603      	mov	r3, r0
 80081b4:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80081b6:	79fb      	ldrb	r3, [r7, #7]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <SD_disk_status+0x14>
 80081bc:	2301      	movs	r3, #1
 80081be:	e002      	b.n	80081c6 <SD_disk_status+0x1a>
  return Stat;
 80081c0:	4b04      	ldr	r3, [pc, #16]	@ (80081d4 <SD_disk_status+0x28>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	b2db      	uxtb	r3, r3
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	2000002c 	.word	0x2000002c

080081d8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	607a      	str	r2, [r7, #4]
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	4603      	mov	r3, r0
 80081e6:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d102      	bne.n	80081f4 <SD_disk_read+0x1c>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <SD_disk_read+0x20>
 80081f4:	2304      	movs	r3, #4
 80081f6:	e051      	b.n	800829c <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80081f8:	4b2a      	ldr	r3, [pc, #168]	@ (80082a4 <SD_disk_read+0xcc>)
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <SD_disk_read+0x32>
 8008206:	2303      	movs	r3, #3
 8008208:	e048      	b.n	800829c <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800820a:	4b27      	ldr	r3, [pc, #156]	@ (80082a8 <SD_disk_read+0xd0>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	f003 0304 	and.w	r3, r3, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	d102      	bne.n	800821c <SD_disk_read+0x44>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	025b      	lsls	r3, r3, #9
 800821a:	607b      	str	r3, [r7, #4]

  SELECT();
 800821c:	f7ff fd30 	bl	8007c80 <SELECT>

  if (count == 1)
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d111      	bne.n	800824a <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	2051      	movs	r0, #81	@ 0x51
 800822a:	f7ff fe84 	bl	8007f36 <SD_SendCmd>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d129      	bne.n	8008288 <SD_disk_read+0xb0>
 8008234:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008238:	68b8      	ldr	r0, [r7, #8]
 800823a:	f7ff fe0b 	bl	8007e54 <SD_RxDataBlock>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d021      	beq.n	8008288 <SD_disk_read+0xb0>
 8008244:	2300      	movs	r3, #0
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	e01e      	b.n	8008288 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800824a:	6879      	ldr	r1, [r7, #4]
 800824c:	2052      	movs	r0, #82	@ 0x52
 800824e:	f7ff fe72 	bl	8007f36 <SD_SendCmd>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d117      	bne.n	8008288 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8008258:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800825c:	68b8      	ldr	r0, [r7, #8]
 800825e:	f7ff fdf9 	bl	8007e54 <SD_RxDataBlock>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00a      	beq.n	800827e <SD_disk_read+0xa6>
        buff += 512;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800826e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	3b01      	subs	r3, #1
 8008274:	603b      	str	r3, [r7, #0]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1ed      	bne.n	8008258 <SD_disk_read+0x80>
 800827c:	e000      	b.n	8008280 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800827e:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8008280:	2100      	movs	r1, #0
 8008282:	204c      	movs	r0, #76	@ 0x4c
 8008284:	f7ff fe57 	bl	8007f36 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8008288:	f7ff fd06 	bl	8007c98 <DESELECT>
  SPI_RxByte();
 800828c:	f7ff fd44 	bl	8007d18 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	bf14      	ite	ne
 8008296:	2301      	movne	r3, #1
 8008298:	2300      	moveq	r3, #0
 800829a:	b2db      	uxtb	r3, r3
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	2000002c 	.word	0x2000002c
 80082a8:	20000b00 	.word	0x20000b00

080082ac <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	607a      	str	r2, [r7, #4]
 80082b6:	603b      	str	r3, [r7, #0]
 80082b8:	4603      	mov	r3, r0
 80082ba:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d102      	bne.n	80082c8 <SD_disk_write+0x1c>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <SD_disk_write+0x20>
 80082c8:	2304      	movs	r3, #4
 80082ca:	e06b      	b.n	80083a4 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80082cc:	4b37      	ldr	r3, [pc, #220]	@ (80083ac <SD_disk_write+0x100>)
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <SD_disk_write+0x32>
 80082da:	2303      	movs	r3, #3
 80082dc:	e062      	b.n	80083a4 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80082de:	4b33      	ldr	r3, [pc, #204]	@ (80083ac <SD_disk_write+0x100>)
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f003 0304 	and.w	r3, r3, #4
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <SD_disk_write+0x44>
 80082ec:	2302      	movs	r3, #2
 80082ee:	e059      	b.n	80083a4 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80082f0:	4b2f      	ldr	r3, [pc, #188]	@ (80083b0 <SD_disk_write+0x104>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	f003 0304 	and.w	r3, r3, #4
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <SD_disk_write+0x56>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	025b      	lsls	r3, r3, #9
 8008300:	607b      	str	r3, [r7, #4]

  SELECT();
 8008302:	f7ff fcbd 	bl	8007c80 <SELECT>

  if (count == 1)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d110      	bne.n	800832e <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	2058      	movs	r0, #88	@ 0x58
 8008310:	f7ff fe11 	bl	8007f36 <SD_SendCmd>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d13a      	bne.n	8008390 <SD_disk_write+0xe4>
 800831a:	21fe      	movs	r1, #254	@ 0xfe
 800831c:	68b8      	ldr	r0, [r7, #8]
 800831e:	f7ff fdc7 	bl	8007eb0 <SD_TxDataBlock>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d033      	beq.n	8008390 <SD_disk_write+0xe4>
      count = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	e030      	b.n	8008390 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800832e:	4b20      	ldr	r3, [pc, #128]	@ (80083b0 <SD_disk_write+0x104>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b00      	cmp	r3, #0
 8008338:	d007      	beq.n	800834a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800833a:	2100      	movs	r1, #0
 800833c:	2077      	movs	r0, #119	@ 0x77
 800833e:	f7ff fdfa 	bl	8007f36 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	2057      	movs	r0, #87	@ 0x57
 8008346:	f7ff fdf6 	bl	8007f36 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	2059      	movs	r0, #89	@ 0x59
 800834e:	f7ff fdf2 	bl	8007f36 <SD_SendCmd>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d11b      	bne.n	8008390 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8008358:	21fc      	movs	r1, #252	@ 0xfc
 800835a:	68b8      	ldr	r0, [r7, #8]
 800835c:	f7ff fda8 	bl	8007eb0 <SD_TxDataBlock>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00a      	beq.n	800837c <SD_disk_write+0xd0>
        buff += 512;
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800836c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	3b01      	subs	r3, #1
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1ee      	bne.n	8008358 <SD_disk_write+0xac>
 800837a:	e000      	b.n	800837e <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800837c:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800837e:	21fd      	movs	r1, #253	@ 0xfd
 8008380:	2000      	movs	r0, #0
 8008382:	f7ff fd95 	bl	8007eb0 <SD_TxDataBlock>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <SD_disk_write+0xe4>
      {
        count = 1;
 800838c:	2301      	movs	r3, #1
 800838e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8008390:	f7ff fc82 	bl	8007c98 <DESELECT>
  SPI_RxByte();
 8008394:	f7ff fcc0 	bl	8007d18 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	bf14      	ite	ne
 800839e:	2301      	movne	r3, #1
 80083a0:	2300      	moveq	r3, #0
 80083a2:	b2db      	uxtb	r3, r3
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	2000002c 	.word	0x2000002c
 80083b0:	20000b00 	.word	0x20000b00

080083b4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80083b4:	b590      	push	{r4, r7, lr}
 80083b6:	b08b      	sub	sp, #44	@ 0x2c
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	603a      	str	r2, [r7, #0]
 80083be:	71fb      	strb	r3, [r7, #7]
 80083c0:	460b      	mov	r3, r1
 80083c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <SD_disk_ioctl+0x1e>
 80083ce:	2304      	movs	r3, #4
 80083d0:	e113      	b.n	80085fa <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80083d8:	79bb      	ldrb	r3, [r7, #6]
 80083da:	2b05      	cmp	r3, #5
 80083dc:	d124      	bne.n	8008428 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d012      	beq.n	800840c <SD_disk_ioctl+0x58>
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	dc1a      	bgt.n	8008420 <SD_disk_ioctl+0x6c>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <SD_disk_ioctl+0x40>
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d006      	beq.n	8008400 <SD_disk_ioctl+0x4c>
 80083f2:	e015      	b.n	8008420 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80083f4:	f7ff fd16 	bl	8007e24 <SD_PowerOff>
      res = RES_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80083fe:	e0fa      	b.n	80085f6 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8008400:	f7ff fcce 	bl	8007da0 <SD_PowerOn>
      res = RES_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800840a:	e0f4      	b.n	80085f6 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	1c5c      	adds	r4, r3, #1
 8008410:	f7ff fd14 	bl	8007e3c <SD_CheckPower>
 8008414:	4603      	mov	r3, r0
 8008416:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8008418:	2300      	movs	r3, #0
 800841a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800841e:	e0ea      	b.n	80085f6 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8008420:	2304      	movs	r3, #4
 8008422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008426:	e0e6      	b.n	80085f6 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8008428:	4b76      	ldr	r3, [pc, #472]	@ (8008604 <SD_disk_ioctl+0x250>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 8008436:	2303      	movs	r3, #3
 8008438:	e0df      	b.n	80085fa <SD_disk_ioctl+0x246>
    }
    SELECT();
 800843a:	f7ff fc21 	bl	8007c80 <SELECT>
    switch (ctrl)
 800843e:	79bb      	ldrb	r3, [r7, #6]
 8008440:	2b0d      	cmp	r3, #13
 8008442:	f200 80c9 	bhi.w	80085d8 <SD_disk_ioctl+0x224>
 8008446:	a201      	add	r2, pc, #4	@ (adr r2, 800844c <SD_disk_ioctl+0x98>)
 8008448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844c:	08008543 	.word	0x08008543
 8008450:	08008485 	.word	0x08008485
 8008454:	08008533 	.word	0x08008533
 8008458:	080085d9 	.word	0x080085d9
 800845c:	080085d9 	.word	0x080085d9
 8008460:	080085d9 	.word	0x080085d9
 8008464:	080085d9 	.word	0x080085d9
 8008468:	080085d9 	.word	0x080085d9
 800846c:	080085d9 	.word	0x080085d9
 8008470:	080085d9 	.word	0x080085d9
 8008474:	080085d9 	.word	0x080085d9
 8008478:	08008555 	.word	0x08008555
 800847c:	08008579 	.word	0x08008579
 8008480:	0800859d 	.word	0x0800859d
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8008484:	2100      	movs	r1, #0
 8008486:	2049      	movs	r0, #73	@ 0x49
 8008488:	f7ff fd55 	bl	8007f36 <SD_SendCmd>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	f040 80a6 	bne.w	80085e0 <SD_disk_ioctl+0x22c>
 8008494:	f107 030c 	add.w	r3, r7, #12
 8008498:	2110      	movs	r1, #16
 800849a:	4618      	mov	r0, r3
 800849c:	f7ff fcda 	bl	8007e54 <SD_RxDataBlock>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 809c 	beq.w	80085e0 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 80084a8:	7b3b      	ldrb	r3, [r7, #12]
 80084aa:	099b      	lsrs	r3, r3, #6
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d10d      	bne.n	80084ce <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80084b2:	7d7b      	ldrb	r3, [r7, #21]
 80084b4:	461a      	mov	r2, r3
 80084b6:	7d3b      	ldrb	r3, [r7, #20]
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	4413      	add	r3, r2
 80084be:	b29b      	uxth	r3, r3
 80084c0:	3301      	adds	r3, #1
 80084c2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80084c4:	8bfb      	ldrh	r3, [r7, #30]
 80084c6:	029a      	lsls	r2, r3, #10
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	601a      	str	r2, [r3, #0]
 80084cc:	e02d      	b.n	800852a <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80084ce:	7c7b      	ldrb	r3, [r7, #17]
 80084d0:	f003 030f 	and.w	r3, r3, #15
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	7dbb      	ldrb	r3, [r7, #22]
 80084d8:	09db      	lsrs	r3, r3, #7
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	4413      	add	r3, r2
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	7d7b      	ldrb	r3, [r7, #21]
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	f003 0306 	and.w	r3, r3, #6
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	4413      	add	r3, r2
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	3302      	adds	r3, #2
 80084f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80084f6:	7d3b      	ldrb	r3, [r7, #20]
 80084f8:	099b      	lsrs	r3, r3, #6
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	461a      	mov	r2, r3
 80084fe:	7cfb      	ldrb	r3, [r7, #19]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	b29b      	uxth	r3, r3
 8008504:	4413      	add	r3, r2
 8008506:	b29a      	uxth	r2, r3
 8008508:	7cbb      	ldrb	r3, [r7, #18]
 800850a:	029b      	lsls	r3, r3, #10
 800850c:	b29b      	uxth	r3, r3
 800850e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008512:	b29b      	uxth	r3, r3
 8008514:	4413      	add	r3, r2
 8008516:	b29b      	uxth	r3, r3
 8008518:	3301      	adds	r3, #1
 800851a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800851c:	8bfa      	ldrh	r2, [r7, #30]
 800851e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008522:	3b09      	subs	r3, #9
 8008524:	409a      	lsls	r2, r3
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8008530:	e056      	b.n	80085e0 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008538:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008540:	e055      	b.n	80085ee <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8008542:	f7ff fc13 	bl	8007d6c <SD_ReadyWait>
 8008546:	4603      	mov	r3, r0
 8008548:	2bff      	cmp	r3, #255	@ 0xff
 800854a:	d14b      	bne.n	80085e4 <SD_disk_ioctl+0x230>
 800854c:	2300      	movs	r3, #0
 800854e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008552:	e047      	b.n	80085e4 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8008554:	2100      	movs	r1, #0
 8008556:	2049      	movs	r0, #73	@ 0x49
 8008558:	f7ff fced 	bl	8007f36 <SD_SendCmd>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d142      	bne.n	80085e8 <SD_disk_ioctl+0x234>
 8008562:	2110      	movs	r1, #16
 8008564:	6a38      	ldr	r0, [r7, #32]
 8008566:	f7ff fc75 	bl	8007e54 <SD_RxDataBlock>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d03b      	beq.n	80085e8 <SD_disk_ioctl+0x234>
 8008570:	2300      	movs	r3, #0
 8008572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008576:	e037      	b.n	80085e8 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8008578:	2100      	movs	r1, #0
 800857a:	204a      	movs	r0, #74	@ 0x4a
 800857c:	f7ff fcdb 	bl	8007f36 <SD_SendCmd>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d132      	bne.n	80085ec <SD_disk_ioctl+0x238>
 8008586:	2110      	movs	r1, #16
 8008588:	6a38      	ldr	r0, [r7, #32]
 800858a:	f7ff fc63 	bl	8007e54 <SD_RxDataBlock>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d02b      	beq.n	80085ec <SD_disk_ioctl+0x238>
 8008594:	2300      	movs	r3, #0
 8008596:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800859a:	e027      	b.n	80085ec <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800859c:	2100      	movs	r1, #0
 800859e:	207a      	movs	r0, #122	@ 0x7a
 80085a0:	f7ff fcc9 	bl	8007f36 <SD_SendCmd>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d116      	bne.n	80085d8 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 80085aa:	2300      	movs	r3, #0
 80085ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80085b0:	e00b      	b.n	80085ca <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 80085b2:	6a3c      	ldr	r4, [r7, #32]
 80085b4:	1c63      	adds	r3, r4, #1
 80085b6:	623b      	str	r3, [r7, #32]
 80085b8:	f7ff fbae 	bl	8007d18 <SPI_RxByte>
 80085bc:	4603      	mov	r3, r0
 80085be:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80085c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085c4:	3301      	adds	r3, #1
 80085c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80085ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d9ef      	bls.n	80085b2 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 80085d8:	2304      	movs	r3, #4
 80085da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80085de:	e006      	b.n	80085ee <SD_disk_ioctl+0x23a>
      break;
 80085e0:	bf00      	nop
 80085e2:	e004      	b.n	80085ee <SD_disk_ioctl+0x23a>
      break;
 80085e4:	bf00      	nop
 80085e6:	e002      	b.n	80085ee <SD_disk_ioctl+0x23a>
      break;
 80085e8:	bf00      	nop
 80085ea:	e000      	b.n	80085ee <SD_disk_ioctl+0x23a>
      break;
 80085ec:	bf00      	nop
    }
    DESELECT();
 80085ee:	f7ff fb53 	bl	8007c98 <DESELECT>
    SPI_RxByte();
 80085f2:	f7ff fb91 	bl	8007d18 <SPI_RxByte>
  }
  return res;
 80085f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	372c      	adds	r7, #44	@ 0x2c
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd90      	pop	{r4, r7, pc}
 8008602:	bf00      	nop
 8008604:	2000002c 	.word	0x2000002c

08008608 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	4613      	mov	r3, r2
 8008614:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008616:	2301      	movs	r3, #1
 8008618:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800861a:	2300      	movs	r3, #0
 800861c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800861e:	4b1f      	ldr	r3, [pc, #124]	@ (800869c <FATFS_LinkDriverEx+0x94>)
 8008620:	7a5b      	ldrb	r3, [r3, #9]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d131      	bne.n	800868c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008628:	4b1c      	ldr	r3, [pc, #112]	@ (800869c <FATFS_LinkDriverEx+0x94>)
 800862a:	7a5b      	ldrb	r3, [r3, #9]
 800862c:	b2db      	uxtb	r3, r3
 800862e:	461a      	mov	r2, r3
 8008630:	4b1a      	ldr	r3, [pc, #104]	@ (800869c <FATFS_LinkDriverEx+0x94>)
 8008632:	2100      	movs	r1, #0
 8008634:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008636:	4b19      	ldr	r3, [pc, #100]	@ (800869c <FATFS_LinkDriverEx+0x94>)
 8008638:	7a5b      	ldrb	r3, [r3, #9]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	4a17      	ldr	r2, [pc, #92]	@ (800869c <FATFS_LinkDriverEx+0x94>)
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008646:	4b15      	ldr	r3, [pc, #84]	@ (800869c <FATFS_LinkDriverEx+0x94>)
 8008648:	7a5b      	ldrb	r3, [r3, #9]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	461a      	mov	r2, r3
 800864e:	4b13      	ldr	r3, [pc, #76]	@ (800869c <FATFS_LinkDriverEx+0x94>)
 8008650:	4413      	add	r3, r2
 8008652:	79fa      	ldrb	r2, [r7, #7]
 8008654:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008656:	4b11      	ldr	r3, [pc, #68]	@ (800869c <FATFS_LinkDriverEx+0x94>)
 8008658:	7a5b      	ldrb	r3, [r3, #9]
 800865a:	b2db      	uxtb	r3, r3
 800865c:	1c5a      	adds	r2, r3, #1
 800865e:	b2d1      	uxtb	r1, r2
 8008660:	4a0e      	ldr	r2, [pc, #56]	@ (800869c <FATFS_LinkDriverEx+0x94>)
 8008662:	7251      	strb	r1, [r2, #9]
 8008664:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008666:	7dbb      	ldrb	r3, [r7, #22]
 8008668:	3330      	adds	r3, #48	@ 0x30
 800866a:	b2da      	uxtb	r2, r3
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	3301      	adds	r3, #1
 8008674:	223a      	movs	r2, #58	@ 0x3a
 8008676:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	3302      	adds	r3, #2
 800867c:	222f      	movs	r2, #47	@ 0x2f
 800867e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	3303      	adds	r3, #3
 8008684:	2200      	movs	r2, #0
 8008686:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008688:	2300      	movs	r3, #0
 800868a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800868c:	7dfb      	ldrb	r3, [r7, #23]
}
 800868e:	4618      	mov	r0, r3
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	20000b04 	.word	0x20000b04

080086a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80086aa:	2200      	movs	r2, #0
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7ff ffaa 	bl	8008608 <FATFS_LinkDriverEx>
 80086b4:	4603      	mov	r3, r0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
	...

080086c0 <exit>:
 80086c0:	b508      	push	{r3, lr}
 80086c2:	4b06      	ldr	r3, [pc, #24]	@ (80086dc <exit+0x1c>)
 80086c4:	4604      	mov	r4, r0
 80086c6:	b113      	cbz	r3, 80086ce <exit+0xe>
 80086c8:	2100      	movs	r1, #0
 80086ca:	f3af 8000 	nop.w
 80086ce:	4b04      	ldr	r3, [pc, #16]	@ (80086e0 <exit+0x20>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	b103      	cbz	r3, 80086d6 <exit+0x16>
 80086d4:	4798      	blx	r3
 80086d6:	4620      	mov	r0, r4
 80086d8:	f7fa ff5e 	bl	8003598 <_exit>
 80086dc:	00000000 	.word	0x00000000
 80086e0:	20000c50 	.word	0x20000c50

080086e4 <malloc>:
 80086e4:	4b02      	ldr	r3, [pc, #8]	@ (80086f0 <malloc+0xc>)
 80086e6:	4601      	mov	r1, r0
 80086e8:	6818      	ldr	r0, [r3, #0]
 80086ea:	f000 b82d 	b.w	8008748 <_malloc_r>
 80086ee:	bf00      	nop
 80086f0:	2000003c 	.word	0x2000003c

080086f4 <free>:
 80086f4:	4b02      	ldr	r3, [pc, #8]	@ (8008700 <free+0xc>)
 80086f6:	4601      	mov	r1, r0
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	f001 be55 	b.w	800a3a8 <_free_r>
 80086fe:	bf00      	nop
 8008700:	2000003c 	.word	0x2000003c

08008704 <sbrk_aligned>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	4e0f      	ldr	r6, [pc, #60]	@ (8008744 <sbrk_aligned+0x40>)
 8008708:	460c      	mov	r4, r1
 800870a:	6831      	ldr	r1, [r6, #0]
 800870c:	4605      	mov	r5, r0
 800870e:	b911      	cbnz	r1, 8008716 <sbrk_aligned+0x12>
 8008710:	f000 ff96 	bl	8009640 <_sbrk_r>
 8008714:	6030      	str	r0, [r6, #0]
 8008716:	4621      	mov	r1, r4
 8008718:	4628      	mov	r0, r5
 800871a:	f000 ff91 	bl	8009640 <_sbrk_r>
 800871e:	1c43      	adds	r3, r0, #1
 8008720:	d103      	bne.n	800872a <sbrk_aligned+0x26>
 8008722:	f04f 34ff 	mov.w	r4, #4294967295
 8008726:	4620      	mov	r0, r4
 8008728:	bd70      	pop	{r4, r5, r6, pc}
 800872a:	1cc4      	adds	r4, r0, #3
 800872c:	f024 0403 	bic.w	r4, r4, #3
 8008730:	42a0      	cmp	r0, r4
 8008732:	d0f8      	beq.n	8008726 <sbrk_aligned+0x22>
 8008734:	1a21      	subs	r1, r4, r0
 8008736:	4628      	mov	r0, r5
 8008738:	f000 ff82 	bl	8009640 <_sbrk_r>
 800873c:	3001      	adds	r0, #1
 800873e:	d1f2      	bne.n	8008726 <sbrk_aligned+0x22>
 8008740:	e7ef      	b.n	8008722 <sbrk_aligned+0x1e>
 8008742:	bf00      	nop
 8008744:	20000b10 	.word	0x20000b10

08008748 <_malloc_r>:
 8008748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800874c:	1ccd      	adds	r5, r1, #3
 800874e:	f025 0503 	bic.w	r5, r5, #3
 8008752:	3508      	adds	r5, #8
 8008754:	2d0c      	cmp	r5, #12
 8008756:	bf38      	it	cc
 8008758:	250c      	movcc	r5, #12
 800875a:	2d00      	cmp	r5, #0
 800875c:	4606      	mov	r6, r0
 800875e:	db01      	blt.n	8008764 <_malloc_r+0x1c>
 8008760:	42a9      	cmp	r1, r5
 8008762:	d904      	bls.n	800876e <_malloc_r+0x26>
 8008764:	230c      	movs	r3, #12
 8008766:	6033      	str	r3, [r6, #0]
 8008768:	2000      	movs	r0, #0
 800876a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800876e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008844 <_malloc_r+0xfc>
 8008772:	f000 f869 	bl	8008848 <__malloc_lock>
 8008776:	f8d8 3000 	ldr.w	r3, [r8]
 800877a:	461c      	mov	r4, r3
 800877c:	bb44      	cbnz	r4, 80087d0 <_malloc_r+0x88>
 800877e:	4629      	mov	r1, r5
 8008780:	4630      	mov	r0, r6
 8008782:	f7ff ffbf 	bl	8008704 <sbrk_aligned>
 8008786:	1c43      	adds	r3, r0, #1
 8008788:	4604      	mov	r4, r0
 800878a:	d158      	bne.n	800883e <_malloc_r+0xf6>
 800878c:	f8d8 4000 	ldr.w	r4, [r8]
 8008790:	4627      	mov	r7, r4
 8008792:	2f00      	cmp	r7, #0
 8008794:	d143      	bne.n	800881e <_malloc_r+0xd6>
 8008796:	2c00      	cmp	r4, #0
 8008798:	d04b      	beq.n	8008832 <_malloc_r+0xea>
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	4639      	mov	r1, r7
 800879e:	4630      	mov	r0, r6
 80087a0:	eb04 0903 	add.w	r9, r4, r3
 80087a4:	f000 ff4c 	bl	8009640 <_sbrk_r>
 80087a8:	4581      	cmp	r9, r0
 80087aa:	d142      	bne.n	8008832 <_malloc_r+0xea>
 80087ac:	6821      	ldr	r1, [r4, #0]
 80087ae:	1a6d      	subs	r5, r5, r1
 80087b0:	4629      	mov	r1, r5
 80087b2:	4630      	mov	r0, r6
 80087b4:	f7ff ffa6 	bl	8008704 <sbrk_aligned>
 80087b8:	3001      	adds	r0, #1
 80087ba:	d03a      	beq.n	8008832 <_malloc_r+0xea>
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	442b      	add	r3, r5
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	f8d8 3000 	ldr.w	r3, [r8]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	bb62      	cbnz	r2, 8008824 <_malloc_r+0xdc>
 80087ca:	f8c8 7000 	str.w	r7, [r8]
 80087ce:	e00f      	b.n	80087f0 <_malloc_r+0xa8>
 80087d0:	6822      	ldr	r2, [r4, #0]
 80087d2:	1b52      	subs	r2, r2, r5
 80087d4:	d420      	bmi.n	8008818 <_malloc_r+0xd0>
 80087d6:	2a0b      	cmp	r2, #11
 80087d8:	d917      	bls.n	800880a <_malloc_r+0xc2>
 80087da:	1961      	adds	r1, r4, r5
 80087dc:	42a3      	cmp	r3, r4
 80087de:	6025      	str	r5, [r4, #0]
 80087e0:	bf18      	it	ne
 80087e2:	6059      	strne	r1, [r3, #4]
 80087e4:	6863      	ldr	r3, [r4, #4]
 80087e6:	bf08      	it	eq
 80087e8:	f8c8 1000 	streq.w	r1, [r8]
 80087ec:	5162      	str	r2, [r4, r5]
 80087ee:	604b      	str	r3, [r1, #4]
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 f82f 	bl	8008854 <__malloc_unlock>
 80087f6:	f104 000b 	add.w	r0, r4, #11
 80087fa:	1d23      	adds	r3, r4, #4
 80087fc:	f020 0007 	bic.w	r0, r0, #7
 8008800:	1ac2      	subs	r2, r0, r3
 8008802:	bf1c      	itt	ne
 8008804:	1a1b      	subne	r3, r3, r0
 8008806:	50a3      	strne	r3, [r4, r2]
 8008808:	e7af      	b.n	800876a <_malloc_r+0x22>
 800880a:	6862      	ldr	r2, [r4, #4]
 800880c:	42a3      	cmp	r3, r4
 800880e:	bf0c      	ite	eq
 8008810:	f8c8 2000 	streq.w	r2, [r8]
 8008814:	605a      	strne	r2, [r3, #4]
 8008816:	e7eb      	b.n	80087f0 <_malloc_r+0xa8>
 8008818:	4623      	mov	r3, r4
 800881a:	6864      	ldr	r4, [r4, #4]
 800881c:	e7ae      	b.n	800877c <_malloc_r+0x34>
 800881e:	463c      	mov	r4, r7
 8008820:	687f      	ldr	r7, [r7, #4]
 8008822:	e7b6      	b.n	8008792 <_malloc_r+0x4a>
 8008824:	461a      	mov	r2, r3
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	42a3      	cmp	r3, r4
 800882a:	d1fb      	bne.n	8008824 <_malloc_r+0xdc>
 800882c:	2300      	movs	r3, #0
 800882e:	6053      	str	r3, [r2, #4]
 8008830:	e7de      	b.n	80087f0 <_malloc_r+0xa8>
 8008832:	230c      	movs	r3, #12
 8008834:	6033      	str	r3, [r6, #0]
 8008836:	4630      	mov	r0, r6
 8008838:	f000 f80c 	bl	8008854 <__malloc_unlock>
 800883c:	e794      	b.n	8008768 <_malloc_r+0x20>
 800883e:	6005      	str	r5, [r0, #0]
 8008840:	e7d6      	b.n	80087f0 <_malloc_r+0xa8>
 8008842:	bf00      	nop
 8008844:	20000b14 	.word	0x20000b14

08008848 <__malloc_lock>:
 8008848:	4801      	ldr	r0, [pc, #4]	@ (8008850 <__malloc_lock+0x8>)
 800884a:	f000 bf46 	b.w	80096da <__retarget_lock_acquire_recursive>
 800884e:	bf00      	nop
 8008850:	20000c58 	.word	0x20000c58

08008854 <__malloc_unlock>:
 8008854:	4801      	ldr	r0, [pc, #4]	@ (800885c <__malloc_unlock+0x8>)
 8008856:	f000 bf41 	b.w	80096dc <__retarget_lock_release_recursive>
 800885a:	bf00      	nop
 800885c:	20000c58 	.word	0x20000c58

08008860 <_strtol_l.constprop.0>:
 8008860:	2b24      	cmp	r3, #36	@ 0x24
 8008862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008866:	4686      	mov	lr, r0
 8008868:	4690      	mov	r8, r2
 800886a:	d801      	bhi.n	8008870 <_strtol_l.constprop.0+0x10>
 800886c:	2b01      	cmp	r3, #1
 800886e:	d106      	bne.n	800887e <_strtol_l.constprop.0+0x1e>
 8008870:	f000 ff08 	bl	8009684 <__errno>
 8008874:	2316      	movs	r3, #22
 8008876:	6003      	str	r3, [r0, #0]
 8008878:	2000      	movs	r0, #0
 800887a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887e:	4834      	ldr	r0, [pc, #208]	@ (8008950 <_strtol_l.constprop.0+0xf0>)
 8008880:	460d      	mov	r5, r1
 8008882:	462a      	mov	r2, r5
 8008884:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008888:	5d06      	ldrb	r6, [r0, r4]
 800888a:	f016 0608 	ands.w	r6, r6, #8
 800888e:	d1f8      	bne.n	8008882 <_strtol_l.constprop.0+0x22>
 8008890:	2c2d      	cmp	r4, #45	@ 0x2d
 8008892:	d12d      	bne.n	80088f0 <_strtol_l.constprop.0+0x90>
 8008894:	782c      	ldrb	r4, [r5, #0]
 8008896:	2601      	movs	r6, #1
 8008898:	1c95      	adds	r5, r2, #2
 800889a:	f033 0210 	bics.w	r2, r3, #16
 800889e:	d109      	bne.n	80088b4 <_strtol_l.constprop.0+0x54>
 80088a0:	2c30      	cmp	r4, #48	@ 0x30
 80088a2:	d12a      	bne.n	80088fa <_strtol_l.constprop.0+0x9a>
 80088a4:	782a      	ldrb	r2, [r5, #0]
 80088a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80088aa:	2a58      	cmp	r2, #88	@ 0x58
 80088ac:	d125      	bne.n	80088fa <_strtol_l.constprop.0+0x9a>
 80088ae:	786c      	ldrb	r4, [r5, #1]
 80088b0:	2310      	movs	r3, #16
 80088b2:	3502      	adds	r5, #2
 80088b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80088b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80088bc:	2200      	movs	r2, #0
 80088be:	fbbc f9f3 	udiv	r9, ip, r3
 80088c2:	4610      	mov	r0, r2
 80088c4:	fb03 ca19 	mls	sl, r3, r9, ip
 80088c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80088cc:	2f09      	cmp	r7, #9
 80088ce:	d81b      	bhi.n	8008908 <_strtol_l.constprop.0+0xa8>
 80088d0:	463c      	mov	r4, r7
 80088d2:	42a3      	cmp	r3, r4
 80088d4:	dd27      	ble.n	8008926 <_strtol_l.constprop.0+0xc6>
 80088d6:	1c57      	adds	r7, r2, #1
 80088d8:	d007      	beq.n	80088ea <_strtol_l.constprop.0+0x8a>
 80088da:	4581      	cmp	r9, r0
 80088dc:	d320      	bcc.n	8008920 <_strtol_l.constprop.0+0xc0>
 80088de:	d101      	bne.n	80088e4 <_strtol_l.constprop.0+0x84>
 80088e0:	45a2      	cmp	sl, r4
 80088e2:	db1d      	blt.n	8008920 <_strtol_l.constprop.0+0xc0>
 80088e4:	fb00 4003 	mla	r0, r0, r3, r4
 80088e8:	2201      	movs	r2, #1
 80088ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088ee:	e7eb      	b.n	80088c8 <_strtol_l.constprop.0+0x68>
 80088f0:	2c2b      	cmp	r4, #43	@ 0x2b
 80088f2:	bf04      	itt	eq
 80088f4:	782c      	ldrbeq	r4, [r5, #0]
 80088f6:	1c95      	addeq	r5, r2, #2
 80088f8:	e7cf      	b.n	800889a <_strtol_l.constprop.0+0x3a>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1da      	bne.n	80088b4 <_strtol_l.constprop.0+0x54>
 80088fe:	2c30      	cmp	r4, #48	@ 0x30
 8008900:	bf0c      	ite	eq
 8008902:	2308      	moveq	r3, #8
 8008904:	230a      	movne	r3, #10
 8008906:	e7d5      	b.n	80088b4 <_strtol_l.constprop.0+0x54>
 8008908:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800890c:	2f19      	cmp	r7, #25
 800890e:	d801      	bhi.n	8008914 <_strtol_l.constprop.0+0xb4>
 8008910:	3c37      	subs	r4, #55	@ 0x37
 8008912:	e7de      	b.n	80088d2 <_strtol_l.constprop.0+0x72>
 8008914:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008918:	2f19      	cmp	r7, #25
 800891a:	d804      	bhi.n	8008926 <_strtol_l.constprop.0+0xc6>
 800891c:	3c57      	subs	r4, #87	@ 0x57
 800891e:	e7d8      	b.n	80088d2 <_strtol_l.constprop.0+0x72>
 8008920:	f04f 32ff 	mov.w	r2, #4294967295
 8008924:	e7e1      	b.n	80088ea <_strtol_l.constprop.0+0x8a>
 8008926:	1c53      	adds	r3, r2, #1
 8008928:	d108      	bne.n	800893c <_strtol_l.constprop.0+0xdc>
 800892a:	2322      	movs	r3, #34	@ 0x22
 800892c:	f8ce 3000 	str.w	r3, [lr]
 8008930:	4660      	mov	r0, ip
 8008932:	f1b8 0f00 	cmp.w	r8, #0
 8008936:	d0a0      	beq.n	800887a <_strtol_l.constprop.0+0x1a>
 8008938:	1e69      	subs	r1, r5, #1
 800893a:	e006      	b.n	800894a <_strtol_l.constprop.0+0xea>
 800893c:	b106      	cbz	r6, 8008940 <_strtol_l.constprop.0+0xe0>
 800893e:	4240      	negs	r0, r0
 8008940:	f1b8 0f00 	cmp.w	r8, #0
 8008944:	d099      	beq.n	800887a <_strtol_l.constprop.0+0x1a>
 8008946:	2a00      	cmp	r2, #0
 8008948:	d1f6      	bne.n	8008938 <_strtol_l.constprop.0+0xd8>
 800894a:	f8c8 1000 	str.w	r1, [r8]
 800894e:	e794      	b.n	800887a <_strtol_l.constprop.0+0x1a>
 8008950:	0800baa5 	.word	0x0800baa5

08008954 <strtol>:
 8008954:	4613      	mov	r3, r2
 8008956:	460a      	mov	r2, r1
 8008958:	4601      	mov	r1, r0
 800895a:	4802      	ldr	r0, [pc, #8]	@ (8008964 <strtol+0x10>)
 800895c:	6800      	ldr	r0, [r0, #0]
 800895e:	f7ff bf7f 	b.w	8008860 <_strtol_l.constprop.0>
 8008962:	bf00      	nop
 8008964:	2000003c 	.word	0x2000003c

08008968 <__cvt>:
 8008968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800896c:	ec57 6b10 	vmov	r6, r7, d0
 8008970:	2f00      	cmp	r7, #0
 8008972:	460c      	mov	r4, r1
 8008974:	4619      	mov	r1, r3
 8008976:	463b      	mov	r3, r7
 8008978:	bfbb      	ittet	lt
 800897a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800897e:	461f      	movlt	r7, r3
 8008980:	2300      	movge	r3, #0
 8008982:	232d      	movlt	r3, #45	@ 0x2d
 8008984:	700b      	strb	r3, [r1, #0]
 8008986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008988:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800898c:	4691      	mov	r9, r2
 800898e:	f023 0820 	bic.w	r8, r3, #32
 8008992:	bfbc      	itt	lt
 8008994:	4632      	movlt	r2, r6
 8008996:	4616      	movlt	r6, r2
 8008998:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800899c:	d005      	beq.n	80089aa <__cvt+0x42>
 800899e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80089a2:	d100      	bne.n	80089a6 <__cvt+0x3e>
 80089a4:	3401      	adds	r4, #1
 80089a6:	2102      	movs	r1, #2
 80089a8:	e000      	b.n	80089ac <__cvt+0x44>
 80089aa:	2103      	movs	r1, #3
 80089ac:	ab03      	add	r3, sp, #12
 80089ae:	9301      	str	r3, [sp, #4]
 80089b0:	ab02      	add	r3, sp, #8
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	ec47 6b10 	vmov	d0, r6, r7
 80089b8:	4653      	mov	r3, sl
 80089ba:	4622      	mov	r2, r4
 80089bc:	f000 ff30 	bl	8009820 <_dtoa_r>
 80089c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80089c4:	4605      	mov	r5, r0
 80089c6:	d119      	bne.n	80089fc <__cvt+0x94>
 80089c8:	f019 0f01 	tst.w	r9, #1
 80089cc:	d00e      	beq.n	80089ec <__cvt+0x84>
 80089ce:	eb00 0904 	add.w	r9, r0, r4
 80089d2:	2200      	movs	r2, #0
 80089d4:	2300      	movs	r3, #0
 80089d6:	4630      	mov	r0, r6
 80089d8:	4639      	mov	r1, r7
 80089da:	f7f8 f885 	bl	8000ae8 <__aeabi_dcmpeq>
 80089de:	b108      	cbz	r0, 80089e4 <__cvt+0x7c>
 80089e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80089e4:	2230      	movs	r2, #48	@ 0x30
 80089e6:	9b03      	ldr	r3, [sp, #12]
 80089e8:	454b      	cmp	r3, r9
 80089ea:	d31e      	bcc.n	8008a2a <__cvt+0xc2>
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089f0:	1b5b      	subs	r3, r3, r5
 80089f2:	4628      	mov	r0, r5
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	b004      	add	sp, #16
 80089f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a00:	eb00 0904 	add.w	r9, r0, r4
 8008a04:	d1e5      	bne.n	80089d2 <__cvt+0x6a>
 8008a06:	7803      	ldrb	r3, [r0, #0]
 8008a08:	2b30      	cmp	r3, #48	@ 0x30
 8008a0a:	d10a      	bne.n	8008a22 <__cvt+0xba>
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2300      	movs	r3, #0
 8008a10:	4630      	mov	r0, r6
 8008a12:	4639      	mov	r1, r7
 8008a14:	f7f8 f868 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a18:	b918      	cbnz	r0, 8008a22 <__cvt+0xba>
 8008a1a:	f1c4 0401 	rsb	r4, r4, #1
 8008a1e:	f8ca 4000 	str.w	r4, [sl]
 8008a22:	f8da 3000 	ldr.w	r3, [sl]
 8008a26:	4499      	add	r9, r3
 8008a28:	e7d3      	b.n	80089d2 <__cvt+0x6a>
 8008a2a:	1c59      	adds	r1, r3, #1
 8008a2c:	9103      	str	r1, [sp, #12]
 8008a2e:	701a      	strb	r2, [r3, #0]
 8008a30:	e7d9      	b.n	80089e6 <__cvt+0x7e>

08008a32 <__exponent>:
 8008a32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a34:	2900      	cmp	r1, #0
 8008a36:	bfba      	itte	lt
 8008a38:	4249      	neglt	r1, r1
 8008a3a:	232d      	movlt	r3, #45	@ 0x2d
 8008a3c:	232b      	movge	r3, #43	@ 0x2b
 8008a3e:	2909      	cmp	r1, #9
 8008a40:	7002      	strb	r2, [r0, #0]
 8008a42:	7043      	strb	r3, [r0, #1]
 8008a44:	dd29      	ble.n	8008a9a <__exponent+0x68>
 8008a46:	f10d 0307 	add.w	r3, sp, #7
 8008a4a:	461d      	mov	r5, r3
 8008a4c:	270a      	movs	r7, #10
 8008a4e:	461a      	mov	r2, r3
 8008a50:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a54:	fb07 1416 	mls	r4, r7, r6, r1
 8008a58:	3430      	adds	r4, #48	@ 0x30
 8008a5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a5e:	460c      	mov	r4, r1
 8008a60:	2c63      	cmp	r4, #99	@ 0x63
 8008a62:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a66:	4631      	mov	r1, r6
 8008a68:	dcf1      	bgt.n	8008a4e <__exponent+0x1c>
 8008a6a:	3130      	adds	r1, #48	@ 0x30
 8008a6c:	1e94      	subs	r4, r2, #2
 8008a6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a72:	1c41      	adds	r1, r0, #1
 8008a74:	4623      	mov	r3, r4
 8008a76:	42ab      	cmp	r3, r5
 8008a78:	d30a      	bcc.n	8008a90 <__exponent+0x5e>
 8008a7a:	f10d 0309 	add.w	r3, sp, #9
 8008a7e:	1a9b      	subs	r3, r3, r2
 8008a80:	42ac      	cmp	r4, r5
 8008a82:	bf88      	it	hi
 8008a84:	2300      	movhi	r3, #0
 8008a86:	3302      	adds	r3, #2
 8008a88:	4403      	add	r3, r0
 8008a8a:	1a18      	subs	r0, r3, r0
 8008a8c:	b003      	add	sp, #12
 8008a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008a94:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008a98:	e7ed      	b.n	8008a76 <__exponent+0x44>
 8008a9a:	2330      	movs	r3, #48	@ 0x30
 8008a9c:	3130      	adds	r1, #48	@ 0x30
 8008a9e:	7083      	strb	r3, [r0, #2]
 8008aa0:	70c1      	strb	r1, [r0, #3]
 8008aa2:	1d03      	adds	r3, r0, #4
 8008aa4:	e7f1      	b.n	8008a8a <__exponent+0x58>
	...

08008aa8 <_printf_float>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	b08d      	sub	sp, #52	@ 0x34
 8008aae:	460c      	mov	r4, r1
 8008ab0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ab4:	4616      	mov	r6, r2
 8008ab6:	461f      	mov	r7, r3
 8008ab8:	4605      	mov	r5, r0
 8008aba:	f000 fd89 	bl	80095d0 <_localeconv_r>
 8008abe:	6803      	ldr	r3, [r0, #0]
 8008ac0:	9304      	str	r3, [sp, #16]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7f7 fbe4 	bl	8000290 <strlen>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	930a      	str	r3, [sp, #40]	@ 0x28
 8008acc:	f8d8 3000 	ldr.w	r3, [r8]
 8008ad0:	9005      	str	r0, [sp, #20]
 8008ad2:	3307      	adds	r3, #7
 8008ad4:	f023 0307 	bic.w	r3, r3, #7
 8008ad8:	f103 0208 	add.w	r2, r3, #8
 8008adc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008ae0:	f8d4 b000 	ldr.w	fp, [r4]
 8008ae4:	f8c8 2000 	str.w	r2, [r8]
 8008ae8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008aec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008af0:	9307      	str	r3, [sp, #28]
 8008af2:	f8cd 8018 	str.w	r8, [sp, #24]
 8008af6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008afa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008afe:	4b9c      	ldr	r3, [pc, #624]	@ (8008d70 <_printf_float+0x2c8>)
 8008b00:	f04f 32ff 	mov.w	r2, #4294967295
 8008b04:	f7f8 f822 	bl	8000b4c <__aeabi_dcmpun>
 8008b08:	bb70      	cbnz	r0, 8008b68 <_printf_float+0xc0>
 8008b0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b0e:	4b98      	ldr	r3, [pc, #608]	@ (8008d70 <_printf_float+0x2c8>)
 8008b10:	f04f 32ff 	mov.w	r2, #4294967295
 8008b14:	f7f7 fffc 	bl	8000b10 <__aeabi_dcmple>
 8008b18:	bb30      	cbnz	r0, 8008b68 <_printf_float+0xc0>
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4640      	mov	r0, r8
 8008b20:	4649      	mov	r1, r9
 8008b22:	f7f7 ffeb 	bl	8000afc <__aeabi_dcmplt>
 8008b26:	b110      	cbz	r0, 8008b2e <_printf_float+0x86>
 8008b28:	232d      	movs	r3, #45	@ 0x2d
 8008b2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b2e:	4a91      	ldr	r2, [pc, #580]	@ (8008d74 <_printf_float+0x2cc>)
 8008b30:	4b91      	ldr	r3, [pc, #580]	@ (8008d78 <_printf_float+0x2d0>)
 8008b32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008b36:	bf94      	ite	ls
 8008b38:	4690      	movls	r8, r2
 8008b3a:	4698      	movhi	r8, r3
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	6123      	str	r3, [r4, #16]
 8008b40:	f02b 0304 	bic.w	r3, fp, #4
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	f04f 0900 	mov.w	r9, #0
 8008b4a:	9700      	str	r7, [sp, #0]
 8008b4c:	4633      	mov	r3, r6
 8008b4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b50:	4621      	mov	r1, r4
 8008b52:	4628      	mov	r0, r5
 8008b54:	f000 f9d2 	bl	8008efc <_printf_common>
 8008b58:	3001      	adds	r0, #1
 8008b5a:	f040 808d 	bne.w	8008c78 <_printf_float+0x1d0>
 8008b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b62:	b00d      	add	sp, #52	@ 0x34
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b68:	4642      	mov	r2, r8
 8008b6a:	464b      	mov	r3, r9
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	4649      	mov	r1, r9
 8008b70:	f7f7 ffec 	bl	8000b4c <__aeabi_dcmpun>
 8008b74:	b140      	cbz	r0, 8008b88 <_printf_float+0xe0>
 8008b76:	464b      	mov	r3, r9
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bfbc      	itt	lt
 8008b7c:	232d      	movlt	r3, #45	@ 0x2d
 8008b7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008b82:	4a7e      	ldr	r2, [pc, #504]	@ (8008d7c <_printf_float+0x2d4>)
 8008b84:	4b7e      	ldr	r3, [pc, #504]	@ (8008d80 <_printf_float+0x2d8>)
 8008b86:	e7d4      	b.n	8008b32 <_printf_float+0x8a>
 8008b88:	6863      	ldr	r3, [r4, #4]
 8008b8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008b8e:	9206      	str	r2, [sp, #24]
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	d13b      	bne.n	8008c0c <_printf_float+0x164>
 8008b94:	2306      	movs	r3, #6
 8008b96:	6063      	str	r3, [r4, #4]
 8008b98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	6022      	str	r2, [r4, #0]
 8008ba0:	9303      	str	r3, [sp, #12]
 8008ba2:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ba4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008ba8:	ab09      	add	r3, sp, #36	@ 0x24
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	6861      	ldr	r1, [r4, #4]
 8008bae:	ec49 8b10 	vmov	d0, r8, r9
 8008bb2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	f7ff fed6 	bl	8008968 <__cvt>
 8008bbc:	9b06      	ldr	r3, [sp, #24]
 8008bbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bc0:	2b47      	cmp	r3, #71	@ 0x47
 8008bc2:	4680      	mov	r8, r0
 8008bc4:	d129      	bne.n	8008c1a <_printf_float+0x172>
 8008bc6:	1cc8      	adds	r0, r1, #3
 8008bc8:	db02      	blt.n	8008bd0 <_printf_float+0x128>
 8008bca:	6863      	ldr	r3, [r4, #4]
 8008bcc:	4299      	cmp	r1, r3
 8008bce:	dd41      	ble.n	8008c54 <_printf_float+0x1ac>
 8008bd0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008bd4:	fa5f fa8a 	uxtb.w	sl, sl
 8008bd8:	3901      	subs	r1, #1
 8008bda:	4652      	mov	r2, sl
 8008bdc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008be0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008be2:	f7ff ff26 	bl	8008a32 <__exponent>
 8008be6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008be8:	1813      	adds	r3, r2, r0
 8008bea:	2a01      	cmp	r2, #1
 8008bec:	4681      	mov	r9, r0
 8008bee:	6123      	str	r3, [r4, #16]
 8008bf0:	dc02      	bgt.n	8008bf8 <_printf_float+0x150>
 8008bf2:	6822      	ldr	r2, [r4, #0]
 8008bf4:	07d2      	lsls	r2, r2, #31
 8008bf6:	d501      	bpl.n	8008bfc <_printf_float+0x154>
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	6123      	str	r3, [r4, #16]
 8008bfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d0a2      	beq.n	8008b4a <_printf_float+0xa2>
 8008c04:	232d      	movs	r3, #45	@ 0x2d
 8008c06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c0a:	e79e      	b.n	8008b4a <_printf_float+0xa2>
 8008c0c:	9a06      	ldr	r2, [sp, #24]
 8008c0e:	2a47      	cmp	r2, #71	@ 0x47
 8008c10:	d1c2      	bne.n	8008b98 <_printf_float+0xf0>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1c0      	bne.n	8008b98 <_printf_float+0xf0>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e7bd      	b.n	8008b96 <_printf_float+0xee>
 8008c1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c1e:	d9db      	bls.n	8008bd8 <_printf_float+0x130>
 8008c20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008c24:	d118      	bne.n	8008c58 <_printf_float+0x1b0>
 8008c26:	2900      	cmp	r1, #0
 8008c28:	6863      	ldr	r3, [r4, #4]
 8008c2a:	dd0b      	ble.n	8008c44 <_printf_float+0x19c>
 8008c2c:	6121      	str	r1, [r4, #16]
 8008c2e:	b913      	cbnz	r3, 8008c36 <_printf_float+0x18e>
 8008c30:	6822      	ldr	r2, [r4, #0]
 8008c32:	07d0      	lsls	r0, r2, #31
 8008c34:	d502      	bpl.n	8008c3c <_printf_float+0x194>
 8008c36:	3301      	adds	r3, #1
 8008c38:	440b      	add	r3, r1
 8008c3a:	6123      	str	r3, [r4, #16]
 8008c3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c3e:	f04f 0900 	mov.w	r9, #0
 8008c42:	e7db      	b.n	8008bfc <_printf_float+0x154>
 8008c44:	b913      	cbnz	r3, 8008c4c <_printf_float+0x1a4>
 8008c46:	6822      	ldr	r2, [r4, #0]
 8008c48:	07d2      	lsls	r2, r2, #31
 8008c4a:	d501      	bpl.n	8008c50 <_printf_float+0x1a8>
 8008c4c:	3302      	adds	r3, #2
 8008c4e:	e7f4      	b.n	8008c3a <_printf_float+0x192>
 8008c50:	2301      	movs	r3, #1
 8008c52:	e7f2      	b.n	8008c3a <_printf_float+0x192>
 8008c54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008c58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c5a:	4299      	cmp	r1, r3
 8008c5c:	db05      	blt.n	8008c6a <_printf_float+0x1c2>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	6121      	str	r1, [r4, #16]
 8008c62:	07d8      	lsls	r0, r3, #31
 8008c64:	d5ea      	bpl.n	8008c3c <_printf_float+0x194>
 8008c66:	1c4b      	adds	r3, r1, #1
 8008c68:	e7e7      	b.n	8008c3a <_printf_float+0x192>
 8008c6a:	2900      	cmp	r1, #0
 8008c6c:	bfd4      	ite	le
 8008c6e:	f1c1 0202 	rsble	r2, r1, #2
 8008c72:	2201      	movgt	r2, #1
 8008c74:	4413      	add	r3, r2
 8008c76:	e7e0      	b.n	8008c3a <_printf_float+0x192>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	055a      	lsls	r2, r3, #21
 8008c7c:	d407      	bmi.n	8008c8e <_printf_float+0x1e6>
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	4642      	mov	r2, r8
 8008c82:	4631      	mov	r1, r6
 8008c84:	4628      	mov	r0, r5
 8008c86:	47b8      	blx	r7
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d12b      	bne.n	8008ce4 <_printf_float+0x23c>
 8008c8c:	e767      	b.n	8008b5e <_printf_float+0xb6>
 8008c8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c92:	f240 80dd 	bls.w	8008e50 <_printf_float+0x3a8>
 8008c96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f7f7 ff23 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	d033      	beq.n	8008d0e <_printf_float+0x266>
 8008ca6:	4a37      	ldr	r2, [pc, #220]	@ (8008d84 <_printf_float+0x2dc>)
 8008ca8:	2301      	movs	r3, #1
 8008caa:	4631      	mov	r1, r6
 8008cac:	4628      	mov	r0, r5
 8008cae:	47b8      	blx	r7
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	f43f af54 	beq.w	8008b5e <_printf_float+0xb6>
 8008cb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008cba:	4543      	cmp	r3, r8
 8008cbc:	db02      	blt.n	8008cc4 <_printf_float+0x21c>
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	07d8      	lsls	r0, r3, #31
 8008cc2:	d50f      	bpl.n	8008ce4 <_printf_float+0x23c>
 8008cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cc8:	4631      	mov	r1, r6
 8008cca:	4628      	mov	r0, r5
 8008ccc:	47b8      	blx	r7
 8008cce:	3001      	adds	r0, #1
 8008cd0:	f43f af45 	beq.w	8008b5e <_printf_float+0xb6>
 8008cd4:	f04f 0900 	mov.w	r9, #0
 8008cd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008cdc:	f104 0a1a 	add.w	sl, r4, #26
 8008ce0:	45c8      	cmp	r8, r9
 8008ce2:	dc09      	bgt.n	8008cf8 <_printf_float+0x250>
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	079b      	lsls	r3, r3, #30
 8008ce8:	f100 8103 	bmi.w	8008ef2 <_printf_float+0x44a>
 8008cec:	68e0      	ldr	r0, [r4, #12]
 8008cee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cf0:	4298      	cmp	r0, r3
 8008cf2:	bfb8      	it	lt
 8008cf4:	4618      	movlt	r0, r3
 8008cf6:	e734      	b.n	8008b62 <_printf_float+0xba>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	4652      	mov	r2, sl
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	4628      	mov	r0, r5
 8008d00:	47b8      	blx	r7
 8008d02:	3001      	adds	r0, #1
 8008d04:	f43f af2b 	beq.w	8008b5e <_printf_float+0xb6>
 8008d08:	f109 0901 	add.w	r9, r9, #1
 8008d0c:	e7e8      	b.n	8008ce0 <_printf_float+0x238>
 8008d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	dc39      	bgt.n	8008d88 <_printf_float+0x2e0>
 8008d14:	4a1b      	ldr	r2, [pc, #108]	@ (8008d84 <_printf_float+0x2dc>)
 8008d16:	2301      	movs	r3, #1
 8008d18:	4631      	mov	r1, r6
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	47b8      	blx	r7
 8008d1e:	3001      	adds	r0, #1
 8008d20:	f43f af1d 	beq.w	8008b5e <_printf_float+0xb6>
 8008d24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008d28:	ea59 0303 	orrs.w	r3, r9, r3
 8008d2c:	d102      	bne.n	8008d34 <_printf_float+0x28c>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	07d9      	lsls	r1, r3, #31
 8008d32:	d5d7      	bpl.n	8008ce4 <_printf_float+0x23c>
 8008d34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	47b8      	blx	r7
 8008d3e:	3001      	adds	r0, #1
 8008d40:	f43f af0d 	beq.w	8008b5e <_printf_float+0xb6>
 8008d44:	f04f 0a00 	mov.w	sl, #0
 8008d48:	f104 0b1a 	add.w	fp, r4, #26
 8008d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d4e:	425b      	negs	r3, r3
 8008d50:	4553      	cmp	r3, sl
 8008d52:	dc01      	bgt.n	8008d58 <_printf_float+0x2b0>
 8008d54:	464b      	mov	r3, r9
 8008d56:	e793      	b.n	8008c80 <_printf_float+0x1d8>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	465a      	mov	r2, fp
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b8      	blx	r7
 8008d62:	3001      	adds	r0, #1
 8008d64:	f43f aefb 	beq.w	8008b5e <_printf_float+0xb6>
 8008d68:	f10a 0a01 	add.w	sl, sl, #1
 8008d6c:	e7ee      	b.n	8008d4c <_printf_float+0x2a4>
 8008d6e:	bf00      	nop
 8008d70:	7fefffff 	.word	0x7fefffff
 8008d74:	0800bba5 	.word	0x0800bba5
 8008d78:	0800bba9 	.word	0x0800bba9
 8008d7c:	0800bbad 	.word	0x0800bbad
 8008d80:	0800bbb1 	.word	0x0800bbb1
 8008d84:	0800bbb5 	.word	0x0800bbb5
 8008d88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d8e:	4553      	cmp	r3, sl
 8008d90:	bfa8      	it	ge
 8008d92:	4653      	movge	r3, sl
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	4699      	mov	r9, r3
 8008d98:	dc36      	bgt.n	8008e08 <_printf_float+0x360>
 8008d9a:	f04f 0b00 	mov.w	fp, #0
 8008d9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008da2:	f104 021a 	add.w	r2, r4, #26
 8008da6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008da8:	9306      	str	r3, [sp, #24]
 8008daa:	eba3 0309 	sub.w	r3, r3, r9
 8008dae:	455b      	cmp	r3, fp
 8008db0:	dc31      	bgt.n	8008e16 <_printf_float+0x36e>
 8008db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008db4:	459a      	cmp	sl, r3
 8008db6:	dc3a      	bgt.n	8008e2e <_printf_float+0x386>
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	07da      	lsls	r2, r3, #31
 8008dbc:	d437      	bmi.n	8008e2e <_printf_float+0x386>
 8008dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc0:	ebaa 0903 	sub.w	r9, sl, r3
 8008dc4:	9b06      	ldr	r3, [sp, #24]
 8008dc6:	ebaa 0303 	sub.w	r3, sl, r3
 8008dca:	4599      	cmp	r9, r3
 8008dcc:	bfa8      	it	ge
 8008dce:	4699      	movge	r9, r3
 8008dd0:	f1b9 0f00 	cmp.w	r9, #0
 8008dd4:	dc33      	bgt.n	8008e3e <_printf_float+0x396>
 8008dd6:	f04f 0800 	mov.w	r8, #0
 8008dda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dde:	f104 0b1a 	add.w	fp, r4, #26
 8008de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de4:	ebaa 0303 	sub.w	r3, sl, r3
 8008de8:	eba3 0309 	sub.w	r3, r3, r9
 8008dec:	4543      	cmp	r3, r8
 8008dee:	f77f af79 	ble.w	8008ce4 <_printf_float+0x23c>
 8008df2:	2301      	movs	r3, #1
 8008df4:	465a      	mov	r2, fp
 8008df6:	4631      	mov	r1, r6
 8008df8:	4628      	mov	r0, r5
 8008dfa:	47b8      	blx	r7
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	f43f aeae 	beq.w	8008b5e <_printf_float+0xb6>
 8008e02:	f108 0801 	add.w	r8, r8, #1
 8008e06:	e7ec      	b.n	8008de2 <_printf_float+0x33a>
 8008e08:	4642      	mov	r2, r8
 8008e0a:	4631      	mov	r1, r6
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	47b8      	blx	r7
 8008e10:	3001      	adds	r0, #1
 8008e12:	d1c2      	bne.n	8008d9a <_printf_float+0x2f2>
 8008e14:	e6a3      	b.n	8008b5e <_printf_float+0xb6>
 8008e16:	2301      	movs	r3, #1
 8008e18:	4631      	mov	r1, r6
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	9206      	str	r2, [sp, #24]
 8008e1e:	47b8      	blx	r7
 8008e20:	3001      	adds	r0, #1
 8008e22:	f43f ae9c 	beq.w	8008b5e <_printf_float+0xb6>
 8008e26:	9a06      	ldr	r2, [sp, #24]
 8008e28:	f10b 0b01 	add.w	fp, fp, #1
 8008e2c:	e7bb      	b.n	8008da6 <_printf_float+0x2fe>
 8008e2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e32:	4631      	mov	r1, r6
 8008e34:	4628      	mov	r0, r5
 8008e36:	47b8      	blx	r7
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d1c0      	bne.n	8008dbe <_printf_float+0x316>
 8008e3c:	e68f      	b.n	8008b5e <_printf_float+0xb6>
 8008e3e:	9a06      	ldr	r2, [sp, #24]
 8008e40:	464b      	mov	r3, r9
 8008e42:	4442      	add	r2, r8
 8008e44:	4631      	mov	r1, r6
 8008e46:	4628      	mov	r0, r5
 8008e48:	47b8      	blx	r7
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d1c3      	bne.n	8008dd6 <_printf_float+0x32e>
 8008e4e:	e686      	b.n	8008b5e <_printf_float+0xb6>
 8008e50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e54:	f1ba 0f01 	cmp.w	sl, #1
 8008e58:	dc01      	bgt.n	8008e5e <_printf_float+0x3b6>
 8008e5a:	07db      	lsls	r3, r3, #31
 8008e5c:	d536      	bpl.n	8008ecc <_printf_float+0x424>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	4642      	mov	r2, r8
 8008e62:	4631      	mov	r1, r6
 8008e64:	4628      	mov	r0, r5
 8008e66:	47b8      	blx	r7
 8008e68:	3001      	adds	r0, #1
 8008e6a:	f43f ae78 	beq.w	8008b5e <_printf_float+0xb6>
 8008e6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e72:	4631      	mov	r1, r6
 8008e74:	4628      	mov	r0, r5
 8008e76:	47b8      	blx	r7
 8008e78:	3001      	adds	r0, #1
 8008e7a:	f43f ae70 	beq.w	8008b5e <_printf_float+0xb6>
 8008e7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e82:	2200      	movs	r2, #0
 8008e84:	2300      	movs	r3, #0
 8008e86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e8a:	f7f7 fe2d 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e8e:	b9c0      	cbnz	r0, 8008ec2 <_printf_float+0x41a>
 8008e90:	4653      	mov	r3, sl
 8008e92:	f108 0201 	add.w	r2, r8, #1
 8008e96:	4631      	mov	r1, r6
 8008e98:	4628      	mov	r0, r5
 8008e9a:	47b8      	blx	r7
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d10c      	bne.n	8008eba <_printf_float+0x412>
 8008ea0:	e65d      	b.n	8008b5e <_printf_float+0xb6>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	465a      	mov	r2, fp
 8008ea6:	4631      	mov	r1, r6
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	47b8      	blx	r7
 8008eac:	3001      	adds	r0, #1
 8008eae:	f43f ae56 	beq.w	8008b5e <_printf_float+0xb6>
 8008eb2:	f108 0801 	add.w	r8, r8, #1
 8008eb6:	45d0      	cmp	r8, sl
 8008eb8:	dbf3      	blt.n	8008ea2 <_printf_float+0x3fa>
 8008eba:	464b      	mov	r3, r9
 8008ebc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ec0:	e6df      	b.n	8008c82 <_printf_float+0x1da>
 8008ec2:	f04f 0800 	mov.w	r8, #0
 8008ec6:	f104 0b1a 	add.w	fp, r4, #26
 8008eca:	e7f4      	b.n	8008eb6 <_printf_float+0x40e>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	4642      	mov	r2, r8
 8008ed0:	e7e1      	b.n	8008e96 <_printf_float+0x3ee>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	464a      	mov	r2, r9
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	4628      	mov	r0, r5
 8008eda:	47b8      	blx	r7
 8008edc:	3001      	adds	r0, #1
 8008ede:	f43f ae3e 	beq.w	8008b5e <_printf_float+0xb6>
 8008ee2:	f108 0801 	add.w	r8, r8, #1
 8008ee6:	68e3      	ldr	r3, [r4, #12]
 8008ee8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008eea:	1a5b      	subs	r3, r3, r1
 8008eec:	4543      	cmp	r3, r8
 8008eee:	dcf0      	bgt.n	8008ed2 <_printf_float+0x42a>
 8008ef0:	e6fc      	b.n	8008cec <_printf_float+0x244>
 8008ef2:	f04f 0800 	mov.w	r8, #0
 8008ef6:	f104 0919 	add.w	r9, r4, #25
 8008efa:	e7f4      	b.n	8008ee6 <_printf_float+0x43e>

08008efc <_printf_common>:
 8008efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f00:	4616      	mov	r6, r2
 8008f02:	4698      	mov	r8, r3
 8008f04:	688a      	ldr	r2, [r1, #8]
 8008f06:	690b      	ldr	r3, [r1, #16]
 8008f08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	bfb8      	it	lt
 8008f10:	4613      	movlt	r3, r2
 8008f12:	6033      	str	r3, [r6, #0]
 8008f14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f18:	4607      	mov	r7, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	b10a      	cbz	r2, 8008f22 <_printf_common+0x26>
 8008f1e:	3301      	adds	r3, #1
 8008f20:	6033      	str	r3, [r6, #0]
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	0699      	lsls	r1, r3, #26
 8008f26:	bf42      	ittt	mi
 8008f28:	6833      	ldrmi	r3, [r6, #0]
 8008f2a:	3302      	addmi	r3, #2
 8008f2c:	6033      	strmi	r3, [r6, #0]
 8008f2e:	6825      	ldr	r5, [r4, #0]
 8008f30:	f015 0506 	ands.w	r5, r5, #6
 8008f34:	d106      	bne.n	8008f44 <_printf_common+0x48>
 8008f36:	f104 0a19 	add.w	sl, r4, #25
 8008f3a:	68e3      	ldr	r3, [r4, #12]
 8008f3c:	6832      	ldr	r2, [r6, #0]
 8008f3e:	1a9b      	subs	r3, r3, r2
 8008f40:	42ab      	cmp	r3, r5
 8008f42:	dc26      	bgt.n	8008f92 <_printf_common+0x96>
 8008f44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f48:	6822      	ldr	r2, [r4, #0]
 8008f4a:	3b00      	subs	r3, #0
 8008f4c:	bf18      	it	ne
 8008f4e:	2301      	movne	r3, #1
 8008f50:	0692      	lsls	r2, r2, #26
 8008f52:	d42b      	bmi.n	8008fac <_printf_common+0xb0>
 8008f54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f58:	4641      	mov	r1, r8
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	47c8      	blx	r9
 8008f5e:	3001      	adds	r0, #1
 8008f60:	d01e      	beq.n	8008fa0 <_printf_common+0xa4>
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	6922      	ldr	r2, [r4, #16]
 8008f66:	f003 0306 	and.w	r3, r3, #6
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	bf02      	ittt	eq
 8008f6e:	68e5      	ldreq	r5, [r4, #12]
 8008f70:	6833      	ldreq	r3, [r6, #0]
 8008f72:	1aed      	subeq	r5, r5, r3
 8008f74:	68a3      	ldr	r3, [r4, #8]
 8008f76:	bf0c      	ite	eq
 8008f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f7c:	2500      	movne	r5, #0
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	bfc4      	itt	gt
 8008f82:	1a9b      	subgt	r3, r3, r2
 8008f84:	18ed      	addgt	r5, r5, r3
 8008f86:	2600      	movs	r6, #0
 8008f88:	341a      	adds	r4, #26
 8008f8a:	42b5      	cmp	r5, r6
 8008f8c:	d11a      	bne.n	8008fc4 <_printf_common+0xc8>
 8008f8e:	2000      	movs	r0, #0
 8008f90:	e008      	b.n	8008fa4 <_printf_common+0xa8>
 8008f92:	2301      	movs	r3, #1
 8008f94:	4652      	mov	r2, sl
 8008f96:	4641      	mov	r1, r8
 8008f98:	4638      	mov	r0, r7
 8008f9a:	47c8      	blx	r9
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	d103      	bne.n	8008fa8 <_printf_common+0xac>
 8008fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa8:	3501      	adds	r5, #1
 8008faa:	e7c6      	b.n	8008f3a <_printf_common+0x3e>
 8008fac:	18e1      	adds	r1, r4, r3
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	2030      	movs	r0, #48	@ 0x30
 8008fb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fb6:	4422      	add	r2, r4
 8008fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fc0:	3302      	adds	r3, #2
 8008fc2:	e7c7      	b.n	8008f54 <_printf_common+0x58>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	4641      	mov	r1, r8
 8008fca:	4638      	mov	r0, r7
 8008fcc:	47c8      	blx	r9
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d0e6      	beq.n	8008fa0 <_printf_common+0xa4>
 8008fd2:	3601      	adds	r6, #1
 8008fd4:	e7d9      	b.n	8008f8a <_printf_common+0x8e>
	...

08008fd8 <_printf_i>:
 8008fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fdc:	7e0f      	ldrb	r7, [r1, #24]
 8008fde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008fe0:	2f78      	cmp	r7, #120	@ 0x78
 8008fe2:	4691      	mov	r9, r2
 8008fe4:	4680      	mov	r8, r0
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	469a      	mov	sl, r3
 8008fea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008fee:	d807      	bhi.n	8009000 <_printf_i+0x28>
 8008ff0:	2f62      	cmp	r7, #98	@ 0x62
 8008ff2:	d80a      	bhi.n	800900a <_printf_i+0x32>
 8008ff4:	2f00      	cmp	r7, #0
 8008ff6:	f000 80d2 	beq.w	800919e <_printf_i+0x1c6>
 8008ffa:	2f58      	cmp	r7, #88	@ 0x58
 8008ffc:	f000 80b9 	beq.w	8009172 <_printf_i+0x19a>
 8009000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009004:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009008:	e03a      	b.n	8009080 <_printf_i+0xa8>
 800900a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800900e:	2b15      	cmp	r3, #21
 8009010:	d8f6      	bhi.n	8009000 <_printf_i+0x28>
 8009012:	a101      	add	r1, pc, #4	@ (adr r1, 8009018 <_printf_i+0x40>)
 8009014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009018:	08009071 	.word	0x08009071
 800901c:	08009085 	.word	0x08009085
 8009020:	08009001 	.word	0x08009001
 8009024:	08009001 	.word	0x08009001
 8009028:	08009001 	.word	0x08009001
 800902c:	08009001 	.word	0x08009001
 8009030:	08009085 	.word	0x08009085
 8009034:	08009001 	.word	0x08009001
 8009038:	08009001 	.word	0x08009001
 800903c:	08009001 	.word	0x08009001
 8009040:	08009001 	.word	0x08009001
 8009044:	08009185 	.word	0x08009185
 8009048:	080090af 	.word	0x080090af
 800904c:	0800913f 	.word	0x0800913f
 8009050:	08009001 	.word	0x08009001
 8009054:	08009001 	.word	0x08009001
 8009058:	080091a7 	.word	0x080091a7
 800905c:	08009001 	.word	0x08009001
 8009060:	080090af 	.word	0x080090af
 8009064:	08009001 	.word	0x08009001
 8009068:	08009001 	.word	0x08009001
 800906c:	08009147 	.word	0x08009147
 8009070:	6833      	ldr	r3, [r6, #0]
 8009072:	1d1a      	adds	r2, r3, #4
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6032      	str	r2, [r6, #0]
 8009078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800907c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009080:	2301      	movs	r3, #1
 8009082:	e09d      	b.n	80091c0 <_printf_i+0x1e8>
 8009084:	6833      	ldr	r3, [r6, #0]
 8009086:	6820      	ldr	r0, [r4, #0]
 8009088:	1d19      	adds	r1, r3, #4
 800908a:	6031      	str	r1, [r6, #0]
 800908c:	0606      	lsls	r6, r0, #24
 800908e:	d501      	bpl.n	8009094 <_printf_i+0xbc>
 8009090:	681d      	ldr	r5, [r3, #0]
 8009092:	e003      	b.n	800909c <_printf_i+0xc4>
 8009094:	0645      	lsls	r5, r0, #25
 8009096:	d5fb      	bpl.n	8009090 <_printf_i+0xb8>
 8009098:	f9b3 5000 	ldrsh.w	r5, [r3]
 800909c:	2d00      	cmp	r5, #0
 800909e:	da03      	bge.n	80090a8 <_printf_i+0xd0>
 80090a0:	232d      	movs	r3, #45	@ 0x2d
 80090a2:	426d      	negs	r5, r5
 80090a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090a8:	4859      	ldr	r0, [pc, #356]	@ (8009210 <_printf_i+0x238>)
 80090aa:	230a      	movs	r3, #10
 80090ac:	e011      	b.n	80090d2 <_printf_i+0xfa>
 80090ae:	6821      	ldr	r1, [r4, #0]
 80090b0:	6833      	ldr	r3, [r6, #0]
 80090b2:	0608      	lsls	r0, r1, #24
 80090b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80090b8:	d402      	bmi.n	80090c0 <_printf_i+0xe8>
 80090ba:	0649      	lsls	r1, r1, #25
 80090bc:	bf48      	it	mi
 80090be:	b2ad      	uxthmi	r5, r5
 80090c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80090c2:	4853      	ldr	r0, [pc, #332]	@ (8009210 <_printf_i+0x238>)
 80090c4:	6033      	str	r3, [r6, #0]
 80090c6:	bf14      	ite	ne
 80090c8:	230a      	movne	r3, #10
 80090ca:	2308      	moveq	r3, #8
 80090cc:	2100      	movs	r1, #0
 80090ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090d2:	6866      	ldr	r6, [r4, #4]
 80090d4:	60a6      	str	r6, [r4, #8]
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	bfa2      	ittt	ge
 80090da:	6821      	ldrge	r1, [r4, #0]
 80090dc:	f021 0104 	bicge.w	r1, r1, #4
 80090e0:	6021      	strge	r1, [r4, #0]
 80090e2:	b90d      	cbnz	r5, 80090e8 <_printf_i+0x110>
 80090e4:	2e00      	cmp	r6, #0
 80090e6:	d04b      	beq.n	8009180 <_printf_i+0x1a8>
 80090e8:	4616      	mov	r6, r2
 80090ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80090ee:	fb03 5711 	mls	r7, r3, r1, r5
 80090f2:	5dc7      	ldrb	r7, [r0, r7]
 80090f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090f8:	462f      	mov	r7, r5
 80090fa:	42bb      	cmp	r3, r7
 80090fc:	460d      	mov	r5, r1
 80090fe:	d9f4      	bls.n	80090ea <_printf_i+0x112>
 8009100:	2b08      	cmp	r3, #8
 8009102:	d10b      	bne.n	800911c <_printf_i+0x144>
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	07df      	lsls	r7, r3, #31
 8009108:	d508      	bpl.n	800911c <_printf_i+0x144>
 800910a:	6923      	ldr	r3, [r4, #16]
 800910c:	6861      	ldr	r1, [r4, #4]
 800910e:	4299      	cmp	r1, r3
 8009110:	bfde      	ittt	le
 8009112:	2330      	movle	r3, #48	@ 0x30
 8009114:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009118:	f106 36ff 	addle.w	r6, r6, #4294967295
 800911c:	1b92      	subs	r2, r2, r6
 800911e:	6122      	str	r2, [r4, #16]
 8009120:	f8cd a000 	str.w	sl, [sp]
 8009124:	464b      	mov	r3, r9
 8009126:	aa03      	add	r2, sp, #12
 8009128:	4621      	mov	r1, r4
 800912a:	4640      	mov	r0, r8
 800912c:	f7ff fee6 	bl	8008efc <_printf_common>
 8009130:	3001      	adds	r0, #1
 8009132:	d14a      	bne.n	80091ca <_printf_i+0x1f2>
 8009134:	f04f 30ff 	mov.w	r0, #4294967295
 8009138:	b004      	add	sp, #16
 800913a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	f043 0320 	orr.w	r3, r3, #32
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	4833      	ldr	r0, [pc, #204]	@ (8009214 <_printf_i+0x23c>)
 8009148:	2778      	movs	r7, #120	@ 0x78
 800914a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	6831      	ldr	r1, [r6, #0]
 8009152:	061f      	lsls	r7, r3, #24
 8009154:	f851 5b04 	ldr.w	r5, [r1], #4
 8009158:	d402      	bmi.n	8009160 <_printf_i+0x188>
 800915a:	065f      	lsls	r7, r3, #25
 800915c:	bf48      	it	mi
 800915e:	b2ad      	uxthmi	r5, r5
 8009160:	6031      	str	r1, [r6, #0]
 8009162:	07d9      	lsls	r1, r3, #31
 8009164:	bf44      	itt	mi
 8009166:	f043 0320 	orrmi.w	r3, r3, #32
 800916a:	6023      	strmi	r3, [r4, #0]
 800916c:	b11d      	cbz	r5, 8009176 <_printf_i+0x19e>
 800916e:	2310      	movs	r3, #16
 8009170:	e7ac      	b.n	80090cc <_printf_i+0xf4>
 8009172:	4827      	ldr	r0, [pc, #156]	@ (8009210 <_printf_i+0x238>)
 8009174:	e7e9      	b.n	800914a <_printf_i+0x172>
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	f023 0320 	bic.w	r3, r3, #32
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	e7f6      	b.n	800916e <_printf_i+0x196>
 8009180:	4616      	mov	r6, r2
 8009182:	e7bd      	b.n	8009100 <_printf_i+0x128>
 8009184:	6833      	ldr	r3, [r6, #0]
 8009186:	6825      	ldr	r5, [r4, #0]
 8009188:	6961      	ldr	r1, [r4, #20]
 800918a:	1d18      	adds	r0, r3, #4
 800918c:	6030      	str	r0, [r6, #0]
 800918e:	062e      	lsls	r6, r5, #24
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	d501      	bpl.n	8009198 <_printf_i+0x1c0>
 8009194:	6019      	str	r1, [r3, #0]
 8009196:	e002      	b.n	800919e <_printf_i+0x1c6>
 8009198:	0668      	lsls	r0, r5, #25
 800919a:	d5fb      	bpl.n	8009194 <_printf_i+0x1bc>
 800919c:	8019      	strh	r1, [r3, #0]
 800919e:	2300      	movs	r3, #0
 80091a0:	6123      	str	r3, [r4, #16]
 80091a2:	4616      	mov	r6, r2
 80091a4:	e7bc      	b.n	8009120 <_printf_i+0x148>
 80091a6:	6833      	ldr	r3, [r6, #0]
 80091a8:	1d1a      	adds	r2, r3, #4
 80091aa:	6032      	str	r2, [r6, #0]
 80091ac:	681e      	ldr	r6, [r3, #0]
 80091ae:	6862      	ldr	r2, [r4, #4]
 80091b0:	2100      	movs	r1, #0
 80091b2:	4630      	mov	r0, r6
 80091b4:	f7f7 f81c 	bl	80001f0 <memchr>
 80091b8:	b108      	cbz	r0, 80091be <_printf_i+0x1e6>
 80091ba:	1b80      	subs	r0, r0, r6
 80091bc:	6060      	str	r0, [r4, #4]
 80091be:	6863      	ldr	r3, [r4, #4]
 80091c0:	6123      	str	r3, [r4, #16]
 80091c2:	2300      	movs	r3, #0
 80091c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091c8:	e7aa      	b.n	8009120 <_printf_i+0x148>
 80091ca:	6923      	ldr	r3, [r4, #16]
 80091cc:	4632      	mov	r2, r6
 80091ce:	4649      	mov	r1, r9
 80091d0:	4640      	mov	r0, r8
 80091d2:	47d0      	blx	sl
 80091d4:	3001      	adds	r0, #1
 80091d6:	d0ad      	beq.n	8009134 <_printf_i+0x15c>
 80091d8:	6823      	ldr	r3, [r4, #0]
 80091da:	079b      	lsls	r3, r3, #30
 80091dc:	d413      	bmi.n	8009206 <_printf_i+0x22e>
 80091de:	68e0      	ldr	r0, [r4, #12]
 80091e0:	9b03      	ldr	r3, [sp, #12]
 80091e2:	4298      	cmp	r0, r3
 80091e4:	bfb8      	it	lt
 80091e6:	4618      	movlt	r0, r3
 80091e8:	e7a6      	b.n	8009138 <_printf_i+0x160>
 80091ea:	2301      	movs	r3, #1
 80091ec:	4632      	mov	r2, r6
 80091ee:	4649      	mov	r1, r9
 80091f0:	4640      	mov	r0, r8
 80091f2:	47d0      	blx	sl
 80091f4:	3001      	adds	r0, #1
 80091f6:	d09d      	beq.n	8009134 <_printf_i+0x15c>
 80091f8:	3501      	adds	r5, #1
 80091fa:	68e3      	ldr	r3, [r4, #12]
 80091fc:	9903      	ldr	r1, [sp, #12]
 80091fe:	1a5b      	subs	r3, r3, r1
 8009200:	42ab      	cmp	r3, r5
 8009202:	dcf2      	bgt.n	80091ea <_printf_i+0x212>
 8009204:	e7eb      	b.n	80091de <_printf_i+0x206>
 8009206:	2500      	movs	r5, #0
 8009208:	f104 0619 	add.w	r6, r4, #25
 800920c:	e7f5      	b.n	80091fa <_printf_i+0x222>
 800920e:	bf00      	nop
 8009210:	0800bbb7 	.word	0x0800bbb7
 8009214:	0800bbc8 	.word	0x0800bbc8

08009218 <std>:
 8009218:	2300      	movs	r3, #0
 800921a:	b510      	push	{r4, lr}
 800921c:	4604      	mov	r4, r0
 800921e:	e9c0 3300 	strd	r3, r3, [r0]
 8009222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009226:	6083      	str	r3, [r0, #8]
 8009228:	8181      	strh	r1, [r0, #12]
 800922a:	6643      	str	r3, [r0, #100]	@ 0x64
 800922c:	81c2      	strh	r2, [r0, #14]
 800922e:	6183      	str	r3, [r0, #24]
 8009230:	4619      	mov	r1, r3
 8009232:	2208      	movs	r2, #8
 8009234:	305c      	adds	r0, #92	@ 0x5c
 8009236:	f000 f948 	bl	80094ca <memset>
 800923a:	4b0d      	ldr	r3, [pc, #52]	@ (8009270 <std+0x58>)
 800923c:	6263      	str	r3, [r4, #36]	@ 0x24
 800923e:	4b0d      	ldr	r3, [pc, #52]	@ (8009274 <std+0x5c>)
 8009240:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009242:	4b0d      	ldr	r3, [pc, #52]	@ (8009278 <std+0x60>)
 8009244:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009246:	4b0d      	ldr	r3, [pc, #52]	@ (800927c <std+0x64>)
 8009248:	6323      	str	r3, [r4, #48]	@ 0x30
 800924a:	4b0d      	ldr	r3, [pc, #52]	@ (8009280 <std+0x68>)
 800924c:	6224      	str	r4, [r4, #32]
 800924e:	429c      	cmp	r4, r3
 8009250:	d006      	beq.n	8009260 <std+0x48>
 8009252:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009256:	4294      	cmp	r4, r2
 8009258:	d002      	beq.n	8009260 <std+0x48>
 800925a:	33d0      	adds	r3, #208	@ 0xd0
 800925c:	429c      	cmp	r4, r3
 800925e:	d105      	bne.n	800926c <std+0x54>
 8009260:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009268:	f000 ba36 	b.w	80096d8 <__retarget_lock_init_recursive>
 800926c:	bd10      	pop	{r4, pc}
 800926e:	bf00      	nop
 8009270:	08009445 	.word	0x08009445
 8009274:	08009467 	.word	0x08009467
 8009278:	0800949f 	.word	0x0800949f
 800927c:	080094c3 	.word	0x080094c3
 8009280:	20000b18 	.word	0x20000b18

08009284 <stdio_exit_handler>:
 8009284:	4a02      	ldr	r2, [pc, #8]	@ (8009290 <stdio_exit_handler+0xc>)
 8009286:	4903      	ldr	r1, [pc, #12]	@ (8009294 <stdio_exit_handler+0x10>)
 8009288:	4803      	ldr	r0, [pc, #12]	@ (8009298 <stdio_exit_handler+0x14>)
 800928a:	f000 b869 	b.w	8009360 <_fwalk_sglue>
 800928e:	bf00      	nop
 8009290:	20000030 	.word	0x20000030
 8009294:	0800b17d 	.word	0x0800b17d
 8009298:	20000040 	.word	0x20000040

0800929c <cleanup_stdio>:
 800929c:	6841      	ldr	r1, [r0, #4]
 800929e:	4b0c      	ldr	r3, [pc, #48]	@ (80092d0 <cleanup_stdio+0x34>)
 80092a0:	4299      	cmp	r1, r3
 80092a2:	b510      	push	{r4, lr}
 80092a4:	4604      	mov	r4, r0
 80092a6:	d001      	beq.n	80092ac <cleanup_stdio+0x10>
 80092a8:	f001 ff68 	bl	800b17c <_fflush_r>
 80092ac:	68a1      	ldr	r1, [r4, #8]
 80092ae:	4b09      	ldr	r3, [pc, #36]	@ (80092d4 <cleanup_stdio+0x38>)
 80092b0:	4299      	cmp	r1, r3
 80092b2:	d002      	beq.n	80092ba <cleanup_stdio+0x1e>
 80092b4:	4620      	mov	r0, r4
 80092b6:	f001 ff61 	bl	800b17c <_fflush_r>
 80092ba:	68e1      	ldr	r1, [r4, #12]
 80092bc:	4b06      	ldr	r3, [pc, #24]	@ (80092d8 <cleanup_stdio+0x3c>)
 80092be:	4299      	cmp	r1, r3
 80092c0:	d004      	beq.n	80092cc <cleanup_stdio+0x30>
 80092c2:	4620      	mov	r0, r4
 80092c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c8:	f001 bf58 	b.w	800b17c <_fflush_r>
 80092cc:	bd10      	pop	{r4, pc}
 80092ce:	bf00      	nop
 80092d0:	20000b18 	.word	0x20000b18
 80092d4:	20000b80 	.word	0x20000b80
 80092d8:	20000be8 	.word	0x20000be8

080092dc <global_stdio_init.part.0>:
 80092dc:	b510      	push	{r4, lr}
 80092de:	4b0b      	ldr	r3, [pc, #44]	@ (800930c <global_stdio_init.part.0+0x30>)
 80092e0:	4c0b      	ldr	r4, [pc, #44]	@ (8009310 <global_stdio_init.part.0+0x34>)
 80092e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009314 <global_stdio_init.part.0+0x38>)
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	4620      	mov	r0, r4
 80092e8:	2200      	movs	r2, #0
 80092ea:	2104      	movs	r1, #4
 80092ec:	f7ff ff94 	bl	8009218 <std>
 80092f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092f4:	2201      	movs	r2, #1
 80092f6:	2109      	movs	r1, #9
 80092f8:	f7ff ff8e 	bl	8009218 <std>
 80092fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009300:	2202      	movs	r2, #2
 8009302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009306:	2112      	movs	r1, #18
 8009308:	f7ff bf86 	b.w	8009218 <std>
 800930c:	20000c50 	.word	0x20000c50
 8009310:	20000b18 	.word	0x20000b18
 8009314:	08009285 	.word	0x08009285

08009318 <__sfp_lock_acquire>:
 8009318:	4801      	ldr	r0, [pc, #4]	@ (8009320 <__sfp_lock_acquire+0x8>)
 800931a:	f000 b9de 	b.w	80096da <__retarget_lock_acquire_recursive>
 800931e:	bf00      	nop
 8009320:	20000c59 	.word	0x20000c59

08009324 <__sfp_lock_release>:
 8009324:	4801      	ldr	r0, [pc, #4]	@ (800932c <__sfp_lock_release+0x8>)
 8009326:	f000 b9d9 	b.w	80096dc <__retarget_lock_release_recursive>
 800932a:	bf00      	nop
 800932c:	20000c59 	.word	0x20000c59

08009330 <__sinit>:
 8009330:	b510      	push	{r4, lr}
 8009332:	4604      	mov	r4, r0
 8009334:	f7ff fff0 	bl	8009318 <__sfp_lock_acquire>
 8009338:	6a23      	ldr	r3, [r4, #32]
 800933a:	b11b      	cbz	r3, 8009344 <__sinit+0x14>
 800933c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009340:	f7ff bff0 	b.w	8009324 <__sfp_lock_release>
 8009344:	4b04      	ldr	r3, [pc, #16]	@ (8009358 <__sinit+0x28>)
 8009346:	6223      	str	r3, [r4, #32]
 8009348:	4b04      	ldr	r3, [pc, #16]	@ (800935c <__sinit+0x2c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1f5      	bne.n	800933c <__sinit+0xc>
 8009350:	f7ff ffc4 	bl	80092dc <global_stdio_init.part.0>
 8009354:	e7f2      	b.n	800933c <__sinit+0xc>
 8009356:	bf00      	nop
 8009358:	0800929d 	.word	0x0800929d
 800935c:	20000c50 	.word	0x20000c50

08009360 <_fwalk_sglue>:
 8009360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009364:	4607      	mov	r7, r0
 8009366:	4688      	mov	r8, r1
 8009368:	4614      	mov	r4, r2
 800936a:	2600      	movs	r6, #0
 800936c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009370:	f1b9 0901 	subs.w	r9, r9, #1
 8009374:	d505      	bpl.n	8009382 <_fwalk_sglue+0x22>
 8009376:	6824      	ldr	r4, [r4, #0]
 8009378:	2c00      	cmp	r4, #0
 800937a:	d1f7      	bne.n	800936c <_fwalk_sglue+0xc>
 800937c:	4630      	mov	r0, r6
 800937e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009382:	89ab      	ldrh	r3, [r5, #12]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d907      	bls.n	8009398 <_fwalk_sglue+0x38>
 8009388:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800938c:	3301      	adds	r3, #1
 800938e:	d003      	beq.n	8009398 <_fwalk_sglue+0x38>
 8009390:	4629      	mov	r1, r5
 8009392:	4638      	mov	r0, r7
 8009394:	47c0      	blx	r8
 8009396:	4306      	orrs	r6, r0
 8009398:	3568      	adds	r5, #104	@ 0x68
 800939a:	e7e9      	b.n	8009370 <_fwalk_sglue+0x10>

0800939c <sniprintf>:
 800939c:	b40c      	push	{r2, r3}
 800939e:	b530      	push	{r4, r5, lr}
 80093a0:	4b17      	ldr	r3, [pc, #92]	@ (8009400 <sniprintf+0x64>)
 80093a2:	1e0c      	subs	r4, r1, #0
 80093a4:	681d      	ldr	r5, [r3, #0]
 80093a6:	b09d      	sub	sp, #116	@ 0x74
 80093a8:	da08      	bge.n	80093bc <sniprintf+0x20>
 80093aa:	238b      	movs	r3, #139	@ 0x8b
 80093ac:	602b      	str	r3, [r5, #0]
 80093ae:	f04f 30ff 	mov.w	r0, #4294967295
 80093b2:	b01d      	add	sp, #116	@ 0x74
 80093b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093b8:	b002      	add	sp, #8
 80093ba:	4770      	bx	lr
 80093bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80093c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80093c4:	bf14      	ite	ne
 80093c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80093ca:	4623      	moveq	r3, r4
 80093cc:	9304      	str	r3, [sp, #16]
 80093ce:	9307      	str	r3, [sp, #28]
 80093d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80093d4:	9002      	str	r0, [sp, #8]
 80093d6:	9006      	str	r0, [sp, #24]
 80093d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80093dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80093de:	ab21      	add	r3, sp, #132	@ 0x84
 80093e0:	a902      	add	r1, sp, #8
 80093e2:	4628      	mov	r0, r5
 80093e4:	9301      	str	r3, [sp, #4]
 80093e6:	f001 fc07 	bl	800abf8 <_svfiprintf_r>
 80093ea:	1c43      	adds	r3, r0, #1
 80093ec:	bfbc      	itt	lt
 80093ee:	238b      	movlt	r3, #139	@ 0x8b
 80093f0:	602b      	strlt	r3, [r5, #0]
 80093f2:	2c00      	cmp	r4, #0
 80093f4:	d0dd      	beq.n	80093b2 <sniprintf+0x16>
 80093f6:	9b02      	ldr	r3, [sp, #8]
 80093f8:	2200      	movs	r2, #0
 80093fa:	701a      	strb	r2, [r3, #0]
 80093fc:	e7d9      	b.n	80093b2 <sniprintf+0x16>
 80093fe:	bf00      	nop
 8009400:	2000003c 	.word	0x2000003c

08009404 <siprintf>:
 8009404:	b40e      	push	{r1, r2, r3}
 8009406:	b500      	push	{lr}
 8009408:	b09c      	sub	sp, #112	@ 0x70
 800940a:	ab1d      	add	r3, sp, #116	@ 0x74
 800940c:	9002      	str	r0, [sp, #8]
 800940e:	9006      	str	r0, [sp, #24]
 8009410:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009414:	4809      	ldr	r0, [pc, #36]	@ (800943c <siprintf+0x38>)
 8009416:	9107      	str	r1, [sp, #28]
 8009418:	9104      	str	r1, [sp, #16]
 800941a:	4909      	ldr	r1, [pc, #36]	@ (8009440 <siprintf+0x3c>)
 800941c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009420:	9105      	str	r1, [sp, #20]
 8009422:	6800      	ldr	r0, [r0, #0]
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	a902      	add	r1, sp, #8
 8009428:	f001 fbe6 	bl	800abf8 <_svfiprintf_r>
 800942c:	9b02      	ldr	r3, [sp, #8]
 800942e:	2200      	movs	r2, #0
 8009430:	701a      	strb	r2, [r3, #0]
 8009432:	b01c      	add	sp, #112	@ 0x70
 8009434:	f85d eb04 	ldr.w	lr, [sp], #4
 8009438:	b003      	add	sp, #12
 800943a:	4770      	bx	lr
 800943c:	2000003c 	.word	0x2000003c
 8009440:	ffff0208 	.word	0xffff0208

08009444 <__sread>:
 8009444:	b510      	push	{r4, lr}
 8009446:	460c      	mov	r4, r1
 8009448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800944c:	f000 f8e6 	bl	800961c <_read_r>
 8009450:	2800      	cmp	r0, #0
 8009452:	bfab      	itete	ge
 8009454:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009456:	89a3      	ldrhlt	r3, [r4, #12]
 8009458:	181b      	addge	r3, r3, r0
 800945a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800945e:	bfac      	ite	ge
 8009460:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009462:	81a3      	strhlt	r3, [r4, #12]
 8009464:	bd10      	pop	{r4, pc}

08009466 <__swrite>:
 8009466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800946a:	461f      	mov	r7, r3
 800946c:	898b      	ldrh	r3, [r1, #12]
 800946e:	05db      	lsls	r3, r3, #23
 8009470:	4605      	mov	r5, r0
 8009472:	460c      	mov	r4, r1
 8009474:	4616      	mov	r6, r2
 8009476:	d505      	bpl.n	8009484 <__swrite+0x1e>
 8009478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947c:	2302      	movs	r3, #2
 800947e:	2200      	movs	r2, #0
 8009480:	f000 f8ba 	bl	80095f8 <_lseek_r>
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800948a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800948e:	81a3      	strh	r3, [r4, #12]
 8009490:	4632      	mov	r2, r6
 8009492:	463b      	mov	r3, r7
 8009494:	4628      	mov	r0, r5
 8009496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800949a:	f000 b8e1 	b.w	8009660 <_write_r>

0800949e <__sseek>:
 800949e:	b510      	push	{r4, lr}
 80094a0:	460c      	mov	r4, r1
 80094a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a6:	f000 f8a7 	bl	80095f8 <_lseek_r>
 80094aa:	1c43      	adds	r3, r0, #1
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	bf15      	itete	ne
 80094b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80094b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80094b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80094ba:	81a3      	strheq	r3, [r4, #12]
 80094bc:	bf18      	it	ne
 80094be:	81a3      	strhne	r3, [r4, #12]
 80094c0:	bd10      	pop	{r4, pc}

080094c2 <__sclose>:
 80094c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c6:	f000 b887 	b.w	80095d8 <_close_r>

080094ca <memset>:
 80094ca:	4402      	add	r2, r0
 80094cc:	4603      	mov	r3, r0
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d100      	bne.n	80094d4 <memset+0xa>
 80094d2:	4770      	bx	lr
 80094d4:	f803 1b01 	strb.w	r1, [r3], #1
 80094d8:	e7f9      	b.n	80094ce <memset+0x4>

080094da <strcat>:
 80094da:	b510      	push	{r4, lr}
 80094dc:	4602      	mov	r2, r0
 80094de:	7814      	ldrb	r4, [r2, #0]
 80094e0:	4613      	mov	r3, r2
 80094e2:	3201      	adds	r2, #1
 80094e4:	2c00      	cmp	r4, #0
 80094e6:	d1fa      	bne.n	80094de <strcat+0x4>
 80094e8:	3b01      	subs	r3, #1
 80094ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094f2:	2a00      	cmp	r2, #0
 80094f4:	d1f9      	bne.n	80094ea <strcat+0x10>
 80094f6:	bd10      	pop	{r4, pc}

080094f8 <strchr>:
 80094f8:	b2c9      	uxtb	r1, r1
 80094fa:	4603      	mov	r3, r0
 80094fc:	4618      	mov	r0, r3
 80094fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009502:	b112      	cbz	r2, 800950a <strchr+0x12>
 8009504:	428a      	cmp	r2, r1
 8009506:	d1f9      	bne.n	80094fc <strchr+0x4>
 8009508:	4770      	bx	lr
 800950a:	2900      	cmp	r1, #0
 800950c:	bf18      	it	ne
 800950e:	2000      	movne	r0, #0
 8009510:	4770      	bx	lr
	...

08009514 <strdup>:
 8009514:	4b02      	ldr	r3, [pc, #8]	@ (8009520 <strdup+0xc>)
 8009516:	4601      	mov	r1, r0
 8009518:	6818      	ldr	r0, [r3, #0]
 800951a:	f000 b803 	b.w	8009524 <_strdup_r>
 800951e:	bf00      	nop
 8009520:	2000003c 	.word	0x2000003c

08009524 <_strdup_r>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	460d      	mov	r5, r1
 800952c:	f7f6 feb0 	bl	8000290 <strlen>
 8009530:	1c46      	adds	r6, r0, #1
 8009532:	4631      	mov	r1, r6
 8009534:	4620      	mov	r0, r4
 8009536:	f7ff f907 	bl	8008748 <_malloc_r>
 800953a:	4604      	mov	r4, r0
 800953c:	b118      	cbz	r0, 8009546 <_strdup_r+0x22>
 800953e:	4632      	mov	r2, r6
 8009540:	4629      	mov	r1, r5
 8009542:	f000 f8d4 	bl	80096ee <memcpy>
 8009546:	4620      	mov	r0, r4
 8009548:	bd70      	pop	{r4, r5, r6, pc}

0800954a <strsep>:
 800954a:	4602      	mov	r2, r0
 800954c:	2300      	movs	r3, #0
 800954e:	6800      	ldr	r0, [r0, #0]
 8009550:	f000 b800 	b.w	8009554 <__strtok_r>

08009554 <__strtok_r>:
 8009554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009556:	4604      	mov	r4, r0
 8009558:	b908      	cbnz	r0, 800955e <__strtok_r+0xa>
 800955a:	6814      	ldr	r4, [r2, #0]
 800955c:	b144      	cbz	r4, 8009570 <__strtok_r+0x1c>
 800955e:	4620      	mov	r0, r4
 8009560:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009564:	460f      	mov	r7, r1
 8009566:	f817 6b01 	ldrb.w	r6, [r7], #1
 800956a:	b91e      	cbnz	r6, 8009574 <__strtok_r+0x20>
 800956c:	b965      	cbnz	r5, 8009588 <__strtok_r+0x34>
 800956e:	6015      	str	r5, [r2, #0]
 8009570:	2000      	movs	r0, #0
 8009572:	e005      	b.n	8009580 <__strtok_r+0x2c>
 8009574:	42b5      	cmp	r5, r6
 8009576:	d1f6      	bne.n	8009566 <__strtok_r+0x12>
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1f0      	bne.n	800955e <__strtok_r+0xa>
 800957c:	6014      	str	r4, [r2, #0]
 800957e:	7003      	strb	r3, [r0, #0]
 8009580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009582:	461c      	mov	r4, r3
 8009584:	e00c      	b.n	80095a0 <__strtok_r+0x4c>
 8009586:	b915      	cbnz	r5, 800958e <__strtok_r+0x3a>
 8009588:	f814 3b01 	ldrb.w	r3, [r4], #1
 800958c:	460e      	mov	r6, r1
 800958e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009592:	42ab      	cmp	r3, r5
 8009594:	d1f7      	bne.n	8009586 <__strtok_r+0x32>
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0f3      	beq.n	8009582 <__strtok_r+0x2e>
 800959a:	2300      	movs	r3, #0
 800959c:	f804 3c01 	strb.w	r3, [r4, #-1]
 80095a0:	6014      	str	r4, [r2, #0]
 80095a2:	e7ed      	b.n	8009580 <__strtok_r+0x2c>

080095a4 <strstr>:
 80095a4:	780a      	ldrb	r2, [r1, #0]
 80095a6:	b570      	push	{r4, r5, r6, lr}
 80095a8:	b96a      	cbnz	r2, 80095c6 <strstr+0x22>
 80095aa:	bd70      	pop	{r4, r5, r6, pc}
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d109      	bne.n	80095c4 <strstr+0x20>
 80095b0:	460c      	mov	r4, r1
 80095b2:	4605      	mov	r5, r0
 80095b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0f6      	beq.n	80095aa <strstr+0x6>
 80095bc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80095c0:	429e      	cmp	r6, r3
 80095c2:	d0f7      	beq.n	80095b4 <strstr+0x10>
 80095c4:	3001      	adds	r0, #1
 80095c6:	7803      	ldrb	r3, [r0, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1ef      	bne.n	80095ac <strstr+0x8>
 80095cc:	4618      	mov	r0, r3
 80095ce:	e7ec      	b.n	80095aa <strstr+0x6>

080095d0 <_localeconv_r>:
 80095d0:	4800      	ldr	r0, [pc, #0]	@ (80095d4 <_localeconv_r+0x4>)
 80095d2:	4770      	bx	lr
 80095d4:	2000017c 	.word	0x2000017c

080095d8 <_close_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d06      	ldr	r5, [pc, #24]	@ (80095f4 <_close_r+0x1c>)
 80095dc:	2300      	movs	r3, #0
 80095de:	4604      	mov	r4, r0
 80095e0:	4608      	mov	r0, r1
 80095e2:	602b      	str	r3, [r5, #0]
 80095e4:	f7fa f81c 	bl	8003620 <_close>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	d102      	bne.n	80095f2 <_close_r+0x1a>
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	b103      	cbz	r3, 80095f2 <_close_r+0x1a>
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	20000c54 	.word	0x20000c54

080095f8 <_lseek_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	4d07      	ldr	r5, [pc, #28]	@ (8009618 <_lseek_r+0x20>)
 80095fc:	4604      	mov	r4, r0
 80095fe:	4608      	mov	r0, r1
 8009600:	4611      	mov	r1, r2
 8009602:	2200      	movs	r2, #0
 8009604:	602a      	str	r2, [r5, #0]
 8009606:	461a      	mov	r2, r3
 8009608:	f7fa f831 	bl	800366e <_lseek>
 800960c:	1c43      	adds	r3, r0, #1
 800960e:	d102      	bne.n	8009616 <_lseek_r+0x1e>
 8009610:	682b      	ldr	r3, [r5, #0]
 8009612:	b103      	cbz	r3, 8009616 <_lseek_r+0x1e>
 8009614:	6023      	str	r3, [r4, #0]
 8009616:	bd38      	pop	{r3, r4, r5, pc}
 8009618:	20000c54 	.word	0x20000c54

0800961c <_read_r>:
 800961c:	b538      	push	{r3, r4, r5, lr}
 800961e:	4d07      	ldr	r5, [pc, #28]	@ (800963c <_read_r+0x20>)
 8009620:	4604      	mov	r4, r0
 8009622:	4608      	mov	r0, r1
 8009624:	4611      	mov	r1, r2
 8009626:	2200      	movs	r2, #0
 8009628:	602a      	str	r2, [r5, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	f7f9 ffbf 	bl	80035ae <_read>
 8009630:	1c43      	adds	r3, r0, #1
 8009632:	d102      	bne.n	800963a <_read_r+0x1e>
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	b103      	cbz	r3, 800963a <_read_r+0x1e>
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	bd38      	pop	{r3, r4, r5, pc}
 800963c:	20000c54 	.word	0x20000c54

08009640 <_sbrk_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4d06      	ldr	r5, [pc, #24]	@ (800965c <_sbrk_r+0x1c>)
 8009644:	2300      	movs	r3, #0
 8009646:	4604      	mov	r4, r0
 8009648:	4608      	mov	r0, r1
 800964a:	602b      	str	r3, [r5, #0]
 800964c:	f7fa f81c 	bl	8003688 <_sbrk>
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	d102      	bne.n	800965a <_sbrk_r+0x1a>
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	b103      	cbz	r3, 800965a <_sbrk_r+0x1a>
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	bd38      	pop	{r3, r4, r5, pc}
 800965c:	20000c54 	.word	0x20000c54

08009660 <_write_r>:
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	4d07      	ldr	r5, [pc, #28]	@ (8009680 <_write_r+0x20>)
 8009664:	4604      	mov	r4, r0
 8009666:	4608      	mov	r0, r1
 8009668:	4611      	mov	r1, r2
 800966a:	2200      	movs	r2, #0
 800966c:	602a      	str	r2, [r5, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	f7f9 ffba 	bl	80035e8 <_write>
 8009674:	1c43      	adds	r3, r0, #1
 8009676:	d102      	bne.n	800967e <_write_r+0x1e>
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	b103      	cbz	r3, 800967e <_write_r+0x1e>
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	bd38      	pop	{r3, r4, r5, pc}
 8009680:	20000c54 	.word	0x20000c54

08009684 <__errno>:
 8009684:	4b01      	ldr	r3, [pc, #4]	@ (800968c <__errno+0x8>)
 8009686:	6818      	ldr	r0, [r3, #0]
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	2000003c 	.word	0x2000003c

08009690 <__libc_init_array>:
 8009690:	b570      	push	{r4, r5, r6, lr}
 8009692:	4d0d      	ldr	r5, [pc, #52]	@ (80096c8 <__libc_init_array+0x38>)
 8009694:	4c0d      	ldr	r4, [pc, #52]	@ (80096cc <__libc_init_array+0x3c>)
 8009696:	1b64      	subs	r4, r4, r5
 8009698:	10a4      	asrs	r4, r4, #2
 800969a:	2600      	movs	r6, #0
 800969c:	42a6      	cmp	r6, r4
 800969e:	d109      	bne.n	80096b4 <__libc_init_array+0x24>
 80096a0:	4d0b      	ldr	r5, [pc, #44]	@ (80096d0 <__libc_init_array+0x40>)
 80096a2:	4c0c      	ldr	r4, [pc, #48]	@ (80096d4 <__libc_init_array+0x44>)
 80096a4:	f001 ffaa 	bl	800b5fc <_init>
 80096a8:	1b64      	subs	r4, r4, r5
 80096aa:	10a4      	asrs	r4, r4, #2
 80096ac:	2600      	movs	r6, #0
 80096ae:	42a6      	cmp	r6, r4
 80096b0:	d105      	bne.n	80096be <__libc_init_array+0x2e>
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096b8:	4798      	blx	r3
 80096ba:	3601      	adds	r6, #1
 80096bc:	e7ee      	b.n	800969c <__libc_init_array+0xc>
 80096be:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c2:	4798      	blx	r3
 80096c4:	3601      	adds	r6, #1
 80096c6:	e7f2      	b.n	80096ae <__libc_init_array+0x1e>
 80096c8:	0800be20 	.word	0x0800be20
 80096cc:	0800be20 	.word	0x0800be20
 80096d0:	0800be20 	.word	0x0800be20
 80096d4:	0800be24 	.word	0x0800be24

080096d8 <__retarget_lock_init_recursive>:
 80096d8:	4770      	bx	lr

080096da <__retarget_lock_acquire_recursive>:
 80096da:	4770      	bx	lr

080096dc <__retarget_lock_release_recursive>:
 80096dc:	4770      	bx	lr

080096de <strcpy>:
 80096de:	4603      	mov	r3, r0
 80096e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096e4:	f803 2b01 	strb.w	r2, [r3], #1
 80096e8:	2a00      	cmp	r2, #0
 80096ea:	d1f9      	bne.n	80096e0 <strcpy+0x2>
 80096ec:	4770      	bx	lr

080096ee <memcpy>:
 80096ee:	440a      	add	r2, r1
 80096f0:	4291      	cmp	r1, r2
 80096f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80096f6:	d100      	bne.n	80096fa <memcpy+0xc>
 80096f8:	4770      	bx	lr
 80096fa:	b510      	push	{r4, lr}
 80096fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009700:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009704:	4291      	cmp	r1, r2
 8009706:	d1f9      	bne.n	80096fc <memcpy+0xe>
 8009708:	bd10      	pop	{r4, pc}

0800970a <quorem>:
 800970a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970e:	6903      	ldr	r3, [r0, #16]
 8009710:	690c      	ldr	r4, [r1, #16]
 8009712:	42a3      	cmp	r3, r4
 8009714:	4607      	mov	r7, r0
 8009716:	db7e      	blt.n	8009816 <quorem+0x10c>
 8009718:	3c01      	subs	r4, #1
 800971a:	f101 0814 	add.w	r8, r1, #20
 800971e:	00a3      	lsls	r3, r4, #2
 8009720:	f100 0514 	add.w	r5, r0, #20
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800972a:	9301      	str	r3, [sp, #4]
 800972c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009734:	3301      	adds	r3, #1
 8009736:	429a      	cmp	r2, r3
 8009738:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800973c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009740:	d32e      	bcc.n	80097a0 <quorem+0x96>
 8009742:	f04f 0a00 	mov.w	sl, #0
 8009746:	46c4      	mov	ip, r8
 8009748:	46ae      	mov	lr, r5
 800974a:	46d3      	mov	fp, sl
 800974c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009750:	b298      	uxth	r0, r3
 8009752:	fb06 a000 	mla	r0, r6, r0, sl
 8009756:	0c02      	lsrs	r2, r0, #16
 8009758:	0c1b      	lsrs	r3, r3, #16
 800975a:	fb06 2303 	mla	r3, r6, r3, r2
 800975e:	f8de 2000 	ldr.w	r2, [lr]
 8009762:	b280      	uxth	r0, r0
 8009764:	b292      	uxth	r2, r2
 8009766:	1a12      	subs	r2, r2, r0
 8009768:	445a      	add	r2, fp
 800976a:	f8de 0000 	ldr.w	r0, [lr]
 800976e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009772:	b29b      	uxth	r3, r3
 8009774:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009778:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800977c:	b292      	uxth	r2, r2
 800977e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009782:	45e1      	cmp	r9, ip
 8009784:	f84e 2b04 	str.w	r2, [lr], #4
 8009788:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800978c:	d2de      	bcs.n	800974c <quorem+0x42>
 800978e:	9b00      	ldr	r3, [sp, #0]
 8009790:	58eb      	ldr	r3, [r5, r3]
 8009792:	b92b      	cbnz	r3, 80097a0 <quorem+0x96>
 8009794:	9b01      	ldr	r3, [sp, #4]
 8009796:	3b04      	subs	r3, #4
 8009798:	429d      	cmp	r5, r3
 800979a:	461a      	mov	r2, r3
 800979c:	d32f      	bcc.n	80097fe <quorem+0xf4>
 800979e:	613c      	str	r4, [r7, #16]
 80097a0:	4638      	mov	r0, r7
 80097a2:	f001 f8c5 	bl	800a930 <__mcmp>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	db25      	blt.n	80097f6 <quorem+0xec>
 80097aa:	4629      	mov	r1, r5
 80097ac:	2000      	movs	r0, #0
 80097ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80097b2:	f8d1 c000 	ldr.w	ip, [r1]
 80097b6:	fa1f fe82 	uxth.w	lr, r2
 80097ba:	fa1f f38c 	uxth.w	r3, ip
 80097be:	eba3 030e 	sub.w	r3, r3, lr
 80097c2:	4403      	add	r3, r0
 80097c4:	0c12      	lsrs	r2, r2, #16
 80097c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80097ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097d4:	45c1      	cmp	r9, r8
 80097d6:	f841 3b04 	str.w	r3, [r1], #4
 80097da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80097de:	d2e6      	bcs.n	80097ae <quorem+0xa4>
 80097e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097e8:	b922      	cbnz	r2, 80097f4 <quorem+0xea>
 80097ea:	3b04      	subs	r3, #4
 80097ec:	429d      	cmp	r5, r3
 80097ee:	461a      	mov	r2, r3
 80097f0:	d30b      	bcc.n	800980a <quorem+0x100>
 80097f2:	613c      	str	r4, [r7, #16]
 80097f4:	3601      	adds	r6, #1
 80097f6:	4630      	mov	r0, r6
 80097f8:	b003      	add	sp, #12
 80097fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fe:	6812      	ldr	r2, [r2, #0]
 8009800:	3b04      	subs	r3, #4
 8009802:	2a00      	cmp	r2, #0
 8009804:	d1cb      	bne.n	800979e <quorem+0x94>
 8009806:	3c01      	subs	r4, #1
 8009808:	e7c6      	b.n	8009798 <quorem+0x8e>
 800980a:	6812      	ldr	r2, [r2, #0]
 800980c:	3b04      	subs	r3, #4
 800980e:	2a00      	cmp	r2, #0
 8009810:	d1ef      	bne.n	80097f2 <quorem+0xe8>
 8009812:	3c01      	subs	r4, #1
 8009814:	e7ea      	b.n	80097ec <quorem+0xe2>
 8009816:	2000      	movs	r0, #0
 8009818:	e7ee      	b.n	80097f8 <quorem+0xee>
 800981a:	0000      	movs	r0, r0
 800981c:	0000      	movs	r0, r0
	...

08009820 <_dtoa_r>:
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	69c7      	ldr	r7, [r0, #28]
 8009826:	b099      	sub	sp, #100	@ 0x64
 8009828:	ed8d 0b02 	vstr	d0, [sp, #8]
 800982c:	ec55 4b10 	vmov	r4, r5, d0
 8009830:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009832:	9109      	str	r1, [sp, #36]	@ 0x24
 8009834:	4683      	mov	fp, r0
 8009836:	920e      	str	r2, [sp, #56]	@ 0x38
 8009838:	9313      	str	r3, [sp, #76]	@ 0x4c
 800983a:	b97f      	cbnz	r7, 800985c <_dtoa_r+0x3c>
 800983c:	2010      	movs	r0, #16
 800983e:	f7fe ff51 	bl	80086e4 <malloc>
 8009842:	4602      	mov	r2, r0
 8009844:	f8cb 001c 	str.w	r0, [fp, #28]
 8009848:	b920      	cbnz	r0, 8009854 <_dtoa_r+0x34>
 800984a:	4ba7      	ldr	r3, [pc, #668]	@ (8009ae8 <_dtoa_r+0x2c8>)
 800984c:	21ef      	movs	r1, #239	@ 0xef
 800984e:	48a7      	ldr	r0, [pc, #668]	@ (8009aec <_dtoa_r+0x2cc>)
 8009850:	f001 fd6a 	bl	800b328 <__assert_func>
 8009854:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009858:	6007      	str	r7, [r0, #0]
 800985a:	60c7      	str	r7, [r0, #12]
 800985c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009860:	6819      	ldr	r1, [r3, #0]
 8009862:	b159      	cbz	r1, 800987c <_dtoa_r+0x5c>
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	604a      	str	r2, [r1, #4]
 8009868:	2301      	movs	r3, #1
 800986a:	4093      	lsls	r3, r2
 800986c:	608b      	str	r3, [r1, #8]
 800986e:	4658      	mov	r0, fp
 8009870:	f000 fe24 	bl	800a4bc <_Bfree>
 8009874:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009878:	2200      	movs	r2, #0
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	1e2b      	subs	r3, r5, #0
 800987e:	bfb9      	ittee	lt
 8009880:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009884:	9303      	strlt	r3, [sp, #12]
 8009886:	2300      	movge	r3, #0
 8009888:	6033      	strge	r3, [r6, #0]
 800988a:	9f03      	ldr	r7, [sp, #12]
 800988c:	4b98      	ldr	r3, [pc, #608]	@ (8009af0 <_dtoa_r+0x2d0>)
 800988e:	bfbc      	itt	lt
 8009890:	2201      	movlt	r2, #1
 8009892:	6032      	strlt	r2, [r6, #0]
 8009894:	43bb      	bics	r3, r7
 8009896:	d112      	bne.n	80098be <_dtoa_r+0x9e>
 8009898:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800989a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800989e:	6013      	str	r3, [r2, #0]
 80098a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80098a4:	4323      	orrs	r3, r4
 80098a6:	f000 854d 	beq.w	800a344 <_dtoa_r+0xb24>
 80098aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009b04 <_dtoa_r+0x2e4>
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 854f 	beq.w	800a354 <_dtoa_r+0xb34>
 80098b6:	f10a 0303 	add.w	r3, sl, #3
 80098ba:	f000 bd49 	b.w	800a350 <_dtoa_r+0xb30>
 80098be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098c2:	2200      	movs	r2, #0
 80098c4:	ec51 0b17 	vmov	r0, r1, d7
 80098c8:	2300      	movs	r3, #0
 80098ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80098ce:	f7f7 f90b 	bl	8000ae8 <__aeabi_dcmpeq>
 80098d2:	4680      	mov	r8, r0
 80098d4:	b158      	cbz	r0, 80098ee <_dtoa_r+0xce>
 80098d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80098d8:	2301      	movs	r3, #1
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098de:	b113      	cbz	r3, 80098e6 <_dtoa_r+0xc6>
 80098e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80098e2:	4b84      	ldr	r3, [pc, #528]	@ (8009af4 <_dtoa_r+0x2d4>)
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009b08 <_dtoa_r+0x2e8>
 80098ea:	f000 bd33 	b.w	800a354 <_dtoa_r+0xb34>
 80098ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80098f2:	aa16      	add	r2, sp, #88	@ 0x58
 80098f4:	a917      	add	r1, sp, #92	@ 0x5c
 80098f6:	4658      	mov	r0, fp
 80098f8:	f001 f8ca 	bl	800aa90 <__d2b>
 80098fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009900:	4681      	mov	r9, r0
 8009902:	2e00      	cmp	r6, #0
 8009904:	d077      	beq.n	80099f6 <_dtoa_r+0x1d6>
 8009906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009908:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800990c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009914:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009918:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800991c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009920:	4619      	mov	r1, r3
 8009922:	2200      	movs	r2, #0
 8009924:	4b74      	ldr	r3, [pc, #464]	@ (8009af8 <_dtoa_r+0x2d8>)
 8009926:	f7f6 fcbf 	bl	80002a8 <__aeabi_dsub>
 800992a:	a369      	add	r3, pc, #420	@ (adr r3, 8009ad0 <_dtoa_r+0x2b0>)
 800992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009930:	f7f6 fe72 	bl	8000618 <__aeabi_dmul>
 8009934:	a368      	add	r3, pc, #416	@ (adr r3, 8009ad8 <_dtoa_r+0x2b8>)
 8009936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993a:	f7f6 fcb7 	bl	80002ac <__adddf3>
 800993e:	4604      	mov	r4, r0
 8009940:	4630      	mov	r0, r6
 8009942:	460d      	mov	r5, r1
 8009944:	f7f6 fdfe 	bl	8000544 <__aeabi_i2d>
 8009948:	a365      	add	r3, pc, #404	@ (adr r3, 8009ae0 <_dtoa_r+0x2c0>)
 800994a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994e:	f7f6 fe63 	bl	8000618 <__aeabi_dmul>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	4620      	mov	r0, r4
 8009958:	4629      	mov	r1, r5
 800995a:	f7f6 fca7 	bl	80002ac <__adddf3>
 800995e:	4604      	mov	r4, r0
 8009960:	460d      	mov	r5, r1
 8009962:	f7f7 f909 	bl	8000b78 <__aeabi_d2iz>
 8009966:	2200      	movs	r2, #0
 8009968:	4607      	mov	r7, r0
 800996a:	2300      	movs	r3, #0
 800996c:	4620      	mov	r0, r4
 800996e:	4629      	mov	r1, r5
 8009970:	f7f7 f8c4 	bl	8000afc <__aeabi_dcmplt>
 8009974:	b140      	cbz	r0, 8009988 <_dtoa_r+0x168>
 8009976:	4638      	mov	r0, r7
 8009978:	f7f6 fde4 	bl	8000544 <__aeabi_i2d>
 800997c:	4622      	mov	r2, r4
 800997e:	462b      	mov	r3, r5
 8009980:	f7f7 f8b2 	bl	8000ae8 <__aeabi_dcmpeq>
 8009984:	b900      	cbnz	r0, 8009988 <_dtoa_r+0x168>
 8009986:	3f01      	subs	r7, #1
 8009988:	2f16      	cmp	r7, #22
 800998a:	d851      	bhi.n	8009a30 <_dtoa_r+0x210>
 800998c:	4b5b      	ldr	r3, [pc, #364]	@ (8009afc <_dtoa_r+0x2dc>)
 800998e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800999a:	f7f7 f8af 	bl	8000afc <__aeabi_dcmplt>
 800999e:	2800      	cmp	r0, #0
 80099a0:	d048      	beq.n	8009a34 <_dtoa_r+0x214>
 80099a2:	3f01      	subs	r7, #1
 80099a4:	2300      	movs	r3, #0
 80099a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80099a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80099aa:	1b9b      	subs	r3, r3, r6
 80099ac:	1e5a      	subs	r2, r3, #1
 80099ae:	bf44      	itt	mi
 80099b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80099b4:	2300      	movmi	r3, #0
 80099b6:	9208      	str	r2, [sp, #32]
 80099b8:	bf54      	ite	pl
 80099ba:	f04f 0800 	movpl.w	r8, #0
 80099be:	9308      	strmi	r3, [sp, #32]
 80099c0:	2f00      	cmp	r7, #0
 80099c2:	db39      	blt.n	8009a38 <_dtoa_r+0x218>
 80099c4:	9b08      	ldr	r3, [sp, #32]
 80099c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80099c8:	443b      	add	r3, r7
 80099ca:	9308      	str	r3, [sp, #32]
 80099cc:	2300      	movs	r3, #0
 80099ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80099d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d2:	2b09      	cmp	r3, #9
 80099d4:	d864      	bhi.n	8009aa0 <_dtoa_r+0x280>
 80099d6:	2b05      	cmp	r3, #5
 80099d8:	bfc4      	itt	gt
 80099da:	3b04      	subgt	r3, #4
 80099dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80099de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099e0:	f1a3 0302 	sub.w	r3, r3, #2
 80099e4:	bfcc      	ite	gt
 80099e6:	2400      	movgt	r4, #0
 80099e8:	2401      	movle	r4, #1
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d863      	bhi.n	8009ab6 <_dtoa_r+0x296>
 80099ee:	e8df f003 	tbb	[pc, r3]
 80099f2:	372a      	.short	0x372a
 80099f4:	5535      	.short	0x5535
 80099f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80099fa:	441e      	add	r6, r3
 80099fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009a00:	2b20      	cmp	r3, #32
 8009a02:	bfc1      	itttt	gt
 8009a04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009a08:	409f      	lslgt	r7, r3
 8009a0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009a0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009a12:	bfd6      	itet	le
 8009a14:	f1c3 0320 	rsble	r3, r3, #32
 8009a18:	ea47 0003 	orrgt.w	r0, r7, r3
 8009a1c:	fa04 f003 	lslle.w	r0, r4, r3
 8009a20:	f7f6 fd80 	bl	8000524 <__aeabi_ui2d>
 8009a24:	2201      	movs	r2, #1
 8009a26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009a2a:	3e01      	subs	r6, #1
 8009a2c:	9214      	str	r2, [sp, #80]	@ 0x50
 8009a2e:	e777      	b.n	8009920 <_dtoa_r+0x100>
 8009a30:	2301      	movs	r3, #1
 8009a32:	e7b8      	b.n	80099a6 <_dtoa_r+0x186>
 8009a34:	9012      	str	r0, [sp, #72]	@ 0x48
 8009a36:	e7b7      	b.n	80099a8 <_dtoa_r+0x188>
 8009a38:	427b      	negs	r3, r7
 8009a3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	eba8 0807 	sub.w	r8, r8, r7
 8009a42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a44:	e7c4      	b.n	80099d0 <_dtoa_r+0x1b0>
 8009a46:	2300      	movs	r3, #0
 8009a48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	dc35      	bgt.n	8009abc <_dtoa_r+0x29c>
 8009a50:	2301      	movs	r3, #1
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	9307      	str	r3, [sp, #28]
 8009a56:	461a      	mov	r2, r3
 8009a58:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a5a:	e00b      	b.n	8009a74 <_dtoa_r+0x254>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e7f3      	b.n	8009a48 <_dtoa_r+0x228>
 8009a60:	2300      	movs	r3, #0
 8009a62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a66:	18fb      	adds	r3, r7, r3
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	9307      	str	r3, [sp, #28]
 8009a70:	bfb8      	it	lt
 8009a72:	2301      	movlt	r3, #1
 8009a74:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009a78:	2100      	movs	r1, #0
 8009a7a:	2204      	movs	r2, #4
 8009a7c:	f102 0514 	add.w	r5, r2, #20
 8009a80:	429d      	cmp	r5, r3
 8009a82:	d91f      	bls.n	8009ac4 <_dtoa_r+0x2a4>
 8009a84:	6041      	str	r1, [r0, #4]
 8009a86:	4658      	mov	r0, fp
 8009a88:	f000 fcd8 	bl	800a43c <_Balloc>
 8009a8c:	4682      	mov	sl, r0
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d13c      	bne.n	8009b0c <_dtoa_r+0x2ec>
 8009a92:	4b1b      	ldr	r3, [pc, #108]	@ (8009b00 <_dtoa_r+0x2e0>)
 8009a94:	4602      	mov	r2, r0
 8009a96:	f240 11af 	movw	r1, #431	@ 0x1af
 8009a9a:	e6d8      	b.n	800984e <_dtoa_r+0x2e>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e7e0      	b.n	8009a62 <_dtoa_r+0x242>
 8009aa0:	2401      	movs	r4, #1
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aa6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	9307      	str	r3, [sp, #28]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2312      	movs	r3, #18
 8009ab4:	e7d0      	b.n	8009a58 <_dtoa_r+0x238>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009aba:	e7f5      	b.n	8009aa8 <_dtoa_r+0x288>
 8009abc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	9307      	str	r3, [sp, #28]
 8009ac2:	e7d7      	b.n	8009a74 <_dtoa_r+0x254>
 8009ac4:	3101      	adds	r1, #1
 8009ac6:	0052      	lsls	r2, r2, #1
 8009ac8:	e7d8      	b.n	8009a7c <_dtoa_r+0x25c>
 8009aca:	bf00      	nop
 8009acc:	f3af 8000 	nop.w
 8009ad0:	636f4361 	.word	0x636f4361
 8009ad4:	3fd287a7 	.word	0x3fd287a7
 8009ad8:	8b60c8b3 	.word	0x8b60c8b3
 8009adc:	3fc68a28 	.word	0x3fc68a28
 8009ae0:	509f79fb 	.word	0x509f79fb
 8009ae4:	3fd34413 	.word	0x3fd34413
 8009ae8:	0800bbe6 	.word	0x0800bbe6
 8009aec:	0800bbfd 	.word	0x0800bbfd
 8009af0:	7ff00000 	.word	0x7ff00000
 8009af4:	0800bbb6 	.word	0x0800bbb6
 8009af8:	3ff80000 	.word	0x3ff80000
 8009afc:	0800bcf8 	.word	0x0800bcf8
 8009b00:	0800bc55 	.word	0x0800bc55
 8009b04:	0800bbe2 	.word	0x0800bbe2
 8009b08:	0800bbb5 	.word	0x0800bbb5
 8009b0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009b10:	6018      	str	r0, [r3, #0]
 8009b12:	9b07      	ldr	r3, [sp, #28]
 8009b14:	2b0e      	cmp	r3, #14
 8009b16:	f200 80a4 	bhi.w	8009c62 <_dtoa_r+0x442>
 8009b1a:	2c00      	cmp	r4, #0
 8009b1c:	f000 80a1 	beq.w	8009c62 <_dtoa_r+0x442>
 8009b20:	2f00      	cmp	r7, #0
 8009b22:	dd33      	ble.n	8009b8c <_dtoa_r+0x36c>
 8009b24:	4bad      	ldr	r3, [pc, #692]	@ (8009ddc <_dtoa_r+0x5bc>)
 8009b26:	f007 020f 	and.w	r2, r7, #15
 8009b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b2e:	ed93 7b00 	vldr	d7, [r3]
 8009b32:	05f8      	lsls	r0, r7, #23
 8009b34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009b38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009b3c:	d516      	bpl.n	8009b6c <_dtoa_r+0x34c>
 8009b3e:	4ba8      	ldr	r3, [pc, #672]	@ (8009de0 <_dtoa_r+0x5c0>)
 8009b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b48:	f7f6 fe90 	bl	800086c <__aeabi_ddiv>
 8009b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b50:	f004 040f 	and.w	r4, r4, #15
 8009b54:	2603      	movs	r6, #3
 8009b56:	4da2      	ldr	r5, [pc, #648]	@ (8009de0 <_dtoa_r+0x5c0>)
 8009b58:	b954      	cbnz	r4, 8009b70 <_dtoa_r+0x350>
 8009b5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b62:	f7f6 fe83 	bl	800086c <__aeabi_ddiv>
 8009b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b6a:	e028      	b.n	8009bbe <_dtoa_r+0x39e>
 8009b6c:	2602      	movs	r6, #2
 8009b6e:	e7f2      	b.n	8009b56 <_dtoa_r+0x336>
 8009b70:	07e1      	lsls	r1, r4, #31
 8009b72:	d508      	bpl.n	8009b86 <_dtoa_r+0x366>
 8009b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b7c:	f7f6 fd4c 	bl	8000618 <__aeabi_dmul>
 8009b80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b84:	3601      	adds	r6, #1
 8009b86:	1064      	asrs	r4, r4, #1
 8009b88:	3508      	adds	r5, #8
 8009b8a:	e7e5      	b.n	8009b58 <_dtoa_r+0x338>
 8009b8c:	f000 80d2 	beq.w	8009d34 <_dtoa_r+0x514>
 8009b90:	427c      	negs	r4, r7
 8009b92:	4b92      	ldr	r3, [pc, #584]	@ (8009ddc <_dtoa_r+0x5bc>)
 8009b94:	4d92      	ldr	r5, [pc, #584]	@ (8009de0 <_dtoa_r+0x5c0>)
 8009b96:	f004 020f 	and.w	r2, r4, #15
 8009b9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ba6:	f7f6 fd37 	bl	8000618 <__aeabi_dmul>
 8009baa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bae:	1124      	asrs	r4, r4, #4
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	2602      	movs	r6, #2
 8009bb4:	2c00      	cmp	r4, #0
 8009bb6:	f040 80b2 	bne.w	8009d1e <_dtoa_r+0x4fe>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1d3      	bne.n	8009b66 <_dtoa_r+0x346>
 8009bbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009bc0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 80b7 	beq.w	8009d38 <_dtoa_r+0x518>
 8009bca:	4b86      	ldr	r3, [pc, #536]	@ (8009de4 <_dtoa_r+0x5c4>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	4620      	mov	r0, r4
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	f7f6 ff93 	bl	8000afc <__aeabi_dcmplt>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	f000 80ae 	beq.w	8009d38 <_dtoa_r+0x518>
 8009bdc:	9b07      	ldr	r3, [sp, #28]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f000 80aa 	beq.w	8009d38 <_dtoa_r+0x518>
 8009be4:	9b00      	ldr	r3, [sp, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	dd37      	ble.n	8009c5a <_dtoa_r+0x43a>
 8009bea:	1e7b      	subs	r3, r7, #1
 8009bec:	9304      	str	r3, [sp, #16]
 8009bee:	4620      	mov	r0, r4
 8009bf0:	4b7d      	ldr	r3, [pc, #500]	@ (8009de8 <_dtoa_r+0x5c8>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	f7f6 fd0f 	bl	8000618 <__aeabi_dmul>
 8009bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bfe:	9c00      	ldr	r4, [sp, #0]
 8009c00:	3601      	adds	r6, #1
 8009c02:	4630      	mov	r0, r6
 8009c04:	f7f6 fc9e 	bl	8000544 <__aeabi_i2d>
 8009c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c0c:	f7f6 fd04 	bl	8000618 <__aeabi_dmul>
 8009c10:	4b76      	ldr	r3, [pc, #472]	@ (8009dec <_dtoa_r+0x5cc>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	f7f6 fb4a 	bl	80002ac <__adddf3>
 8009c18:	4605      	mov	r5, r0
 8009c1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009c1e:	2c00      	cmp	r4, #0
 8009c20:	f040 808d 	bne.w	8009d3e <_dtoa_r+0x51e>
 8009c24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c28:	4b71      	ldr	r3, [pc, #452]	@ (8009df0 <_dtoa_r+0x5d0>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f7f6 fb3c 	bl	80002a8 <__aeabi_dsub>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c38:	462a      	mov	r2, r5
 8009c3a:	4633      	mov	r3, r6
 8009c3c:	f7f6 ff7c 	bl	8000b38 <__aeabi_dcmpgt>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	f040 828b 	bne.w	800a15c <_dtoa_r+0x93c>
 8009c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c4a:	462a      	mov	r2, r5
 8009c4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009c50:	f7f6 ff54 	bl	8000afc <__aeabi_dcmplt>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	f040 8128 	bne.w	8009eaa <_dtoa_r+0x68a>
 8009c5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009c5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009c62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f2c0 815a 	blt.w	8009f1e <_dtoa_r+0x6fe>
 8009c6a:	2f0e      	cmp	r7, #14
 8009c6c:	f300 8157 	bgt.w	8009f1e <_dtoa_r+0x6fe>
 8009c70:	4b5a      	ldr	r3, [pc, #360]	@ (8009ddc <_dtoa_r+0x5bc>)
 8009c72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c76:	ed93 7b00 	vldr	d7, [r3]
 8009c7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	ed8d 7b00 	vstr	d7, [sp]
 8009c82:	da03      	bge.n	8009c8c <_dtoa_r+0x46c>
 8009c84:	9b07      	ldr	r3, [sp, #28]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f340 8101 	ble.w	8009e8e <_dtoa_r+0x66e>
 8009c8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009c90:	4656      	mov	r6, sl
 8009c92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c96:	4620      	mov	r0, r4
 8009c98:	4629      	mov	r1, r5
 8009c9a:	f7f6 fde7 	bl	800086c <__aeabi_ddiv>
 8009c9e:	f7f6 ff6b 	bl	8000b78 <__aeabi_d2iz>
 8009ca2:	4680      	mov	r8, r0
 8009ca4:	f7f6 fc4e 	bl	8000544 <__aeabi_i2d>
 8009ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cac:	f7f6 fcb4 	bl	8000618 <__aeabi_dmul>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	4629      	mov	r1, r5
 8009cb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009cbc:	f7f6 faf4 	bl	80002a8 <__aeabi_dsub>
 8009cc0:	f806 4b01 	strb.w	r4, [r6], #1
 8009cc4:	9d07      	ldr	r5, [sp, #28]
 8009cc6:	eba6 040a 	sub.w	r4, r6, sl
 8009cca:	42a5      	cmp	r5, r4
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	f040 8117 	bne.w	8009f02 <_dtoa_r+0x6e2>
 8009cd4:	f7f6 faea 	bl	80002ac <__adddf3>
 8009cd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cdc:	4604      	mov	r4, r0
 8009cde:	460d      	mov	r5, r1
 8009ce0:	f7f6 ff2a 	bl	8000b38 <__aeabi_dcmpgt>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	f040 80f9 	bne.w	8009edc <_dtoa_r+0x6bc>
 8009cea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cee:	4620      	mov	r0, r4
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	f7f6 fef9 	bl	8000ae8 <__aeabi_dcmpeq>
 8009cf6:	b118      	cbz	r0, 8009d00 <_dtoa_r+0x4e0>
 8009cf8:	f018 0f01 	tst.w	r8, #1
 8009cfc:	f040 80ee 	bne.w	8009edc <_dtoa_r+0x6bc>
 8009d00:	4649      	mov	r1, r9
 8009d02:	4658      	mov	r0, fp
 8009d04:	f000 fbda 	bl	800a4bc <_Bfree>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	7033      	strb	r3, [r6, #0]
 8009d0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d0e:	3701      	adds	r7, #1
 8009d10:	601f      	str	r7, [r3, #0]
 8009d12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f000 831d 	beq.w	800a354 <_dtoa_r+0xb34>
 8009d1a:	601e      	str	r6, [r3, #0]
 8009d1c:	e31a      	b.n	800a354 <_dtoa_r+0xb34>
 8009d1e:	07e2      	lsls	r2, r4, #31
 8009d20:	d505      	bpl.n	8009d2e <_dtoa_r+0x50e>
 8009d22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d26:	f7f6 fc77 	bl	8000618 <__aeabi_dmul>
 8009d2a:	3601      	adds	r6, #1
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	1064      	asrs	r4, r4, #1
 8009d30:	3508      	adds	r5, #8
 8009d32:	e73f      	b.n	8009bb4 <_dtoa_r+0x394>
 8009d34:	2602      	movs	r6, #2
 8009d36:	e742      	b.n	8009bbe <_dtoa_r+0x39e>
 8009d38:	9c07      	ldr	r4, [sp, #28]
 8009d3a:	9704      	str	r7, [sp, #16]
 8009d3c:	e761      	b.n	8009c02 <_dtoa_r+0x3e2>
 8009d3e:	4b27      	ldr	r3, [pc, #156]	@ (8009ddc <_dtoa_r+0x5bc>)
 8009d40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d4a:	4454      	add	r4, sl
 8009d4c:	2900      	cmp	r1, #0
 8009d4e:	d053      	beq.n	8009df8 <_dtoa_r+0x5d8>
 8009d50:	4928      	ldr	r1, [pc, #160]	@ (8009df4 <_dtoa_r+0x5d4>)
 8009d52:	2000      	movs	r0, #0
 8009d54:	f7f6 fd8a 	bl	800086c <__aeabi_ddiv>
 8009d58:	4633      	mov	r3, r6
 8009d5a:	462a      	mov	r2, r5
 8009d5c:	f7f6 faa4 	bl	80002a8 <__aeabi_dsub>
 8009d60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d64:	4656      	mov	r6, sl
 8009d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d6a:	f7f6 ff05 	bl	8000b78 <__aeabi_d2iz>
 8009d6e:	4605      	mov	r5, r0
 8009d70:	f7f6 fbe8 	bl	8000544 <__aeabi_i2d>
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d7c:	f7f6 fa94 	bl	80002a8 <__aeabi_dsub>
 8009d80:	3530      	adds	r5, #48	@ 0x30
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d8a:	f806 5b01 	strb.w	r5, [r6], #1
 8009d8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d92:	f7f6 feb3 	bl	8000afc <__aeabi_dcmplt>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d171      	bne.n	8009e7e <_dtoa_r+0x65e>
 8009d9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d9e:	4911      	ldr	r1, [pc, #68]	@ (8009de4 <_dtoa_r+0x5c4>)
 8009da0:	2000      	movs	r0, #0
 8009da2:	f7f6 fa81 	bl	80002a8 <__aeabi_dsub>
 8009da6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009daa:	f7f6 fea7 	bl	8000afc <__aeabi_dcmplt>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	f040 8095 	bne.w	8009ede <_dtoa_r+0x6be>
 8009db4:	42a6      	cmp	r6, r4
 8009db6:	f43f af50 	beq.w	8009c5a <_dtoa_r+0x43a>
 8009dba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8009de8 <_dtoa_r+0x5c8>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f7f6 fc29 	bl	8000618 <__aeabi_dmul>
 8009dc6:	4b08      	ldr	r3, [pc, #32]	@ (8009de8 <_dtoa_r+0x5c8>)
 8009dc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009dcc:	2200      	movs	r2, #0
 8009dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dd2:	f7f6 fc21 	bl	8000618 <__aeabi_dmul>
 8009dd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dda:	e7c4      	b.n	8009d66 <_dtoa_r+0x546>
 8009ddc:	0800bcf8 	.word	0x0800bcf8
 8009de0:	0800bcd0 	.word	0x0800bcd0
 8009de4:	3ff00000 	.word	0x3ff00000
 8009de8:	40240000 	.word	0x40240000
 8009dec:	401c0000 	.word	0x401c0000
 8009df0:	40140000 	.word	0x40140000
 8009df4:	3fe00000 	.word	0x3fe00000
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	f7f6 fc0c 	bl	8000618 <__aeabi_dmul>
 8009e00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e04:	9415      	str	r4, [sp, #84]	@ 0x54
 8009e06:	4656      	mov	r6, sl
 8009e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e0c:	f7f6 feb4 	bl	8000b78 <__aeabi_d2iz>
 8009e10:	4605      	mov	r5, r0
 8009e12:	f7f6 fb97 	bl	8000544 <__aeabi_i2d>
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e1e:	f7f6 fa43 	bl	80002a8 <__aeabi_dsub>
 8009e22:	3530      	adds	r5, #48	@ 0x30
 8009e24:	f806 5b01 	strb.w	r5, [r6], #1
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	42a6      	cmp	r6, r4
 8009e2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e32:	f04f 0200 	mov.w	r2, #0
 8009e36:	d124      	bne.n	8009e82 <_dtoa_r+0x662>
 8009e38:	4bac      	ldr	r3, [pc, #688]	@ (800a0ec <_dtoa_r+0x8cc>)
 8009e3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009e3e:	f7f6 fa35 	bl	80002ac <__adddf3>
 8009e42:	4602      	mov	r2, r0
 8009e44:	460b      	mov	r3, r1
 8009e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e4a:	f7f6 fe75 	bl	8000b38 <__aeabi_dcmpgt>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d145      	bne.n	8009ede <_dtoa_r+0x6be>
 8009e52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e56:	49a5      	ldr	r1, [pc, #660]	@ (800a0ec <_dtoa_r+0x8cc>)
 8009e58:	2000      	movs	r0, #0
 8009e5a:	f7f6 fa25 	bl	80002a8 <__aeabi_dsub>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e66:	f7f6 fe49 	bl	8000afc <__aeabi_dcmplt>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	f43f aef5 	beq.w	8009c5a <_dtoa_r+0x43a>
 8009e70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009e72:	1e73      	subs	r3, r6, #1
 8009e74:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e7a:	2b30      	cmp	r3, #48	@ 0x30
 8009e7c:	d0f8      	beq.n	8009e70 <_dtoa_r+0x650>
 8009e7e:	9f04      	ldr	r7, [sp, #16]
 8009e80:	e73e      	b.n	8009d00 <_dtoa_r+0x4e0>
 8009e82:	4b9b      	ldr	r3, [pc, #620]	@ (800a0f0 <_dtoa_r+0x8d0>)
 8009e84:	f7f6 fbc8 	bl	8000618 <__aeabi_dmul>
 8009e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e8c:	e7bc      	b.n	8009e08 <_dtoa_r+0x5e8>
 8009e8e:	d10c      	bne.n	8009eaa <_dtoa_r+0x68a>
 8009e90:	4b98      	ldr	r3, [pc, #608]	@ (800a0f4 <_dtoa_r+0x8d4>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e98:	f7f6 fbbe 	bl	8000618 <__aeabi_dmul>
 8009e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ea0:	f7f6 fe40 	bl	8000b24 <__aeabi_dcmpge>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	f000 8157 	beq.w	800a158 <_dtoa_r+0x938>
 8009eaa:	2400      	movs	r4, #0
 8009eac:	4625      	mov	r5, r4
 8009eae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eb0:	43db      	mvns	r3, r3
 8009eb2:	9304      	str	r3, [sp, #16]
 8009eb4:	4656      	mov	r6, sl
 8009eb6:	2700      	movs	r7, #0
 8009eb8:	4621      	mov	r1, r4
 8009eba:	4658      	mov	r0, fp
 8009ebc:	f000 fafe 	bl	800a4bc <_Bfree>
 8009ec0:	2d00      	cmp	r5, #0
 8009ec2:	d0dc      	beq.n	8009e7e <_dtoa_r+0x65e>
 8009ec4:	b12f      	cbz	r7, 8009ed2 <_dtoa_r+0x6b2>
 8009ec6:	42af      	cmp	r7, r5
 8009ec8:	d003      	beq.n	8009ed2 <_dtoa_r+0x6b2>
 8009eca:	4639      	mov	r1, r7
 8009ecc:	4658      	mov	r0, fp
 8009ece:	f000 faf5 	bl	800a4bc <_Bfree>
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	4658      	mov	r0, fp
 8009ed6:	f000 faf1 	bl	800a4bc <_Bfree>
 8009eda:	e7d0      	b.n	8009e7e <_dtoa_r+0x65e>
 8009edc:	9704      	str	r7, [sp, #16]
 8009ede:	4633      	mov	r3, r6
 8009ee0:	461e      	mov	r6, r3
 8009ee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ee6:	2a39      	cmp	r2, #57	@ 0x39
 8009ee8:	d107      	bne.n	8009efa <_dtoa_r+0x6da>
 8009eea:	459a      	cmp	sl, r3
 8009eec:	d1f8      	bne.n	8009ee0 <_dtoa_r+0x6c0>
 8009eee:	9a04      	ldr	r2, [sp, #16]
 8009ef0:	3201      	adds	r2, #1
 8009ef2:	9204      	str	r2, [sp, #16]
 8009ef4:	2230      	movs	r2, #48	@ 0x30
 8009ef6:	f88a 2000 	strb.w	r2, [sl]
 8009efa:	781a      	ldrb	r2, [r3, #0]
 8009efc:	3201      	adds	r2, #1
 8009efe:	701a      	strb	r2, [r3, #0]
 8009f00:	e7bd      	b.n	8009e7e <_dtoa_r+0x65e>
 8009f02:	4b7b      	ldr	r3, [pc, #492]	@ (800a0f0 <_dtoa_r+0x8d0>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	f7f6 fb87 	bl	8000618 <__aeabi_dmul>
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4604      	mov	r4, r0
 8009f10:	460d      	mov	r5, r1
 8009f12:	f7f6 fde9 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	f43f aebb 	beq.w	8009c92 <_dtoa_r+0x472>
 8009f1c:	e6f0      	b.n	8009d00 <_dtoa_r+0x4e0>
 8009f1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009f20:	2a00      	cmp	r2, #0
 8009f22:	f000 80db 	beq.w	800a0dc <_dtoa_r+0x8bc>
 8009f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f28:	2a01      	cmp	r2, #1
 8009f2a:	f300 80bf 	bgt.w	800a0ac <_dtoa_r+0x88c>
 8009f2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009f30:	2a00      	cmp	r2, #0
 8009f32:	f000 80b7 	beq.w	800a0a4 <_dtoa_r+0x884>
 8009f36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009f3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009f3c:	4646      	mov	r6, r8
 8009f3e:	9a08      	ldr	r2, [sp, #32]
 8009f40:	2101      	movs	r1, #1
 8009f42:	441a      	add	r2, r3
 8009f44:	4658      	mov	r0, fp
 8009f46:	4498      	add	r8, r3
 8009f48:	9208      	str	r2, [sp, #32]
 8009f4a:	f000 fb6b 	bl	800a624 <__i2b>
 8009f4e:	4605      	mov	r5, r0
 8009f50:	b15e      	cbz	r6, 8009f6a <_dtoa_r+0x74a>
 8009f52:	9b08      	ldr	r3, [sp, #32]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	dd08      	ble.n	8009f6a <_dtoa_r+0x74a>
 8009f58:	42b3      	cmp	r3, r6
 8009f5a:	9a08      	ldr	r2, [sp, #32]
 8009f5c:	bfa8      	it	ge
 8009f5e:	4633      	movge	r3, r6
 8009f60:	eba8 0803 	sub.w	r8, r8, r3
 8009f64:	1af6      	subs	r6, r6, r3
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	9308      	str	r3, [sp, #32]
 8009f6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f6c:	b1f3      	cbz	r3, 8009fac <_dtoa_r+0x78c>
 8009f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 80b7 	beq.w	800a0e4 <_dtoa_r+0x8c4>
 8009f76:	b18c      	cbz	r4, 8009f9c <_dtoa_r+0x77c>
 8009f78:	4629      	mov	r1, r5
 8009f7a:	4622      	mov	r2, r4
 8009f7c:	4658      	mov	r0, fp
 8009f7e:	f000 fc11 	bl	800a7a4 <__pow5mult>
 8009f82:	464a      	mov	r2, r9
 8009f84:	4601      	mov	r1, r0
 8009f86:	4605      	mov	r5, r0
 8009f88:	4658      	mov	r0, fp
 8009f8a:	f000 fb61 	bl	800a650 <__multiply>
 8009f8e:	4649      	mov	r1, r9
 8009f90:	9004      	str	r0, [sp, #16]
 8009f92:	4658      	mov	r0, fp
 8009f94:	f000 fa92 	bl	800a4bc <_Bfree>
 8009f98:	9b04      	ldr	r3, [sp, #16]
 8009f9a:	4699      	mov	r9, r3
 8009f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f9e:	1b1a      	subs	r2, r3, r4
 8009fa0:	d004      	beq.n	8009fac <_dtoa_r+0x78c>
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	4658      	mov	r0, fp
 8009fa6:	f000 fbfd 	bl	800a7a4 <__pow5mult>
 8009faa:	4681      	mov	r9, r0
 8009fac:	2101      	movs	r1, #1
 8009fae:	4658      	mov	r0, fp
 8009fb0:	f000 fb38 	bl	800a624 <__i2b>
 8009fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f000 81cf 	beq.w	800a35c <_dtoa_r+0xb3c>
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	4601      	mov	r1, r0
 8009fc2:	4658      	mov	r0, fp
 8009fc4:	f000 fbee 	bl	800a7a4 <__pow5mult>
 8009fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	4604      	mov	r4, r0
 8009fce:	f300 8095 	bgt.w	800a0fc <_dtoa_r+0x8dc>
 8009fd2:	9b02      	ldr	r3, [sp, #8]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f040 8087 	bne.w	800a0e8 <_dtoa_r+0x8c8>
 8009fda:	9b03      	ldr	r3, [sp, #12]
 8009fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f040 8089 	bne.w	800a0f8 <_dtoa_r+0x8d8>
 8009fe6:	9b03      	ldr	r3, [sp, #12]
 8009fe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009fec:	0d1b      	lsrs	r3, r3, #20
 8009fee:	051b      	lsls	r3, r3, #20
 8009ff0:	b12b      	cbz	r3, 8009ffe <_dtoa_r+0x7de>
 8009ff2:	9b08      	ldr	r3, [sp, #32]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	9308      	str	r3, [sp, #32]
 8009ff8:	f108 0801 	add.w	r8, r8, #1
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	930a      	str	r3, [sp, #40]	@ 0x28
 800a000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 81b0 	beq.w	800a368 <_dtoa_r+0xb48>
 800a008:	6923      	ldr	r3, [r4, #16]
 800a00a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a00e:	6918      	ldr	r0, [r3, #16]
 800a010:	f000 fabc 	bl	800a58c <__hi0bits>
 800a014:	f1c0 0020 	rsb	r0, r0, #32
 800a018:	9b08      	ldr	r3, [sp, #32]
 800a01a:	4418      	add	r0, r3
 800a01c:	f010 001f 	ands.w	r0, r0, #31
 800a020:	d077      	beq.n	800a112 <_dtoa_r+0x8f2>
 800a022:	f1c0 0320 	rsb	r3, r0, #32
 800a026:	2b04      	cmp	r3, #4
 800a028:	dd6b      	ble.n	800a102 <_dtoa_r+0x8e2>
 800a02a:	9b08      	ldr	r3, [sp, #32]
 800a02c:	f1c0 001c 	rsb	r0, r0, #28
 800a030:	4403      	add	r3, r0
 800a032:	4480      	add	r8, r0
 800a034:	4406      	add	r6, r0
 800a036:	9308      	str	r3, [sp, #32]
 800a038:	f1b8 0f00 	cmp.w	r8, #0
 800a03c:	dd05      	ble.n	800a04a <_dtoa_r+0x82a>
 800a03e:	4649      	mov	r1, r9
 800a040:	4642      	mov	r2, r8
 800a042:	4658      	mov	r0, fp
 800a044:	f000 fc08 	bl	800a858 <__lshift>
 800a048:	4681      	mov	r9, r0
 800a04a:	9b08      	ldr	r3, [sp, #32]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	dd05      	ble.n	800a05c <_dtoa_r+0x83c>
 800a050:	4621      	mov	r1, r4
 800a052:	461a      	mov	r2, r3
 800a054:	4658      	mov	r0, fp
 800a056:	f000 fbff 	bl	800a858 <__lshift>
 800a05a:	4604      	mov	r4, r0
 800a05c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d059      	beq.n	800a116 <_dtoa_r+0x8f6>
 800a062:	4621      	mov	r1, r4
 800a064:	4648      	mov	r0, r9
 800a066:	f000 fc63 	bl	800a930 <__mcmp>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	da53      	bge.n	800a116 <_dtoa_r+0x8f6>
 800a06e:	1e7b      	subs	r3, r7, #1
 800a070:	9304      	str	r3, [sp, #16]
 800a072:	4649      	mov	r1, r9
 800a074:	2300      	movs	r3, #0
 800a076:	220a      	movs	r2, #10
 800a078:	4658      	mov	r0, fp
 800a07a:	f000 fa41 	bl	800a500 <__multadd>
 800a07e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a080:	4681      	mov	r9, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	f000 8172 	beq.w	800a36c <_dtoa_r+0xb4c>
 800a088:	2300      	movs	r3, #0
 800a08a:	4629      	mov	r1, r5
 800a08c:	220a      	movs	r2, #10
 800a08e:	4658      	mov	r0, fp
 800a090:	f000 fa36 	bl	800a500 <__multadd>
 800a094:	9b00      	ldr	r3, [sp, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	4605      	mov	r5, r0
 800a09a:	dc67      	bgt.n	800a16c <_dtoa_r+0x94c>
 800a09c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	dc41      	bgt.n	800a126 <_dtoa_r+0x906>
 800a0a2:	e063      	b.n	800a16c <_dtoa_r+0x94c>
 800a0a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a0a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a0aa:	e746      	b.n	8009f3a <_dtoa_r+0x71a>
 800a0ac:	9b07      	ldr	r3, [sp, #28]
 800a0ae:	1e5c      	subs	r4, r3, #1
 800a0b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0b2:	42a3      	cmp	r3, r4
 800a0b4:	bfbf      	itttt	lt
 800a0b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a0b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a0ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a0bc:	1ae3      	sublt	r3, r4, r3
 800a0be:	bfb4      	ite	lt
 800a0c0:	18d2      	addlt	r2, r2, r3
 800a0c2:	1b1c      	subge	r4, r3, r4
 800a0c4:	9b07      	ldr	r3, [sp, #28]
 800a0c6:	bfbc      	itt	lt
 800a0c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a0ca:	2400      	movlt	r4, #0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	bfb5      	itete	lt
 800a0d0:	eba8 0603 	sublt.w	r6, r8, r3
 800a0d4:	9b07      	ldrge	r3, [sp, #28]
 800a0d6:	2300      	movlt	r3, #0
 800a0d8:	4646      	movge	r6, r8
 800a0da:	e730      	b.n	8009f3e <_dtoa_r+0x71e>
 800a0dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a0de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a0e0:	4646      	mov	r6, r8
 800a0e2:	e735      	b.n	8009f50 <_dtoa_r+0x730>
 800a0e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0e6:	e75c      	b.n	8009fa2 <_dtoa_r+0x782>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	e788      	b.n	8009ffe <_dtoa_r+0x7de>
 800a0ec:	3fe00000 	.word	0x3fe00000
 800a0f0:	40240000 	.word	0x40240000
 800a0f4:	40140000 	.word	0x40140000
 800a0f8:	9b02      	ldr	r3, [sp, #8]
 800a0fa:	e780      	b.n	8009ffe <_dtoa_r+0x7de>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800a100:	e782      	b.n	800a008 <_dtoa_r+0x7e8>
 800a102:	d099      	beq.n	800a038 <_dtoa_r+0x818>
 800a104:	9a08      	ldr	r2, [sp, #32]
 800a106:	331c      	adds	r3, #28
 800a108:	441a      	add	r2, r3
 800a10a:	4498      	add	r8, r3
 800a10c:	441e      	add	r6, r3
 800a10e:	9208      	str	r2, [sp, #32]
 800a110:	e792      	b.n	800a038 <_dtoa_r+0x818>
 800a112:	4603      	mov	r3, r0
 800a114:	e7f6      	b.n	800a104 <_dtoa_r+0x8e4>
 800a116:	9b07      	ldr	r3, [sp, #28]
 800a118:	9704      	str	r7, [sp, #16]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	dc20      	bgt.n	800a160 <_dtoa_r+0x940>
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a122:	2b02      	cmp	r3, #2
 800a124:	dd1e      	ble.n	800a164 <_dtoa_r+0x944>
 800a126:	9b00      	ldr	r3, [sp, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f47f aec0 	bne.w	8009eae <_dtoa_r+0x68e>
 800a12e:	4621      	mov	r1, r4
 800a130:	2205      	movs	r2, #5
 800a132:	4658      	mov	r0, fp
 800a134:	f000 f9e4 	bl	800a500 <__multadd>
 800a138:	4601      	mov	r1, r0
 800a13a:	4604      	mov	r4, r0
 800a13c:	4648      	mov	r0, r9
 800a13e:	f000 fbf7 	bl	800a930 <__mcmp>
 800a142:	2800      	cmp	r0, #0
 800a144:	f77f aeb3 	ble.w	8009eae <_dtoa_r+0x68e>
 800a148:	4656      	mov	r6, sl
 800a14a:	2331      	movs	r3, #49	@ 0x31
 800a14c:	f806 3b01 	strb.w	r3, [r6], #1
 800a150:	9b04      	ldr	r3, [sp, #16]
 800a152:	3301      	adds	r3, #1
 800a154:	9304      	str	r3, [sp, #16]
 800a156:	e6ae      	b.n	8009eb6 <_dtoa_r+0x696>
 800a158:	9c07      	ldr	r4, [sp, #28]
 800a15a:	9704      	str	r7, [sp, #16]
 800a15c:	4625      	mov	r5, r4
 800a15e:	e7f3      	b.n	800a148 <_dtoa_r+0x928>
 800a160:	9b07      	ldr	r3, [sp, #28]
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a166:	2b00      	cmp	r3, #0
 800a168:	f000 8104 	beq.w	800a374 <_dtoa_r+0xb54>
 800a16c:	2e00      	cmp	r6, #0
 800a16e:	dd05      	ble.n	800a17c <_dtoa_r+0x95c>
 800a170:	4629      	mov	r1, r5
 800a172:	4632      	mov	r2, r6
 800a174:	4658      	mov	r0, fp
 800a176:	f000 fb6f 	bl	800a858 <__lshift>
 800a17a:	4605      	mov	r5, r0
 800a17c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d05a      	beq.n	800a238 <_dtoa_r+0xa18>
 800a182:	6869      	ldr	r1, [r5, #4]
 800a184:	4658      	mov	r0, fp
 800a186:	f000 f959 	bl	800a43c <_Balloc>
 800a18a:	4606      	mov	r6, r0
 800a18c:	b928      	cbnz	r0, 800a19a <_dtoa_r+0x97a>
 800a18e:	4b84      	ldr	r3, [pc, #528]	@ (800a3a0 <_dtoa_r+0xb80>)
 800a190:	4602      	mov	r2, r0
 800a192:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a196:	f7ff bb5a 	b.w	800984e <_dtoa_r+0x2e>
 800a19a:	692a      	ldr	r2, [r5, #16]
 800a19c:	3202      	adds	r2, #2
 800a19e:	0092      	lsls	r2, r2, #2
 800a1a0:	f105 010c 	add.w	r1, r5, #12
 800a1a4:	300c      	adds	r0, #12
 800a1a6:	f7ff faa2 	bl	80096ee <memcpy>
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	4631      	mov	r1, r6
 800a1ae:	4658      	mov	r0, fp
 800a1b0:	f000 fb52 	bl	800a858 <__lshift>
 800a1b4:	f10a 0301 	add.w	r3, sl, #1
 800a1b8:	9307      	str	r3, [sp, #28]
 800a1ba:	9b00      	ldr	r3, [sp, #0]
 800a1bc:	4453      	add	r3, sl
 800a1be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1c0:	9b02      	ldr	r3, [sp, #8]
 800a1c2:	f003 0301 	and.w	r3, r3, #1
 800a1c6:	462f      	mov	r7, r5
 800a1c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	9b07      	ldr	r3, [sp, #28]
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	4648      	mov	r0, r9
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	f7ff fa98 	bl	800970a <quorem>
 800a1da:	4639      	mov	r1, r7
 800a1dc:	9002      	str	r0, [sp, #8]
 800a1de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a1e2:	4648      	mov	r0, r9
 800a1e4:	f000 fba4 	bl	800a930 <__mcmp>
 800a1e8:	462a      	mov	r2, r5
 800a1ea:	9008      	str	r0, [sp, #32]
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	4658      	mov	r0, fp
 800a1f0:	f000 fbba 	bl	800a968 <__mdiff>
 800a1f4:	68c2      	ldr	r2, [r0, #12]
 800a1f6:	4606      	mov	r6, r0
 800a1f8:	bb02      	cbnz	r2, 800a23c <_dtoa_r+0xa1c>
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	4648      	mov	r0, r9
 800a1fe:	f000 fb97 	bl	800a930 <__mcmp>
 800a202:	4602      	mov	r2, r0
 800a204:	4631      	mov	r1, r6
 800a206:	4658      	mov	r0, fp
 800a208:	920e      	str	r2, [sp, #56]	@ 0x38
 800a20a:	f000 f957 	bl	800a4bc <_Bfree>
 800a20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a210:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a212:	9e07      	ldr	r6, [sp, #28]
 800a214:	ea43 0102 	orr.w	r1, r3, r2
 800a218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a21a:	4319      	orrs	r1, r3
 800a21c:	d110      	bne.n	800a240 <_dtoa_r+0xa20>
 800a21e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a222:	d029      	beq.n	800a278 <_dtoa_r+0xa58>
 800a224:	9b08      	ldr	r3, [sp, #32]
 800a226:	2b00      	cmp	r3, #0
 800a228:	dd02      	ble.n	800a230 <_dtoa_r+0xa10>
 800a22a:	9b02      	ldr	r3, [sp, #8]
 800a22c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a230:	9b00      	ldr	r3, [sp, #0]
 800a232:	f883 8000 	strb.w	r8, [r3]
 800a236:	e63f      	b.n	8009eb8 <_dtoa_r+0x698>
 800a238:	4628      	mov	r0, r5
 800a23a:	e7bb      	b.n	800a1b4 <_dtoa_r+0x994>
 800a23c:	2201      	movs	r2, #1
 800a23e:	e7e1      	b.n	800a204 <_dtoa_r+0x9e4>
 800a240:	9b08      	ldr	r3, [sp, #32]
 800a242:	2b00      	cmp	r3, #0
 800a244:	db04      	blt.n	800a250 <_dtoa_r+0xa30>
 800a246:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a248:	430b      	orrs	r3, r1
 800a24a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a24c:	430b      	orrs	r3, r1
 800a24e:	d120      	bne.n	800a292 <_dtoa_r+0xa72>
 800a250:	2a00      	cmp	r2, #0
 800a252:	dded      	ble.n	800a230 <_dtoa_r+0xa10>
 800a254:	4649      	mov	r1, r9
 800a256:	2201      	movs	r2, #1
 800a258:	4658      	mov	r0, fp
 800a25a:	f000 fafd 	bl	800a858 <__lshift>
 800a25e:	4621      	mov	r1, r4
 800a260:	4681      	mov	r9, r0
 800a262:	f000 fb65 	bl	800a930 <__mcmp>
 800a266:	2800      	cmp	r0, #0
 800a268:	dc03      	bgt.n	800a272 <_dtoa_r+0xa52>
 800a26a:	d1e1      	bne.n	800a230 <_dtoa_r+0xa10>
 800a26c:	f018 0f01 	tst.w	r8, #1
 800a270:	d0de      	beq.n	800a230 <_dtoa_r+0xa10>
 800a272:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a276:	d1d8      	bne.n	800a22a <_dtoa_r+0xa0a>
 800a278:	9a00      	ldr	r2, [sp, #0]
 800a27a:	2339      	movs	r3, #57	@ 0x39
 800a27c:	7013      	strb	r3, [r2, #0]
 800a27e:	4633      	mov	r3, r6
 800a280:	461e      	mov	r6, r3
 800a282:	3b01      	subs	r3, #1
 800a284:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a288:	2a39      	cmp	r2, #57	@ 0x39
 800a28a:	d052      	beq.n	800a332 <_dtoa_r+0xb12>
 800a28c:	3201      	adds	r2, #1
 800a28e:	701a      	strb	r2, [r3, #0]
 800a290:	e612      	b.n	8009eb8 <_dtoa_r+0x698>
 800a292:	2a00      	cmp	r2, #0
 800a294:	dd07      	ble.n	800a2a6 <_dtoa_r+0xa86>
 800a296:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a29a:	d0ed      	beq.n	800a278 <_dtoa_r+0xa58>
 800a29c:	9a00      	ldr	r2, [sp, #0]
 800a29e:	f108 0301 	add.w	r3, r8, #1
 800a2a2:	7013      	strb	r3, [r2, #0]
 800a2a4:	e608      	b.n	8009eb8 <_dtoa_r+0x698>
 800a2a6:	9b07      	ldr	r3, [sp, #28]
 800a2a8:	9a07      	ldr	r2, [sp, #28]
 800a2aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a2ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d028      	beq.n	800a306 <_dtoa_r+0xae6>
 800a2b4:	4649      	mov	r1, r9
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	220a      	movs	r2, #10
 800a2ba:	4658      	mov	r0, fp
 800a2bc:	f000 f920 	bl	800a500 <__multadd>
 800a2c0:	42af      	cmp	r7, r5
 800a2c2:	4681      	mov	r9, r0
 800a2c4:	f04f 0300 	mov.w	r3, #0
 800a2c8:	f04f 020a 	mov.w	r2, #10
 800a2cc:	4639      	mov	r1, r7
 800a2ce:	4658      	mov	r0, fp
 800a2d0:	d107      	bne.n	800a2e2 <_dtoa_r+0xac2>
 800a2d2:	f000 f915 	bl	800a500 <__multadd>
 800a2d6:	4607      	mov	r7, r0
 800a2d8:	4605      	mov	r5, r0
 800a2da:	9b07      	ldr	r3, [sp, #28]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	9307      	str	r3, [sp, #28]
 800a2e0:	e774      	b.n	800a1cc <_dtoa_r+0x9ac>
 800a2e2:	f000 f90d 	bl	800a500 <__multadd>
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	4607      	mov	r7, r0
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	220a      	movs	r2, #10
 800a2ee:	4658      	mov	r0, fp
 800a2f0:	f000 f906 	bl	800a500 <__multadd>
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	e7f0      	b.n	800a2da <_dtoa_r+0xaba>
 800a2f8:	9b00      	ldr	r3, [sp, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	bfcc      	ite	gt
 800a2fe:	461e      	movgt	r6, r3
 800a300:	2601      	movle	r6, #1
 800a302:	4456      	add	r6, sl
 800a304:	2700      	movs	r7, #0
 800a306:	4649      	mov	r1, r9
 800a308:	2201      	movs	r2, #1
 800a30a:	4658      	mov	r0, fp
 800a30c:	f000 faa4 	bl	800a858 <__lshift>
 800a310:	4621      	mov	r1, r4
 800a312:	4681      	mov	r9, r0
 800a314:	f000 fb0c 	bl	800a930 <__mcmp>
 800a318:	2800      	cmp	r0, #0
 800a31a:	dcb0      	bgt.n	800a27e <_dtoa_r+0xa5e>
 800a31c:	d102      	bne.n	800a324 <_dtoa_r+0xb04>
 800a31e:	f018 0f01 	tst.w	r8, #1
 800a322:	d1ac      	bne.n	800a27e <_dtoa_r+0xa5e>
 800a324:	4633      	mov	r3, r6
 800a326:	461e      	mov	r6, r3
 800a328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a32c:	2a30      	cmp	r2, #48	@ 0x30
 800a32e:	d0fa      	beq.n	800a326 <_dtoa_r+0xb06>
 800a330:	e5c2      	b.n	8009eb8 <_dtoa_r+0x698>
 800a332:	459a      	cmp	sl, r3
 800a334:	d1a4      	bne.n	800a280 <_dtoa_r+0xa60>
 800a336:	9b04      	ldr	r3, [sp, #16]
 800a338:	3301      	adds	r3, #1
 800a33a:	9304      	str	r3, [sp, #16]
 800a33c:	2331      	movs	r3, #49	@ 0x31
 800a33e:	f88a 3000 	strb.w	r3, [sl]
 800a342:	e5b9      	b.n	8009eb8 <_dtoa_r+0x698>
 800a344:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a346:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a3a4 <_dtoa_r+0xb84>
 800a34a:	b11b      	cbz	r3, 800a354 <_dtoa_r+0xb34>
 800a34c:	f10a 0308 	add.w	r3, sl, #8
 800a350:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	4650      	mov	r0, sl
 800a356:	b019      	add	sp, #100	@ 0x64
 800a358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a35e:	2b01      	cmp	r3, #1
 800a360:	f77f ae37 	ble.w	8009fd2 <_dtoa_r+0x7b2>
 800a364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a366:	930a      	str	r3, [sp, #40]	@ 0x28
 800a368:	2001      	movs	r0, #1
 800a36a:	e655      	b.n	800a018 <_dtoa_r+0x7f8>
 800a36c:	9b00      	ldr	r3, [sp, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f77f aed6 	ble.w	800a120 <_dtoa_r+0x900>
 800a374:	4656      	mov	r6, sl
 800a376:	4621      	mov	r1, r4
 800a378:	4648      	mov	r0, r9
 800a37a:	f7ff f9c6 	bl	800970a <quorem>
 800a37e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a382:	f806 8b01 	strb.w	r8, [r6], #1
 800a386:	9b00      	ldr	r3, [sp, #0]
 800a388:	eba6 020a 	sub.w	r2, r6, sl
 800a38c:	4293      	cmp	r3, r2
 800a38e:	ddb3      	ble.n	800a2f8 <_dtoa_r+0xad8>
 800a390:	4649      	mov	r1, r9
 800a392:	2300      	movs	r3, #0
 800a394:	220a      	movs	r2, #10
 800a396:	4658      	mov	r0, fp
 800a398:	f000 f8b2 	bl	800a500 <__multadd>
 800a39c:	4681      	mov	r9, r0
 800a39e:	e7ea      	b.n	800a376 <_dtoa_r+0xb56>
 800a3a0:	0800bc55 	.word	0x0800bc55
 800a3a4:	0800bbd9 	.word	0x0800bbd9

0800a3a8 <_free_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4605      	mov	r5, r0
 800a3ac:	2900      	cmp	r1, #0
 800a3ae:	d041      	beq.n	800a434 <_free_r+0x8c>
 800a3b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3b4:	1f0c      	subs	r4, r1, #4
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	bfb8      	it	lt
 800a3ba:	18e4      	addlt	r4, r4, r3
 800a3bc:	f7fe fa44 	bl	8008848 <__malloc_lock>
 800a3c0:	4a1d      	ldr	r2, [pc, #116]	@ (800a438 <_free_r+0x90>)
 800a3c2:	6813      	ldr	r3, [r2, #0]
 800a3c4:	b933      	cbnz	r3, 800a3d4 <_free_r+0x2c>
 800a3c6:	6063      	str	r3, [r4, #4]
 800a3c8:	6014      	str	r4, [r2, #0]
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3d0:	f7fe ba40 	b.w	8008854 <__malloc_unlock>
 800a3d4:	42a3      	cmp	r3, r4
 800a3d6:	d908      	bls.n	800a3ea <_free_r+0x42>
 800a3d8:	6820      	ldr	r0, [r4, #0]
 800a3da:	1821      	adds	r1, r4, r0
 800a3dc:	428b      	cmp	r3, r1
 800a3de:	bf01      	itttt	eq
 800a3e0:	6819      	ldreq	r1, [r3, #0]
 800a3e2:	685b      	ldreq	r3, [r3, #4]
 800a3e4:	1809      	addeq	r1, r1, r0
 800a3e6:	6021      	streq	r1, [r4, #0]
 800a3e8:	e7ed      	b.n	800a3c6 <_free_r+0x1e>
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	b10b      	cbz	r3, 800a3f4 <_free_r+0x4c>
 800a3f0:	42a3      	cmp	r3, r4
 800a3f2:	d9fa      	bls.n	800a3ea <_free_r+0x42>
 800a3f4:	6811      	ldr	r1, [r2, #0]
 800a3f6:	1850      	adds	r0, r2, r1
 800a3f8:	42a0      	cmp	r0, r4
 800a3fa:	d10b      	bne.n	800a414 <_free_r+0x6c>
 800a3fc:	6820      	ldr	r0, [r4, #0]
 800a3fe:	4401      	add	r1, r0
 800a400:	1850      	adds	r0, r2, r1
 800a402:	4283      	cmp	r3, r0
 800a404:	6011      	str	r1, [r2, #0]
 800a406:	d1e0      	bne.n	800a3ca <_free_r+0x22>
 800a408:	6818      	ldr	r0, [r3, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	6053      	str	r3, [r2, #4]
 800a40e:	4408      	add	r0, r1
 800a410:	6010      	str	r0, [r2, #0]
 800a412:	e7da      	b.n	800a3ca <_free_r+0x22>
 800a414:	d902      	bls.n	800a41c <_free_r+0x74>
 800a416:	230c      	movs	r3, #12
 800a418:	602b      	str	r3, [r5, #0]
 800a41a:	e7d6      	b.n	800a3ca <_free_r+0x22>
 800a41c:	6820      	ldr	r0, [r4, #0]
 800a41e:	1821      	adds	r1, r4, r0
 800a420:	428b      	cmp	r3, r1
 800a422:	bf04      	itt	eq
 800a424:	6819      	ldreq	r1, [r3, #0]
 800a426:	685b      	ldreq	r3, [r3, #4]
 800a428:	6063      	str	r3, [r4, #4]
 800a42a:	bf04      	itt	eq
 800a42c:	1809      	addeq	r1, r1, r0
 800a42e:	6021      	streq	r1, [r4, #0]
 800a430:	6054      	str	r4, [r2, #4]
 800a432:	e7ca      	b.n	800a3ca <_free_r+0x22>
 800a434:	bd38      	pop	{r3, r4, r5, pc}
 800a436:	bf00      	nop
 800a438:	20000b14 	.word	0x20000b14

0800a43c <_Balloc>:
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	69c6      	ldr	r6, [r0, #28]
 800a440:	4604      	mov	r4, r0
 800a442:	460d      	mov	r5, r1
 800a444:	b976      	cbnz	r6, 800a464 <_Balloc+0x28>
 800a446:	2010      	movs	r0, #16
 800a448:	f7fe f94c 	bl	80086e4 <malloc>
 800a44c:	4602      	mov	r2, r0
 800a44e:	61e0      	str	r0, [r4, #28]
 800a450:	b920      	cbnz	r0, 800a45c <_Balloc+0x20>
 800a452:	4b18      	ldr	r3, [pc, #96]	@ (800a4b4 <_Balloc+0x78>)
 800a454:	4818      	ldr	r0, [pc, #96]	@ (800a4b8 <_Balloc+0x7c>)
 800a456:	216b      	movs	r1, #107	@ 0x6b
 800a458:	f000 ff66 	bl	800b328 <__assert_func>
 800a45c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a460:	6006      	str	r6, [r0, #0]
 800a462:	60c6      	str	r6, [r0, #12]
 800a464:	69e6      	ldr	r6, [r4, #28]
 800a466:	68f3      	ldr	r3, [r6, #12]
 800a468:	b183      	cbz	r3, 800a48c <_Balloc+0x50>
 800a46a:	69e3      	ldr	r3, [r4, #28]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a472:	b9b8      	cbnz	r0, 800a4a4 <_Balloc+0x68>
 800a474:	2101      	movs	r1, #1
 800a476:	fa01 f605 	lsl.w	r6, r1, r5
 800a47a:	1d72      	adds	r2, r6, #5
 800a47c:	0092      	lsls	r2, r2, #2
 800a47e:	4620      	mov	r0, r4
 800a480:	f000 ff70 	bl	800b364 <_calloc_r>
 800a484:	b160      	cbz	r0, 800a4a0 <_Balloc+0x64>
 800a486:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a48a:	e00e      	b.n	800a4aa <_Balloc+0x6e>
 800a48c:	2221      	movs	r2, #33	@ 0x21
 800a48e:	2104      	movs	r1, #4
 800a490:	4620      	mov	r0, r4
 800a492:	f000 ff67 	bl	800b364 <_calloc_r>
 800a496:	69e3      	ldr	r3, [r4, #28]
 800a498:	60f0      	str	r0, [r6, #12]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1e4      	bne.n	800a46a <_Balloc+0x2e>
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	bd70      	pop	{r4, r5, r6, pc}
 800a4a4:	6802      	ldr	r2, [r0, #0]
 800a4a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4b0:	e7f7      	b.n	800a4a2 <_Balloc+0x66>
 800a4b2:	bf00      	nop
 800a4b4:	0800bbe6 	.word	0x0800bbe6
 800a4b8:	0800bc66 	.word	0x0800bc66

0800a4bc <_Bfree>:
 800a4bc:	b570      	push	{r4, r5, r6, lr}
 800a4be:	69c6      	ldr	r6, [r0, #28]
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	b976      	cbnz	r6, 800a4e4 <_Bfree+0x28>
 800a4c6:	2010      	movs	r0, #16
 800a4c8:	f7fe f90c 	bl	80086e4 <malloc>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	61e8      	str	r0, [r5, #28]
 800a4d0:	b920      	cbnz	r0, 800a4dc <_Bfree+0x20>
 800a4d2:	4b09      	ldr	r3, [pc, #36]	@ (800a4f8 <_Bfree+0x3c>)
 800a4d4:	4809      	ldr	r0, [pc, #36]	@ (800a4fc <_Bfree+0x40>)
 800a4d6:	218f      	movs	r1, #143	@ 0x8f
 800a4d8:	f000 ff26 	bl	800b328 <__assert_func>
 800a4dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4e0:	6006      	str	r6, [r0, #0]
 800a4e2:	60c6      	str	r6, [r0, #12]
 800a4e4:	b13c      	cbz	r4, 800a4f6 <_Bfree+0x3a>
 800a4e6:	69eb      	ldr	r3, [r5, #28]
 800a4e8:	6862      	ldr	r2, [r4, #4]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4f0:	6021      	str	r1, [r4, #0]
 800a4f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4f6:	bd70      	pop	{r4, r5, r6, pc}
 800a4f8:	0800bbe6 	.word	0x0800bbe6
 800a4fc:	0800bc66 	.word	0x0800bc66

0800a500 <__multadd>:
 800a500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a504:	690d      	ldr	r5, [r1, #16]
 800a506:	4607      	mov	r7, r0
 800a508:	460c      	mov	r4, r1
 800a50a:	461e      	mov	r6, r3
 800a50c:	f101 0c14 	add.w	ip, r1, #20
 800a510:	2000      	movs	r0, #0
 800a512:	f8dc 3000 	ldr.w	r3, [ip]
 800a516:	b299      	uxth	r1, r3
 800a518:	fb02 6101 	mla	r1, r2, r1, r6
 800a51c:	0c1e      	lsrs	r6, r3, #16
 800a51e:	0c0b      	lsrs	r3, r1, #16
 800a520:	fb02 3306 	mla	r3, r2, r6, r3
 800a524:	b289      	uxth	r1, r1
 800a526:	3001      	adds	r0, #1
 800a528:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a52c:	4285      	cmp	r5, r0
 800a52e:	f84c 1b04 	str.w	r1, [ip], #4
 800a532:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a536:	dcec      	bgt.n	800a512 <__multadd+0x12>
 800a538:	b30e      	cbz	r6, 800a57e <__multadd+0x7e>
 800a53a:	68a3      	ldr	r3, [r4, #8]
 800a53c:	42ab      	cmp	r3, r5
 800a53e:	dc19      	bgt.n	800a574 <__multadd+0x74>
 800a540:	6861      	ldr	r1, [r4, #4]
 800a542:	4638      	mov	r0, r7
 800a544:	3101      	adds	r1, #1
 800a546:	f7ff ff79 	bl	800a43c <_Balloc>
 800a54a:	4680      	mov	r8, r0
 800a54c:	b928      	cbnz	r0, 800a55a <__multadd+0x5a>
 800a54e:	4602      	mov	r2, r0
 800a550:	4b0c      	ldr	r3, [pc, #48]	@ (800a584 <__multadd+0x84>)
 800a552:	480d      	ldr	r0, [pc, #52]	@ (800a588 <__multadd+0x88>)
 800a554:	21ba      	movs	r1, #186	@ 0xba
 800a556:	f000 fee7 	bl	800b328 <__assert_func>
 800a55a:	6922      	ldr	r2, [r4, #16]
 800a55c:	3202      	adds	r2, #2
 800a55e:	f104 010c 	add.w	r1, r4, #12
 800a562:	0092      	lsls	r2, r2, #2
 800a564:	300c      	adds	r0, #12
 800a566:	f7ff f8c2 	bl	80096ee <memcpy>
 800a56a:	4621      	mov	r1, r4
 800a56c:	4638      	mov	r0, r7
 800a56e:	f7ff ffa5 	bl	800a4bc <_Bfree>
 800a572:	4644      	mov	r4, r8
 800a574:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a578:	3501      	adds	r5, #1
 800a57a:	615e      	str	r6, [r3, #20]
 800a57c:	6125      	str	r5, [r4, #16]
 800a57e:	4620      	mov	r0, r4
 800a580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a584:	0800bc55 	.word	0x0800bc55
 800a588:	0800bc66 	.word	0x0800bc66

0800a58c <__hi0bits>:
 800a58c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a590:	4603      	mov	r3, r0
 800a592:	bf36      	itet	cc
 800a594:	0403      	lslcc	r3, r0, #16
 800a596:	2000      	movcs	r0, #0
 800a598:	2010      	movcc	r0, #16
 800a59a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a59e:	bf3c      	itt	cc
 800a5a0:	021b      	lslcc	r3, r3, #8
 800a5a2:	3008      	addcc	r0, #8
 800a5a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5a8:	bf3c      	itt	cc
 800a5aa:	011b      	lslcc	r3, r3, #4
 800a5ac:	3004      	addcc	r0, #4
 800a5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5b2:	bf3c      	itt	cc
 800a5b4:	009b      	lslcc	r3, r3, #2
 800a5b6:	3002      	addcc	r0, #2
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	db05      	blt.n	800a5c8 <__hi0bits+0x3c>
 800a5bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a5c0:	f100 0001 	add.w	r0, r0, #1
 800a5c4:	bf08      	it	eq
 800a5c6:	2020      	moveq	r0, #32
 800a5c8:	4770      	bx	lr

0800a5ca <__lo0bits>:
 800a5ca:	6803      	ldr	r3, [r0, #0]
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	f013 0007 	ands.w	r0, r3, #7
 800a5d2:	d00b      	beq.n	800a5ec <__lo0bits+0x22>
 800a5d4:	07d9      	lsls	r1, r3, #31
 800a5d6:	d421      	bmi.n	800a61c <__lo0bits+0x52>
 800a5d8:	0798      	lsls	r0, r3, #30
 800a5da:	bf49      	itett	mi
 800a5dc:	085b      	lsrmi	r3, r3, #1
 800a5de:	089b      	lsrpl	r3, r3, #2
 800a5e0:	2001      	movmi	r0, #1
 800a5e2:	6013      	strmi	r3, [r2, #0]
 800a5e4:	bf5c      	itt	pl
 800a5e6:	6013      	strpl	r3, [r2, #0]
 800a5e8:	2002      	movpl	r0, #2
 800a5ea:	4770      	bx	lr
 800a5ec:	b299      	uxth	r1, r3
 800a5ee:	b909      	cbnz	r1, 800a5f4 <__lo0bits+0x2a>
 800a5f0:	0c1b      	lsrs	r3, r3, #16
 800a5f2:	2010      	movs	r0, #16
 800a5f4:	b2d9      	uxtb	r1, r3
 800a5f6:	b909      	cbnz	r1, 800a5fc <__lo0bits+0x32>
 800a5f8:	3008      	adds	r0, #8
 800a5fa:	0a1b      	lsrs	r3, r3, #8
 800a5fc:	0719      	lsls	r1, r3, #28
 800a5fe:	bf04      	itt	eq
 800a600:	091b      	lsreq	r3, r3, #4
 800a602:	3004      	addeq	r0, #4
 800a604:	0799      	lsls	r1, r3, #30
 800a606:	bf04      	itt	eq
 800a608:	089b      	lsreq	r3, r3, #2
 800a60a:	3002      	addeq	r0, #2
 800a60c:	07d9      	lsls	r1, r3, #31
 800a60e:	d403      	bmi.n	800a618 <__lo0bits+0x4e>
 800a610:	085b      	lsrs	r3, r3, #1
 800a612:	f100 0001 	add.w	r0, r0, #1
 800a616:	d003      	beq.n	800a620 <__lo0bits+0x56>
 800a618:	6013      	str	r3, [r2, #0]
 800a61a:	4770      	bx	lr
 800a61c:	2000      	movs	r0, #0
 800a61e:	4770      	bx	lr
 800a620:	2020      	movs	r0, #32
 800a622:	4770      	bx	lr

0800a624 <__i2b>:
 800a624:	b510      	push	{r4, lr}
 800a626:	460c      	mov	r4, r1
 800a628:	2101      	movs	r1, #1
 800a62a:	f7ff ff07 	bl	800a43c <_Balloc>
 800a62e:	4602      	mov	r2, r0
 800a630:	b928      	cbnz	r0, 800a63e <__i2b+0x1a>
 800a632:	4b05      	ldr	r3, [pc, #20]	@ (800a648 <__i2b+0x24>)
 800a634:	4805      	ldr	r0, [pc, #20]	@ (800a64c <__i2b+0x28>)
 800a636:	f240 1145 	movw	r1, #325	@ 0x145
 800a63a:	f000 fe75 	bl	800b328 <__assert_func>
 800a63e:	2301      	movs	r3, #1
 800a640:	6144      	str	r4, [r0, #20]
 800a642:	6103      	str	r3, [r0, #16]
 800a644:	bd10      	pop	{r4, pc}
 800a646:	bf00      	nop
 800a648:	0800bc55 	.word	0x0800bc55
 800a64c:	0800bc66 	.word	0x0800bc66

0800a650 <__multiply>:
 800a650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a654:	4614      	mov	r4, r2
 800a656:	690a      	ldr	r2, [r1, #16]
 800a658:	6923      	ldr	r3, [r4, #16]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	bfa8      	it	ge
 800a65e:	4623      	movge	r3, r4
 800a660:	460f      	mov	r7, r1
 800a662:	bfa4      	itt	ge
 800a664:	460c      	movge	r4, r1
 800a666:	461f      	movge	r7, r3
 800a668:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a66c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a670:	68a3      	ldr	r3, [r4, #8]
 800a672:	6861      	ldr	r1, [r4, #4]
 800a674:	eb0a 0609 	add.w	r6, sl, r9
 800a678:	42b3      	cmp	r3, r6
 800a67a:	b085      	sub	sp, #20
 800a67c:	bfb8      	it	lt
 800a67e:	3101      	addlt	r1, #1
 800a680:	f7ff fedc 	bl	800a43c <_Balloc>
 800a684:	b930      	cbnz	r0, 800a694 <__multiply+0x44>
 800a686:	4602      	mov	r2, r0
 800a688:	4b44      	ldr	r3, [pc, #272]	@ (800a79c <__multiply+0x14c>)
 800a68a:	4845      	ldr	r0, [pc, #276]	@ (800a7a0 <__multiply+0x150>)
 800a68c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a690:	f000 fe4a 	bl	800b328 <__assert_func>
 800a694:	f100 0514 	add.w	r5, r0, #20
 800a698:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a69c:	462b      	mov	r3, r5
 800a69e:	2200      	movs	r2, #0
 800a6a0:	4543      	cmp	r3, r8
 800a6a2:	d321      	bcc.n	800a6e8 <__multiply+0x98>
 800a6a4:	f107 0114 	add.w	r1, r7, #20
 800a6a8:	f104 0214 	add.w	r2, r4, #20
 800a6ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a6b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a6b4:	9302      	str	r3, [sp, #8]
 800a6b6:	1b13      	subs	r3, r2, r4
 800a6b8:	3b15      	subs	r3, #21
 800a6ba:	f023 0303 	bic.w	r3, r3, #3
 800a6be:	3304      	adds	r3, #4
 800a6c0:	f104 0715 	add.w	r7, r4, #21
 800a6c4:	42ba      	cmp	r2, r7
 800a6c6:	bf38      	it	cc
 800a6c8:	2304      	movcc	r3, #4
 800a6ca:	9301      	str	r3, [sp, #4]
 800a6cc:	9b02      	ldr	r3, [sp, #8]
 800a6ce:	9103      	str	r1, [sp, #12]
 800a6d0:	428b      	cmp	r3, r1
 800a6d2:	d80c      	bhi.n	800a6ee <__multiply+0x9e>
 800a6d4:	2e00      	cmp	r6, #0
 800a6d6:	dd03      	ble.n	800a6e0 <__multiply+0x90>
 800a6d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d05b      	beq.n	800a798 <__multiply+0x148>
 800a6e0:	6106      	str	r6, [r0, #16]
 800a6e2:	b005      	add	sp, #20
 800a6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e8:	f843 2b04 	str.w	r2, [r3], #4
 800a6ec:	e7d8      	b.n	800a6a0 <__multiply+0x50>
 800a6ee:	f8b1 a000 	ldrh.w	sl, [r1]
 800a6f2:	f1ba 0f00 	cmp.w	sl, #0
 800a6f6:	d024      	beq.n	800a742 <__multiply+0xf2>
 800a6f8:	f104 0e14 	add.w	lr, r4, #20
 800a6fc:	46a9      	mov	r9, r5
 800a6fe:	f04f 0c00 	mov.w	ip, #0
 800a702:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a706:	f8d9 3000 	ldr.w	r3, [r9]
 800a70a:	fa1f fb87 	uxth.w	fp, r7
 800a70e:	b29b      	uxth	r3, r3
 800a710:	fb0a 330b 	mla	r3, sl, fp, r3
 800a714:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a718:	f8d9 7000 	ldr.w	r7, [r9]
 800a71c:	4463      	add	r3, ip
 800a71e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a722:	fb0a c70b 	mla	r7, sl, fp, ip
 800a726:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a730:	4572      	cmp	r2, lr
 800a732:	f849 3b04 	str.w	r3, [r9], #4
 800a736:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a73a:	d8e2      	bhi.n	800a702 <__multiply+0xb2>
 800a73c:	9b01      	ldr	r3, [sp, #4]
 800a73e:	f845 c003 	str.w	ip, [r5, r3]
 800a742:	9b03      	ldr	r3, [sp, #12]
 800a744:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a748:	3104      	adds	r1, #4
 800a74a:	f1b9 0f00 	cmp.w	r9, #0
 800a74e:	d021      	beq.n	800a794 <__multiply+0x144>
 800a750:	682b      	ldr	r3, [r5, #0]
 800a752:	f104 0c14 	add.w	ip, r4, #20
 800a756:	46ae      	mov	lr, r5
 800a758:	f04f 0a00 	mov.w	sl, #0
 800a75c:	f8bc b000 	ldrh.w	fp, [ip]
 800a760:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a764:	fb09 770b 	mla	r7, r9, fp, r7
 800a768:	4457      	add	r7, sl
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a770:	f84e 3b04 	str.w	r3, [lr], #4
 800a774:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a778:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a77c:	f8be 3000 	ldrh.w	r3, [lr]
 800a780:	fb09 330a 	mla	r3, r9, sl, r3
 800a784:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a788:	4562      	cmp	r2, ip
 800a78a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a78e:	d8e5      	bhi.n	800a75c <__multiply+0x10c>
 800a790:	9f01      	ldr	r7, [sp, #4]
 800a792:	51eb      	str	r3, [r5, r7]
 800a794:	3504      	adds	r5, #4
 800a796:	e799      	b.n	800a6cc <__multiply+0x7c>
 800a798:	3e01      	subs	r6, #1
 800a79a:	e79b      	b.n	800a6d4 <__multiply+0x84>
 800a79c:	0800bc55 	.word	0x0800bc55
 800a7a0:	0800bc66 	.word	0x0800bc66

0800a7a4 <__pow5mult>:
 800a7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a8:	4615      	mov	r5, r2
 800a7aa:	f012 0203 	ands.w	r2, r2, #3
 800a7ae:	4607      	mov	r7, r0
 800a7b0:	460e      	mov	r6, r1
 800a7b2:	d007      	beq.n	800a7c4 <__pow5mult+0x20>
 800a7b4:	4c25      	ldr	r4, [pc, #148]	@ (800a84c <__pow5mult+0xa8>)
 800a7b6:	3a01      	subs	r2, #1
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7be:	f7ff fe9f 	bl	800a500 <__multadd>
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	10ad      	asrs	r5, r5, #2
 800a7c6:	d03d      	beq.n	800a844 <__pow5mult+0xa0>
 800a7c8:	69fc      	ldr	r4, [r7, #28]
 800a7ca:	b97c      	cbnz	r4, 800a7ec <__pow5mult+0x48>
 800a7cc:	2010      	movs	r0, #16
 800a7ce:	f7fd ff89 	bl	80086e4 <malloc>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	61f8      	str	r0, [r7, #28]
 800a7d6:	b928      	cbnz	r0, 800a7e4 <__pow5mult+0x40>
 800a7d8:	4b1d      	ldr	r3, [pc, #116]	@ (800a850 <__pow5mult+0xac>)
 800a7da:	481e      	ldr	r0, [pc, #120]	@ (800a854 <__pow5mult+0xb0>)
 800a7dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a7e0:	f000 fda2 	bl	800b328 <__assert_func>
 800a7e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7e8:	6004      	str	r4, [r0, #0]
 800a7ea:	60c4      	str	r4, [r0, #12]
 800a7ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a7f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7f4:	b94c      	cbnz	r4, 800a80a <__pow5mult+0x66>
 800a7f6:	f240 2171 	movw	r1, #625	@ 0x271
 800a7fa:	4638      	mov	r0, r7
 800a7fc:	f7ff ff12 	bl	800a624 <__i2b>
 800a800:	2300      	movs	r3, #0
 800a802:	f8c8 0008 	str.w	r0, [r8, #8]
 800a806:	4604      	mov	r4, r0
 800a808:	6003      	str	r3, [r0, #0]
 800a80a:	f04f 0900 	mov.w	r9, #0
 800a80e:	07eb      	lsls	r3, r5, #31
 800a810:	d50a      	bpl.n	800a828 <__pow5mult+0x84>
 800a812:	4631      	mov	r1, r6
 800a814:	4622      	mov	r2, r4
 800a816:	4638      	mov	r0, r7
 800a818:	f7ff ff1a 	bl	800a650 <__multiply>
 800a81c:	4631      	mov	r1, r6
 800a81e:	4680      	mov	r8, r0
 800a820:	4638      	mov	r0, r7
 800a822:	f7ff fe4b 	bl	800a4bc <_Bfree>
 800a826:	4646      	mov	r6, r8
 800a828:	106d      	asrs	r5, r5, #1
 800a82a:	d00b      	beq.n	800a844 <__pow5mult+0xa0>
 800a82c:	6820      	ldr	r0, [r4, #0]
 800a82e:	b938      	cbnz	r0, 800a840 <__pow5mult+0x9c>
 800a830:	4622      	mov	r2, r4
 800a832:	4621      	mov	r1, r4
 800a834:	4638      	mov	r0, r7
 800a836:	f7ff ff0b 	bl	800a650 <__multiply>
 800a83a:	6020      	str	r0, [r4, #0]
 800a83c:	f8c0 9000 	str.w	r9, [r0]
 800a840:	4604      	mov	r4, r0
 800a842:	e7e4      	b.n	800a80e <__pow5mult+0x6a>
 800a844:	4630      	mov	r0, r6
 800a846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a84a:	bf00      	nop
 800a84c:	0800bcc0 	.word	0x0800bcc0
 800a850:	0800bbe6 	.word	0x0800bbe6
 800a854:	0800bc66 	.word	0x0800bc66

0800a858 <__lshift>:
 800a858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a85c:	460c      	mov	r4, r1
 800a85e:	6849      	ldr	r1, [r1, #4]
 800a860:	6923      	ldr	r3, [r4, #16]
 800a862:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a866:	68a3      	ldr	r3, [r4, #8]
 800a868:	4607      	mov	r7, r0
 800a86a:	4691      	mov	r9, r2
 800a86c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a870:	f108 0601 	add.w	r6, r8, #1
 800a874:	42b3      	cmp	r3, r6
 800a876:	db0b      	blt.n	800a890 <__lshift+0x38>
 800a878:	4638      	mov	r0, r7
 800a87a:	f7ff fddf 	bl	800a43c <_Balloc>
 800a87e:	4605      	mov	r5, r0
 800a880:	b948      	cbnz	r0, 800a896 <__lshift+0x3e>
 800a882:	4602      	mov	r2, r0
 800a884:	4b28      	ldr	r3, [pc, #160]	@ (800a928 <__lshift+0xd0>)
 800a886:	4829      	ldr	r0, [pc, #164]	@ (800a92c <__lshift+0xd4>)
 800a888:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a88c:	f000 fd4c 	bl	800b328 <__assert_func>
 800a890:	3101      	adds	r1, #1
 800a892:	005b      	lsls	r3, r3, #1
 800a894:	e7ee      	b.n	800a874 <__lshift+0x1c>
 800a896:	2300      	movs	r3, #0
 800a898:	f100 0114 	add.w	r1, r0, #20
 800a89c:	f100 0210 	add.w	r2, r0, #16
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	4553      	cmp	r3, sl
 800a8a4:	db33      	blt.n	800a90e <__lshift+0xb6>
 800a8a6:	6920      	ldr	r0, [r4, #16]
 800a8a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8ac:	f104 0314 	add.w	r3, r4, #20
 800a8b0:	f019 091f 	ands.w	r9, r9, #31
 800a8b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8bc:	d02b      	beq.n	800a916 <__lshift+0xbe>
 800a8be:	f1c9 0e20 	rsb	lr, r9, #32
 800a8c2:	468a      	mov	sl, r1
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	6818      	ldr	r0, [r3, #0]
 800a8c8:	fa00 f009 	lsl.w	r0, r0, r9
 800a8cc:	4310      	orrs	r0, r2
 800a8ce:	f84a 0b04 	str.w	r0, [sl], #4
 800a8d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8d6:	459c      	cmp	ip, r3
 800a8d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8dc:	d8f3      	bhi.n	800a8c6 <__lshift+0x6e>
 800a8de:	ebac 0304 	sub.w	r3, ip, r4
 800a8e2:	3b15      	subs	r3, #21
 800a8e4:	f023 0303 	bic.w	r3, r3, #3
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	f104 0015 	add.w	r0, r4, #21
 800a8ee:	4584      	cmp	ip, r0
 800a8f0:	bf38      	it	cc
 800a8f2:	2304      	movcc	r3, #4
 800a8f4:	50ca      	str	r2, [r1, r3]
 800a8f6:	b10a      	cbz	r2, 800a8fc <__lshift+0xa4>
 800a8f8:	f108 0602 	add.w	r6, r8, #2
 800a8fc:	3e01      	subs	r6, #1
 800a8fe:	4638      	mov	r0, r7
 800a900:	612e      	str	r6, [r5, #16]
 800a902:	4621      	mov	r1, r4
 800a904:	f7ff fdda 	bl	800a4bc <_Bfree>
 800a908:	4628      	mov	r0, r5
 800a90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a90e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a912:	3301      	adds	r3, #1
 800a914:	e7c5      	b.n	800a8a2 <__lshift+0x4a>
 800a916:	3904      	subs	r1, #4
 800a918:	f853 2b04 	ldr.w	r2, [r3], #4
 800a91c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a920:	459c      	cmp	ip, r3
 800a922:	d8f9      	bhi.n	800a918 <__lshift+0xc0>
 800a924:	e7ea      	b.n	800a8fc <__lshift+0xa4>
 800a926:	bf00      	nop
 800a928:	0800bc55 	.word	0x0800bc55
 800a92c:	0800bc66 	.word	0x0800bc66

0800a930 <__mcmp>:
 800a930:	690a      	ldr	r2, [r1, #16]
 800a932:	4603      	mov	r3, r0
 800a934:	6900      	ldr	r0, [r0, #16]
 800a936:	1a80      	subs	r0, r0, r2
 800a938:	b530      	push	{r4, r5, lr}
 800a93a:	d10e      	bne.n	800a95a <__mcmp+0x2a>
 800a93c:	3314      	adds	r3, #20
 800a93e:	3114      	adds	r1, #20
 800a940:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a944:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a948:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a94c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a950:	4295      	cmp	r5, r2
 800a952:	d003      	beq.n	800a95c <__mcmp+0x2c>
 800a954:	d205      	bcs.n	800a962 <__mcmp+0x32>
 800a956:	f04f 30ff 	mov.w	r0, #4294967295
 800a95a:	bd30      	pop	{r4, r5, pc}
 800a95c:	42a3      	cmp	r3, r4
 800a95e:	d3f3      	bcc.n	800a948 <__mcmp+0x18>
 800a960:	e7fb      	b.n	800a95a <__mcmp+0x2a>
 800a962:	2001      	movs	r0, #1
 800a964:	e7f9      	b.n	800a95a <__mcmp+0x2a>
	...

0800a968 <__mdiff>:
 800a968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96c:	4689      	mov	r9, r1
 800a96e:	4606      	mov	r6, r0
 800a970:	4611      	mov	r1, r2
 800a972:	4648      	mov	r0, r9
 800a974:	4614      	mov	r4, r2
 800a976:	f7ff ffdb 	bl	800a930 <__mcmp>
 800a97a:	1e05      	subs	r5, r0, #0
 800a97c:	d112      	bne.n	800a9a4 <__mdiff+0x3c>
 800a97e:	4629      	mov	r1, r5
 800a980:	4630      	mov	r0, r6
 800a982:	f7ff fd5b 	bl	800a43c <_Balloc>
 800a986:	4602      	mov	r2, r0
 800a988:	b928      	cbnz	r0, 800a996 <__mdiff+0x2e>
 800a98a:	4b3f      	ldr	r3, [pc, #252]	@ (800aa88 <__mdiff+0x120>)
 800a98c:	f240 2137 	movw	r1, #567	@ 0x237
 800a990:	483e      	ldr	r0, [pc, #248]	@ (800aa8c <__mdiff+0x124>)
 800a992:	f000 fcc9 	bl	800b328 <__assert_func>
 800a996:	2301      	movs	r3, #1
 800a998:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a99c:	4610      	mov	r0, r2
 800a99e:	b003      	add	sp, #12
 800a9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a4:	bfbc      	itt	lt
 800a9a6:	464b      	movlt	r3, r9
 800a9a8:	46a1      	movlt	r9, r4
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a9b0:	bfba      	itte	lt
 800a9b2:	461c      	movlt	r4, r3
 800a9b4:	2501      	movlt	r5, #1
 800a9b6:	2500      	movge	r5, #0
 800a9b8:	f7ff fd40 	bl	800a43c <_Balloc>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	b918      	cbnz	r0, 800a9c8 <__mdiff+0x60>
 800a9c0:	4b31      	ldr	r3, [pc, #196]	@ (800aa88 <__mdiff+0x120>)
 800a9c2:	f240 2145 	movw	r1, #581	@ 0x245
 800a9c6:	e7e3      	b.n	800a990 <__mdiff+0x28>
 800a9c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a9cc:	6926      	ldr	r6, [r4, #16]
 800a9ce:	60c5      	str	r5, [r0, #12]
 800a9d0:	f109 0310 	add.w	r3, r9, #16
 800a9d4:	f109 0514 	add.w	r5, r9, #20
 800a9d8:	f104 0e14 	add.w	lr, r4, #20
 800a9dc:	f100 0b14 	add.w	fp, r0, #20
 800a9e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a9e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a9e8:	9301      	str	r3, [sp, #4]
 800a9ea:	46d9      	mov	r9, fp
 800a9ec:	f04f 0c00 	mov.w	ip, #0
 800a9f0:	9b01      	ldr	r3, [sp, #4]
 800a9f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a9f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a9fa:	9301      	str	r3, [sp, #4]
 800a9fc:	fa1f f38a 	uxth.w	r3, sl
 800aa00:	4619      	mov	r1, r3
 800aa02:	b283      	uxth	r3, r0
 800aa04:	1acb      	subs	r3, r1, r3
 800aa06:	0c00      	lsrs	r0, r0, #16
 800aa08:	4463      	add	r3, ip
 800aa0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aa0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aa18:	4576      	cmp	r6, lr
 800aa1a:	f849 3b04 	str.w	r3, [r9], #4
 800aa1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa22:	d8e5      	bhi.n	800a9f0 <__mdiff+0x88>
 800aa24:	1b33      	subs	r3, r6, r4
 800aa26:	3b15      	subs	r3, #21
 800aa28:	f023 0303 	bic.w	r3, r3, #3
 800aa2c:	3415      	adds	r4, #21
 800aa2e:	3304      	adds	r3, #4
 800aa30:	42a6      	cmp	r6, r4
 800aa32:	bf38      	it	cc
 800aa34:	2304      	movcc	r3, #4
 800aa36:	441d      	add	r5, r3
 800aa38:	445b      	add	r3, fp
 800aa3a:	461e      	mov	r6, r3
 800aa3c:	462c      	mov	r4, r5
 800aa3e:	4544      	cmp	r4, r8
 800aa40:	d30e      	bcc.n	800aa60 <__mdiff+0xf8>
 800aa42:	f108 0103 	add.w	r1, r8, #3
 800aa46:	1b49      	subs	r1, r1, r5
 800aa48:	f021 0103 	bic.w	r1, r1, #3
 800aa4c:	3d03      	subs	r5, #3
 800aa4e:	45a8      	cmp	r8, r5
 800aa50:	bf38      	it	cc
 800aa52:	2100      	movcc	r1, #0
 800aa54:	440b      	add	r3, r1
 800aa56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa5a:	b191      	cbz	r1, 800aa82 <__mdiff+0x11a>
 800aa5c:	6117      	str	r7, [r2, #16]
 800aa5e:	e79d      	b.n	800a99c <__mdiff+0x34>
 800aa60:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa64:	46e6      	mov	lr, ip
 800aa66:	0c08      	lsrs	r0, r1, #16
 800aa68:	fa1c fc81 	uxtah	ip, ip, r1
 800aa6c:	4471      	add	r1, lr
 800aa6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa72:	b289      	uxth	r1, r1
 800aa74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa78:	f846 1b04 	str.w	r1, [r6], #4
 800aa7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa80:	e7dd      	b.n	800aa3e <__mdiff+0xd6>
 800aa82:	3f01      	subs	r7, #1
 800aa84:	e7e7      	b.n	800aa56 <__mdiff+0xee>
 800aa86:	bf00      	nop
 800aa88:	0800bc55 	.word	0x0800bc55
 800aa8c:	0800bc66 	.word	0x0800bc66

0800aa90 <__d2b>:
 800aa90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa94:	460f      	mov	r7, r1
 800aa96:	2101      	movs	r1, #1
 800aa98:	ec59 8b10 	vmov	r8, r9, d0
 800aa9c:	4616      	mov	r6, r2
 800aa9e:	f7ff fccd 	bl	800a43c <_Balloc>
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	b930      	cbnz	r0, 800aab4 <__d2b+0x24>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	4b23      	ldr	r3, [pc, #140]	@ (800ab38 <__d2b+0xa8>)
 800aaaa:	4824      	ldr	r0, [pc, #144]	@ (800ab3c <__d2b+0xac>)
 800aaac:	f240 310f 	movw	r1, #783	@ 0x30f
 800aab0:	f000 fc3a 	bl	800b328 <__assert_func>
 800aab4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aab8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aabc:	b10d      	cbz	r5, 800aac2 <__d2b+0x32>
 800aabe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aac2:	9301      	str	r3, [sp, #4]
 800aac4:	f1b8 0300 	subs.w	r3, r8, #0
 800aac8:	d023      	beq.n	800ab12 <__d2b+0x82>
 800aaca:	4668      	mov	r0, sp
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	f7ff fd7c 	bl	800a5ca <__lo0bits>
 800aad2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aad6:	b1d0      	cbz	r0, 800ab0e <__d2b+0x7e>
 800aad8:	f1c0 0320 	rsb	r3, r0, #32
 800aadc:	fa02 f303 	lsl.w	r3, r2, r3
 800aae0:	430b      	orrs	r3, r1
 800aae2:	40c2      	lsrs	r2, r0
 800aae4:	6163      	str	r3, [r4, #20]
 800aae6:	9201      	str	r2, [sp, #4]
 800aae8:	9b01      	ldr	r3, [sp, #4]
 800aaea:	61a3      	str	r3, [r4, #24]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	bf0c      	ite	eq
 800aaf0:	2201      	moveq	r2, #1
 800aaf2:	2202      	movne	r2, #2
 800aaf4:	6122      	str	r2, [r4, #16]
 800aaf6:	b1a5      	cbz	r5, 800ab22 <__d2b+0x92>
 800aaf8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aafc:	4405      	add	r5, r0
 800aafe:	603d      	str	r5, [r7, #0]
 800ab00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab04:	6030      	str	r0, [r6, #0]
 800ab06:	4620      	mov	r0, r4
 800ab08:	b003      	add	sp, #12
 800ab0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab0e:	6161      	str	r1, [r4, #20]
 800ab10:	e7ea      	b.n	800aae8 <__d2b+0x58>
 800ab12:	a801      	add	r0, sp, #4
 800ab14:	f7ff fd59 	bl	800a5ca <__lo0bits>
 800ab18:	9b01      	ldr	r3, [sp, #4]
 800ab1a:	6163      	str	r3, [r4, #20]
 800ab1c:	3020      	adds	r0, #32
 800ab1e:	2201      	movs	r2, #1
 800ab20:	e7e8      	b.n	800aaf4 <__d2b+0x64>
 800ab22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab2a:	6038      	str	r0, [r7, #0]
 800ab2c:	6918      	ldr	r0, [r3, #16]
 800ab2e:	f7ff fd2d 	bl	800a58c <__hi0bits>
 800ab32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab36:	e7e5      	b.n	800ab04 <__d2b+0x74>
 800ab38:	0800bc55 	.word	0x0800bc55
 800ab3c:	0800bc66 	.word	0x0800bc66

0800ab40 <__ssputs_r>:
 800ab40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab44:	688e      	ldr	r6, [r1, #8]
 800ab46:	461f      	mov	r7, r3
 800ab48:	42be      	cmp	r6, r7
 800ab4a:	680b      	ldr	r3, [r1, #0]
 800ab4c:	4682      	mov	sl, r0
 800ab4e:	460c      	mov	r4, r1
 800ab50:	4690      	mov	r8, r2
 800ab52:	d82d      	bhi.n	800abb0 <__ssputs_r+0x70>
 800ab54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab5c:	d026      	beq.n	800abac <__ssputs_r+0x6c>
 800ab5e:	6965      	ldr	r5, [r4, #20]
 800ab60:	6909      	ldr	r1, [r1, #16]
 800ab62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab66:	eba3 0901 	sub.w	r9, r3, r1
 800ab6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab6e:	1c7b      	adds	r3, r7, #1
 800ab70:	444b      	add	r3, r9
 800ab72:	106d      	asrs	r5, r5, #1
 800ab74:	429d      	cmp	r5, r3
 800ab76:	bf38      	it	cc
 800ab78:	461d      	movcc	r5, r3
 800ab7a:	0553      	lsls	r3, r2, #21
 800ab7c:	d527      	bpl.n	800abce <__ssputs_r+0x8e>
 800ab7e:	4629      	mov	r1, r5
 800ab80:	f7fd fde2 	bl	8008748 <_malloc_r>
 800ab84:	4606      	mov	r6, r0
 800ab86:	b360      	cbz	r0, 800abe2 <__ssputs_r+0xa2>
 800ab88:	6921      	ldr	r1, [r4, #16]
 800ab8a:	464a      	mov	r2, r9
 800ab8c:	f7fe fdaf 	bl	80096ee <memcpy>
 800ab90:	89a3      	ldrh	r3, [r4, #12]
 800ab92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab9a:	81a3      	strh	r3, [r4, #12]
 800ab9c:	6126      	str	r6, [r4, #16]
 800ab9e:	6165      	str	r5, [r4, #20]
 800aba0:	444e      	add	r6, r9
 800aba2:	eba5 0509 	sub.w	r5, r5, r9
 800aba6:	6026      	str	r6, [r4, #0]
 800aba8:	60a5      	str	r5, [r4, #8]
 800abaa:	463e      	mov	r6, r7
 800abac:	42be      	cmp	r6, r7
 800abae:	d900      	bls.n	800abb2 <__ssputs_r+0x72>
 800abb0:	463e      	mov	r6, r7
 800abb2:	6820      	ldr	r0, [r4, #0]
 800abb4:	4632      	mov	r2, r6
 800abb6:	4641      	mov	r1, r8
 800abb8:	f000 fb9c 	bl	800b2f4 <memmove>
 800abbc:	68a3      	ldr	r3, [r4, #8]
 800abbe:	1b9b      	subs	r3, r3, r6
 800abc0:	60a3      	str	r3, [r4, #8]
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	4433      	add	r3, r6
 800abc6:	6023      	str	r3, [r4, #0]
 800abc8:	2000      	movs	r0, #0
 800abca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abce:	462a      	mov	r2, r5
 800abd0:	f000 fbee 	bl	800b3b0 <_realloc_r>
 800abd4:	4606      	mov	r6, r0
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d1e0      	bne.n	800ab9c <__ssputs_r+0x5c>
 800abda:	6921      	ldr	r1, [r4, #16]
 800abdc:	4650      	mov	r0, sl
 800abde:	f7ff fbe3 	bl	800a3a8 <_free_r>
 800abe2:	230c      	movs	r3, #12
 800abe4:	f8ca 3000 	str.w	r3, [sl]
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abee:	81a3      	strh	r3, [r4, #12]
 800abf0:	f04f 30ff 	mov.w	r0, #4294967295
 800abf4:	e7e9      	b.n	800abca <__ssputs_r+0x8a>
	...

0800abf8 <_svfiprintf_r>:
 800abf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfc:	4698      	mov	r8, r3
 800abfe:	898b      	ldrh	r3, [r1, #12]
 800ac00:	061b      	lsls	r3, r3, #24
 800ac02:	b09d      	sub	sp, #116	@ 0x74
 800ac04:	4607      	mov	r7, r0
 800ac06:	460d      	mov	r5, r1
 800ac08:	4614      	mov	r4, r2
 800ac0a:	d510      	bpl.n	800ac2e <_svfiprintf_r+0x36>
 800ac0c:	690b      	ldr	r3, [r1, #16]
 800ac0e:	b973      	cbnz	r3, 800ac2e <_svfiprintf_r+0x36>
 800ac10:	2140      	movs	r1, #64	@ 0x40
 800ac12:	f7fd fd99 	bl	8008748 <_malloc_r>
 800ac16:	6028      	str	r0, [r5, #0]
 800ac18:	6128      	str	r0, [r5, #16]
 800ac1a:	b930      	cbnz	r0, 800ac2a <_svfiprintf_r+0x32>
 800ac1c:	230c      	movs	r3, #12
 800ac1e:	603b      	str	r3, [r7, #0]
 800ac20:	f04f 30ff 	mov.w	r0, #4294967295
 800ac24:	b01d      	add	sp, #116	@ 0x74
 800ac26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2a:	2340      	movs	r3, #64	@ 0x40
 800ac2c:	616b      	str	r3, [r5, #20]
 800ac2e:	2300      	movs	r3, #0
 800ac30:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac32:	2320      	movs	r3, #32
 800ac34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac38:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac3c:	2330      	movs	r3, #48	@ 0x30
 800ac3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800addc <_svfiprintf_r+0x1e4>
 800ac42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac46:	f04f 0901 	mov.w	r9, #1
 800ac4a:	4623      	mov	r3, r4
 800ac4c:	469a      	mov	sl, r3
 800ac4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac52:	b10a      	cbz	r2, 800ac58 <_svfiprintf_r+0x60>
 800ac54:	2a25      	cmp	r2, #37	@ 0x25
 800ac56:	d1f9      	bne.n	800ac4c <_svfiprintf_r+0x54>
 800ac58:	ebba 0b04 	subs.w	fp, sl, r4
 800ac5c:	d00b      	beq.n	800ac76 <_svfiprintf_r+0x7e>
 800ac5e:	465b      	mov	r3, fp
 800ac60:	4622      	mov	r2, r4
 800ac62:	4629      	mov	r1, r5
 800ac64:	4638      	mov	r0, r7
 800ac66:	f7ff ff6b 	bl	800ab40 <__ssputs_r>
 800ac6a:	3001      	adds	r0, #1
 800ac6c:	f000 80a7 	beq.w	800adbe <_svfiprintf_r+0x1c6>
 800ac70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac72:	445a      	add	r2, fp
 800ac74:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac76:	f89a 3000 	ldrb.w	r3, [sl]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f000 809f 	beq.w	800adbe <_svfiprintf_r+0x1c6>
 800ac80:	2300      	movs	r3, #0
 800ac82:	f04f 32ff 	mov.w	r2, #4294967295
 800ac86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac8a:	f10a 0a01 	add.w	sl, sl, #1
 800ac8e:	9304      	str	r3, [sp, #16]
 800ac90:	9307      	str	r3, [sp, #28]
 800ac92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac96:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac98:	4654      	mov	r4, sl
 800ac9a:	2205      	movs	r2, #5
 800ac9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca0:	484e      	ldr	r0, [pc, #312]	@ (800addc <_svfiprintf_r+0x1e4>)
 800aca2:	f7f5 faa5 	bl	80001f0 <memchr>
 800aca6:	9a04      	ldr	r2, [sp, #16]
 800aca8:	b9d8      	cbnz	r0, 800ace2 <_svfiprintf_r+0xea>
 800acaa:	06d0      	lsls	r0, r2, #27
 800acac:	bf44      	itt	mi
 800acae:	2320      	movmi	r3, #32
 800acb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acb4:	0711      	lsls	r1, r2, #28
 800acb6:	bf44      	itt	mi
 800acb8:	232b      	movmi	r3, #43	@ 0x2b
 800acba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acbe:	f89a 3000 	ldrb.w	r3, [sl]
 800acc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800acc4:	d015      	beq.n	800acf2 <_svfiprintf_r+0xfa>
 800acc6:	9a07      	ldr	r2, [sp, #28]
 800acc8:	4654      	mov	r4, sl
 800acca:	2000      	movs	r0, #0
 800accc:	f04f 0c0a 	mov.w	ip, #10
 800acd0:	4621      	mov	r1, r4
 800acd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acd6:	3b30      	subs	r3, #48	@ 0x30
 800acd8:	2b09      	cmp	r3, #9
 800acda:	d94b      	bls.n	800ad74 <_svfiprintf_r+0x17c>
 800acdc:	b1b0      	cbz	r0, 800ad0c <_svfiprintf_r+0x114>
 800acde:	9207      	str	r2, [sp, #28]
 800ace0:	e014      	b.n	800ad0c <_svfiprintf_r+0x114>
 800ace2:	eba0 0308 	sub.w	r3, r0, r8
 800ace6:	fa09 f303 	lsl.w	r3, r9, r3
 800acea:	4313      	orrs	r3, r2
 800acec:	9304      	str	r3, [sp, #16]
 800acee:	46a2      	mov	sl, r4
 800acf0:	e7d2      	b.n	800ac98 <_svfiprintf_r+0xa0>
 800acf2:	9b03      	ldr	r3, [sp, #12]
 800acf4:	1d19      	adds	r1, r3, #4
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	9103      	str	r1, [sp, #12]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	bfbb      	ittet	lt
 800acfe:	425b      	neglt	r3, r3
 800ad00:	f042 0202 	orrlt.w	r2, r2, #2
 800ad04:	9307      	strge	r3, [sp, #28]
 800ad06:	9307      	strlt	r3, [sp, #28]
 800ad08:	bfb8      	it	lt
 800ad0a:	9204      	strlt	r2, [sp, #16]
 800ad0c:	7823      	ldrb	r3, [r4, #0]
 800ad0e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad10:	d10a      	bne.n	800ad28 <_svfiprintf_r+0x130>
 800ad12:	7863      	ldrb	r3, [r4, #1]
 800ad14:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad16:	d132      	bne.n	800ad7e <_svfiprintf_r+0x186>
 800ad18:	9b03      	ldr	r3, [sp, #12]
 800ad1a:	1d1a      	adds	r2, r3, #4
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	9203      	str	r2, [sp, #12]
 800ad20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad24:	3402      	adds	r4, #2
 800ad26:	9305      	str	r3, [sp, #20]
 800ad28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800adec <_svfiprintf_r+0x1f4>
 800ad2c:	7821      	ldrb	r1, [r4, #0]
 800ad2e:	2203      	movs	r2, #3
 800ad30:	4650      	mov	r0, sl
 800ad32:	f7f5 fa5d 	bl	80001f0 <memchr>
 800ad36:	b138      	cbz	r0, 800ad48 <_svfiprintf_r+0x150>
 800ad38:	9b04      	ldr	r3, [sp, #16]
 800ad3a:	eba0 000a 	sub.w	r0, r0, sl
 800ad3e:	2240      	movs	r2, #64	@ 0x40
 800ad40:	4082      	lsls	r2, r0
 800ad42:	4313      	orrs	r3, r2
 800ad44:	3401      	adds	r4, #1
 800ad46:	9304      	str	r3, [sp, #16]
 800ad48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad4c:	4824      	ldr	r0, [pc, #144]	@ (800ade0 <_svfiprintf_r+0x1e8>)
 800ad4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad52:	2206      	movs	r2, #6
 800ad54:	f7f5 fa4c 	bl	80001f0 <memchr>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d036      	beq.n	800adca <_svfiprintf_r+0x1d2>
 800ad5c:	4b21      	ldr	r3, [pc, #132]	@ (800ade4 <_svfiprintf_r+0x1ec>)
 800ad5e:	bb1b      	cbnz	r3, 800ada8 <_svfiprintf_r+0x1b0>
 800ad60:	9b03      	ldr	r3, [sp, #12]
 800ad62:	3307      	adds	r3, #7
 800ad64:	f023 0307 	bic.w	r3, r3, #7
 800ad68:	3308      	adds	r3, #8
 800ad6a:	9303      	str	r3, [sp, #12]
 800ad6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad6e:	4433      	add	r3, r6
 800ad70:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad72:	e76a      	b.n	800ac4a <_svfiprintf_r+0x52>
 800ad74:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad78:	460c      	mov	r4, r1
 800ad7a:	2001      	movs	r0, #1
 800ad7c:	e7a8      	b.n	800acd0 <_svfiprintf_r+0xd8>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	3401      	adds	r4, #1
 800ad82:	9305      	str	r3, [sp, #20]
 800ad84:	4619      	mov	r1, r3
 800ad86:	f04f 0c0a 	mov.w	ip, #10
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad90:	3a30      	subs	r2, #48	@ 0x30
 800ad92:	2a09      	cmp	r2, #9
 800ad94:	d903      	bls.n	800ad9e <_svfiprintf_r+0x1a6>
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d0c6      	beq.n	800ad28 <_svfiprintf_r+0x130>
 800ad9a:	9105      	str	r1, [sp, #20]
 800ad9c:	e7c4      	b.n	800ad28 <_svfiprintf_r+0x130>
 800ad9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ada2:	4604      	mov	r4, r0
 800ada4:	2301      	movs	r3, #1
 800ada6:	e7f0      	b.n	800ad8a <_svfiprintf_r+0x192>
 800ada8:	ab03      	add	r3, sp, #12
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	462a      	mov	r2, r5
 800adae:	4b0e      	ldr	r3, [pc, #56]	@ (800ade8 <_svfiprintf_r+0x1f0>)
 800adb0:	a904      	add	r1, sp, #16
 800adb2:	4638      	mov	r0, r7
 800adb4:	f7fd fe78 	bl	8008aa8 <_printf_float>
 800adb8:	1c42      	adds	r2, r0, #1
 800adba:	4606      	mov	r6, r0
 800adbc:	d1d6      	bne.n	800ad6c <_svfiprintf_r+0x174>
 800adbe:	89ab      	ldrh	r3, [r5, #12]
 800adc0:	065b      	lsls	r3, r3, #25
 800adc2:	f53f af2d 	bmi.w	800ac20 <_svfiprintf_r+0x28>
 800adc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adc8:	e72c      	b.n	800ac24 <_svfiprintf_r+0x2c>
 800adca:	ab03      	add	r3, sp, #12
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	462a      	mov	r2, r5
 800add0:	4b05      	ldr	r3, [pc, #20]	@ (800ade8 <_svfiprintf_r+0x1f0>)
 800add2:	a904      	add	r1, sp, #16
 800add4:	4638      	mov	r0, r7
 800add6:	f7fe f8ff 	bl	8008fd8 <_printf_i>
 800adda:	e7ed      	b.n	800adb8 <_svfiprintf_r+0x1c0>
 800addc:	0800bdc0 	.word	0x0800bdc0
 800ade0:	0800bdca 	.word	0x0800bdca
 800ade4:	08008aa9 	.word	0x08008aa9
 800ade8:	0800ab41 	.word	0x0800ab41
 800adec:	0800bdc6 	.word	0x0800bdc6

0800adf0 <__sfputc_r>:
 800adf0:	6893      	ldr	r3, [r2, #8]
 800adf2:	3b01      	subs	r3, #1
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	b410      	push	{r4}
 800adf8:	6093      	str	r3, [r2, #8]
 800adfa:	da08      	bge.n	800ae0e <__sfputc_r+0x1e>
 800adfc:	6994      	ldr	r4, [r2, #24]
 800adfe:	42a3      	cmp	r3, r4
 800ae00:	db01      	blt.n	800ae06 <__sfputc_r+0x16>
 800ae02:	290a      	cmp	r1, #10
 800ae04:	d103      	bne.n	800ae0e <__sfputc_r+0x1e>
 800ae06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae0a:	f000 b9df 	b.w	800b1cc <__swbuf_r>
 800ae0e:	6813      	ldr	r3, [r2, #0]
 800ae10:	1c58      	adds	r0, r3, #1
 800ae12:	6010      	str	r0, [r2, #0]
 800ae14:	7019      	strb	r1, [r3, #0]
 800ae16:	4608      	mov	r0, r1
 800ae18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <__sfputs_r>:
 800ae1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae20:	4606      	mov	r6, r0
 800ae22:	460f      	mov	r7, r1
 800ae24:	4614      	mov	r4, r2
 800ae26:	18d5      	adds	r5, r2, r3
 800ae28:	42ac      	cmp	r4, r5
 800ae2a:	d101      	bne.n	800ae30 <__sfputs_r+0x12>
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	e007      	b.n	800ae40 <__sfputs_r+0x22>
 800ae30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae34:	463a      	mov	r2, r7
 800ae36:	4630      	mov	r0, r6
 800ae38:	f7ff ffda 	bl	800adf0 <__sfputc_r>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d1f3      	bne.n	800ae28 <__sfputs_r+0xa>
 800ae40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae44 <_vfiprintf_r>:
 800ae44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae48:	460d      	mov	r5, r1
 800ae4a:	b09d      	sub	sp, #116	@ 0x74
 800ae4c:	4614      	mov	r4, r2
 800ae4e:	4698      	mov	r8, r3
 800ae50:	4606      	mov	r6, r0
 800ae52:	b118      	cbz	r0, 800ae5c <_vfiprintf_r+0x18>
 800ae54:	6a03      	ldr	r3, [r0, #32]
 800ae56:	b90b      	cbnz	r3, 800ae5c <_vfiprintf_r+0x18>
 800ae58:	f7fe fa6a 	bl	8009330 <__sinit>
 800ae5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae5e:	07d9      	lsls	r1, r3, #31
 800ae60:	d405      	bmi.n	800ae6e <_vfiprintf_r+0x2a>
 800ae62:	89ab      	ldrh	r3, [r5, #12]
 800ae64:	059a      	lsls	r2, r3, #22
 800ae66:	d402      	bmi.n	800ae6e <_vfiprintf_r+0x2a>
 800ae68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae6a:	f7fe fc36 	bl	80096da <__retarget_lock_acquire_recursive>
 800ae6e:	89ab      	ldrh	r3, [r5, #12]
 800ae70:	071b      	lsls	r3, r3, #28
 800ae72:	d501      	bpl.n	800ae78 <_vfiprintf_r+0x34>
 800ae74:	692b      	ldr	r3, [r5, #16]
 800ae76:	b99b      	cbnz	r3, 800aea0 <_vfiprintf_r+0x5c>
 800ae78:	4629      	mov	r1, r5
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f000 f9e4 	bl	800b248 <__swsetup_r>
 800ae80:	b170      	cbz	r0, 800aea0 <_vfiprintf_r+0x5c>
 800ae82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae84:	07dc      	lsls	r4, r3, #31
 800ae86:	d504      	bpl.n	800ae92 <_vfiprintf_r+0x4e>
 800ae88:	f04f 30ff 	mov.w	r0, #4294967295
 800ae8c:	b01d      	add	sp, #116	@ 0x74
 800ae8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae92:	89ab      	ldrh	r3, [r5, #12]
 800ae94:	0598      	lsls	r0, r3, #22
 800ae96:	d4f7      	bmi.n	800ae88 <_vfiprintf_r+0x44>
 800ae98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae9a:	f7fe fc1f 	bl	80096dc <__retarget_lock_release_recursive>
 800ae9e:	e7f3      	b.n	800ae88 <_vfiprintf_r+0x44>
 800aea0:	2300      	movs	r3, #0
 800aea2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aea4:	2320      	movs	r3, #32
 800aea6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aeaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeae:	2330      	movs	r3, #48	@ 0x30
 800aeb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b060 <_vfiprintf_r+0x21c>
 800aeb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aeb8:	f04f 0901 	mov.w	r9, #1
 800aebc:	4623      	mov	r3, r4
 800aebe:	469a      	mov	sl, r3
 800aec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aec4:	b10a      	cbz	r2, 800aeca <_vfiprintf_r+0x86>
 800aec6:	2a25      	cmp	r2, #37	@ 0x25
 800aec8:	d1f9      	bne.n	800aebe <_vfiprintf_r+0x7a>
 800aeca:	ebba 0b04 	subs.w	fp, sl, r4
 800aece:	d00b      	beq.n	800aee8 <_vfiprintf_r+0xa4>
 800aed0:	465b      	mov	r3, fp
 800aed2:	4622      	mov	r2, r4
 800aed4:	4629      	mov	r1, r5
 800aed6:	4630      	mov	r0, r6
 800aed8:	f7ff ffa1 	bl	800ae1e <__sfputs_r>
 800aedc:	3001      	adds	r0, #1
 800aede:	f000 80a7 	beq.w	800b030 <_vfiprintf_r+0x1ec>
 800aee2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aee4:	445a      	add	r2, fp
 800aee6:	9209      	str	r2, [sp, #36]	@ 0x24
 800aee8:	f89a 3000 	ldrb.w	r3, [sl]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f000 809f 	beq.w	800b030 <_vfiprintf_r+0x1ec>
 800aef2:	2300      	movs	r3, #0
 800aef4:	f04f 32ff 	mov.w	r2, #4294967295
 800aef8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aefc:	f10a 0a01 	add.w	sl, sl, #1
 800af00:	9304      	str	r3, [sp, #16]
 800af02:	9307      	str	r3, [sp, #28]
 800af04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af08:	931a      	str	r3, [sp, #104]	@ 0x68
 800af0a:	4654      	mov	r4, sl
 800af0c:	2205      	movs	r2, #5
 800af0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af12:	4853      	ldr	r0, [pc, #332]	@ (800b060 <_vfiprintf_r+0x21c>)
 800af14:	f7f5 f96c 	bl	80001f0 <memchr>
 800af18:	9a04      	ldr	r2, [sp, #16]
 800af1a:	b9d8      	cbnz	r0, 800af54 <_vfiprintf_r+0x110>
 800af1c:	06d1      	lsls	r1, r2, #27
 800af1e:	bf44      	itt	mi
 800af20:	2320      	movmi	r3, #32
 800af22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af26:	0713      	lsls	r3, r2, #28
 800af28:	bf44      	itt	mi
 800af2a:	232b      	movmi	r3, #43	@ 0x2b
 800af2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af30:	f89a 3000 	ldrb.w	r3, [sl]
 800af34:	2b2a      	cmp	r3, #42	@ 0x2a
 800af36:	d015      	beq.n	800af64 <_vfiprintf_r+0x120>
 800af38:	9a07      	ldr	r2, [sp, #28]
 800af3a:	4654      	mov	r4, sl
 800af3c:	2000      	movs	r0, #0
 800af3e:	f04f 0c0a 	mov.w	ip, #10
 800af42:	4621      	mov	r1, r4
 800af44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af48:	3b30      	subs	r3, #48	@ 0x30
 800af4a:	2b09      	cmp	r3, #9
 800af4c:	d94b      	bls.n	800afe6 <_vfiprintf_r+0x1a2>
 800af4e:	b1b0      	cbz	r0, 800af7e <_vfiprintf_r+0x13a>
 800af50:	9207      	str	r2, [sp, #28]
 800af52:	e014      	b.n	800af7e <_vfiprintf_r+0x13a>
 800af54:	eba0 0308 	sub.w	r3, r0, r8
 800af58:	fa09 f303 	lsl.w	r3, r9, r3
 800af5c:	4313      	orrs	r3, r2
 800af5e:	9304      	str	r3, [sp, #16]
 800af60:	46a2      	mov	sl, r4
 800af62:	e7d2      	b.n	800af0a <_vfiprintf_r+0xc6>
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	1d19      	adds	r1, r3, #4
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	9103      	str	r1, [sp, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	bfbb      	ittet	lt
 800af70:	425b      	neglt	r3, r3
 800af72:	f042 0202 	orrlt.w	r2, r2, #2
 800af76:	9307      	strge	r3, [sp, #28]
 800af78:	9307      	strlt	r3, [sp, #28]
 800af7a:	bfb8      	it	lt
 800af7c:	9204      	strlt	r2, [sp, #16]
 800af7e:	7823      	ldrb	r3, [r4, #0]
 800af80:	2b2e      	cmp	r3, #46	@ 0x2e
 800af82:	d10a      	bne.n	800af9a <_vfiprintf_r+0x156>
 800af84:	7863      	ldrb	r3, [r4, #1]
 800af86:	2b2a      	cmp	r3, #42	@ 0x2a
 800af88:	d132      	bne.n	800aff0 <_vfiprintf_r+0x1ac>
 800af8a:	9b03      	ldr	r3, [sp, #12]
 800af8c:	1d1a      	adds	r2, r3, #4
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	9203      	str	r2, [sp, #12]
 800af92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af96:	3402      	adds	r4, #2
 800af98:	9305      	str	r3, [sp, #20]
 800af9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b070 <_vfiprintf_r+0x22c>
 800af9e:	7821      	ldrb	r1, [r4, #0]
 800afa0:	2203      	movs	r2, #3
 800afa2:	4650      	mov	r0, sl
 800afa4:	f7f5 f924 	bl	80001f0 <memchr>
 800afa8:	b138      	cbz	r0, 800afba <_vfiprintf_r+0x176>
 800afaa:	9b04      	ldr	r3, [sp, #16]
 800afac:	eba0 000a 	sub.w	r0, r0, sl
 800afb0:	2240      	movs	r2, #64	@ 0x40
 800afb2:	4082      	lsls	r2, r0
 800afb4:	4313      	orrs	r3, r2
 800afb6:	3401      	adds	r4, #1
 800afb8:	9304      	str	r3, [sp, #16]
 800afba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afbe:	4829      	ldr	r0, [pc, #164]	@ (800b064 <_vfiprintf_r+0x220>)
 800afc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afc4:	2206      	movs	r2, #6
 800afc6:	f7f5 f913 	bl	80001f0 <memchr>
 800afca:	2800      	cmp	r0, #0
 800afcc:	d03f      	beq.n	800b04e <_vfiprintf_r+0x20a>
 800afce:	4b26      	ldr	r3, [pc, #152]	@ (800b068 <_vfiprintf_r+0x224>)
 800afd0:	bb1b      	cbnz	r3, 800b01a <_vfiprintf_r+0x1d6>
 800afd2:	9b03      	ldr	r3, [sp, #12]
 800afd4:	3307      	adds	r3, #7
 800afd6:	f023 0307 	bic.w	r3, r3, #7
 800afda:	3308      	adds	r3, #8
 800afdc:	9303      	str	r3, [sp, #12]
 800afde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe0:	443b      	add	r3, r7
 800afe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800afe4:	e76a      	b.n	800aebc <_vfiprintf_r+0x78>
 800afe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800afea:	460c      	mov	r4, r1
 800afec:	2001      	movs	r0, #1
 800afee:	e7a8      	b.n	800af42 <_vfiprintf_r+0xfe>
 800aff0:	2300      	movs	r3, #0
 800aff2:	3401      	adds	r4, #1
 800aff4:	9305      	str	r3, [sp, #20]
 800aff6:	4619      	mov	r1, r3
 800aff8:	f04f 0c0a 	mov.w	ip, #10
 800affc:	4620      	mov	r0, r4
 800affe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b002:	3a30      	subs	r2, #48	@ 0x30
 800b004:	2a09      	cmp	r2, #9
 800b006:	d903      	bls.n	800b010 <_vfiprintf_r+0x1cc>
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d0c6      	beq.n	800af9a <_vfiprintf_r+0x156>
 800b00c:	9105      	str	r1, [sp, #20]
 800b00e:	e7c4      	b.n	800af9a <_vfiprintf_r+0x156>
 800b010:	fb0c 2101 	mla	r1, ip, r1, r2
 800b014:	4604      	mov	r4, r0
 800b016:	2301      	movs	r3, #1
 800b018:	e7f0      	b.n	800affc <_vfiprintf_r+0x1b8>
 800b01a:	ab03      	add	r3, sp, #12
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	462a      	mov	r2, r5
 800b020:	4b12      	ldr	r3, [pc, #72]	@ (800b06c <_vfiprintf_r+0x228>)
 800b022:	a904      	add	r1, sp, #16
 800b024:	4630      	mov	r0, r6
 800b026:	f7fd fd3f 	bl	8008aa8 <_printf_float>
 800b02a:	4607      	mov	r7, r0
 800b02c:	1c78      	adds	r0, r7, #1
 800b02e:	d1d6      	bne.n	800afde <_vfiprintf_r+0x19a>
 800b030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b032:	07d9      	lsls	r1, r3, #31
 800b034:	d405      	bmi.n	800b042 <_vfiprintf_r+0x1fe>
 800b036:	89ab      	ldrh	r3, [r5, #12]
 800b038:	059a      	lsls	r2, r3, #22
 800b03a:	d402      	bmi.n	800b042 <_vfiprintf_r+0x1fe>
 800b03c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b03e:	f7fe fb4d 	bl	80096dc <__retarget_lock_release_recursive>
 800b042:	89ab      	ldrh	r3, [r5, #12]
 800b044:	065b      	lsls	r3, r3, #25
 800b046:	f53f af1f 	bmi.w	800ae88 <_vfiprintf_r+0x44>
 800b04a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b04c:	e71e      	b.n	800ae8c <_vfiprintf_r+0x48>
 800b04e:	ab03      	add	r3, sp, #12
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	462a      	mov	r2, r5
 800b054:	4b05      	ldr	r3, [pc, #20]	@ (800b06c <_vfiprintf_r+0x228>)
 800b056:	a904      	add	r1, sp, #16
 800b058:	4630      	mov	r0, r6
 800b05a:	f7fd ffbd 	bl	8008fd8 <_printf_i>
 800b05e:	e7e4      	b.n	800b02a <_vfiprintf_r+0x1e6>
 800b060:	0800bdc0 	.word	0x0800bdc0
 800b064:	0800bdca 	.word	0x0800bdca
 800b068:	08008aa9 	.word	0x08008aa9
 800b06c:	0800ae1f 	.word	0x0800ae1f
 800b070:	0800bdc6 	.word	0x0800bdc6

0800b074 <__sflush_r>:
 800b074:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b07c:	0716      	lsls	r6, r2, #28
 800b07e:	4605      	mov	r5, r0
 800b080:	460c      	mov	r4, r1
 800b082:	d454      	bmi.n	800b12e <__sflush_r+0xba>
 800b084:	684b      	ldr	r3, [r1, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	dc02      	bgt.n	800b090 <__sflush_r+0x1c>
 800b08a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	dd48      	ble.n	800b122 <__sflush_r+0xae>
 800b090:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b092:	2e00      	cmp	r6, #0
 800b094:	d045      	beq.n	800b122 <__sflush_r+0xae>
 800b096:	2300      	movs	r3, #0
 800b098:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b09c:	682f      	ldr	r7, [r5, #0]
 800b09e:	6a21      	ldr	r1, [r4, #32]
 800b0a0:	602b      	str	r3, [r5, #0]
 800b0a2:	d030      	beq.n	800b106 <__sflush_r+0x92>
 800b0a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	0759      	lsls	r1, r3, #29
 800b0aa:	d505      	bpl.n	800b0b8 <__sflush_r+0x44>
 800b0ac:	6863      	ldr	r3, [r4, #4]
 800b0ae:	1ad2      	subs	r2, r2, r3
 800b0b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0b2:	b10b      	cbz	r3, 800b0b8 <__sflush_r+0x44>
 800b0b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0b6:	1ad2      	subs	r2, r2, r3
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0bc:	6a21      	ldr	r1, [r4, #32]
 800b0be:	4628      	mov	r0, r5
 800b0c0:	47b0      	blx	r6
 800b0c2:	1c43      	adds	r3, r0, #1
 800b0c4:	89a3      	ldrh	r3, [r4, #12]
 800b0c6:	d106      	bne.n	800b0d6 <__sflush_r+0x62>
 800b0c8:	6829      	ldr	r1, [r5, #0]
 800b0ca:	291d      	cmp	r1, #29
 800b0cc:	d82b      	bhi.n	800b126 <__sflush_r+0xb2>
 800b0ce:	4a2a      	ldr	r2, [pc, #168]	@ (800b178 <__sflush_r+0x104>)
 800b0d0:	410a      	asrs	r2, r1
 800b0d2:	07d6      	lsls	r6, r2, #31
 800b0d4:	d427      	bmi.n	800b126 <__sflush_r+0xb2>
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	6062      	str	r2, [r4, #4]
 800b0da:	04d9      	lsls	r1, r3, #19
 800b0dc:	6922      	ldr	r2, [r4, #16]
 800b0de:	6022      	str	r2, [r4, #0]
 800b0e0:	d504      	bpl.n	800b0ec <__sflush_r+0x78>
 800b0e2:	1c42      	adds	r2, r0, #1
 800b0e4:	d101      	bne.n	800b0ea <__sflush_r+0x76>
 800b0e6:	682b      	ldr	r3, [r5, #0]
 800b0e8:	b903      	cbnz	r3, 800b0ec <__sflush_r+0x78>
 800b0ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0ee:	602f      	str	r7, [r5, #0]
 800b0f0:	b1b9      	cbz	r1, 800b122 <__sflush_r+0xae>
 800b0f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0f6:	4299      	cmp	r1, r3
 800b0f8:	d002      	beq.n	800b100 <__sflush_r+0x8c>
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f7ff f954 	bl	800a3a8 <_free_r>
 800b100:	2300      	movs	r3, #0
 800b102:	6363      	str	r3, [r4, #52]	@ 0x34
 800b104:	e00d      	b.n	800b122 <__sflush_r+0xae>
 800b106:	2301      	movs	r3, #1
 800b108:	4628      	mov	r0, r5
 800b10a:	47b0      	blx	r6
 800b10c:	4602      	mov	r2, r0
 800b10e:	1c50      	adds	r0, r2, #1
 800b110:	d1c9      	bne.n	800b0a6 <__sflush_r+0x32>
 800b112:	682b      	ldr	r3, [r5, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d0c6      	beq.n	800b0a6 <__sflush_r+0x32>
 800b118:	2b1d      	cmp	r3, #29
 800b11a:	d001      	beq.n	800b120 <__sflush_r+0xac>
 800b11c:	2b16      	cmp	r3, #22
 800b11e:	d11e      	bne.n	800b15e <__sflush_r+0xea>
 800b120:	602f      	str	r7, [r5, #0]
 800b122:	2000      	movs	r0, #0
 800b124:	e022      	b.n	800b16c <__sflush_r+0xf8>
 800b126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b12a:	b21b      	sxth	r3, r3
 800b12c:	e01b      	b.n	800b166 <__sflush_r+0xf2>
 800b12e:	690f      	ldr	r7, [r1, #16]
 800b130:	2f00      	cmp	r7, #0
 800b132:	d0f6      	beq.n	800b122 <__sflush_r+0xae>
 800b134:	0793      	lsls	r3, r2, #30
 800b136:	680e      	ldr	r6, [r1, #0]
 800b138:	bf08      	it	eq
 800b13a:	694b      	ldreq	r3, [r1, #20]
 800b13c:	600f      	str	r7, [r1, #0]
 800b13e:	bf18      	it	ne
 800b140:	2300      	movne	r3, #0
 800b142:	eba6 0807 	sub.w	r8, r6, r7
 800b146:	608b      	str	r3, [r1, #8]
 800b148:	f1b8 0f00 	cmp.w	r8, #0
 800b14c:	dde9      	ble.n	800b122 <__sflush_r+0xae>
 800b14e:	6a21      	ldr	r1, [r4, #32]
 800b150:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b152:	4643      	mov	r3, r8
 800b154:	463a      	mov	r2, r7
 800b156:	4628      	mov	r0, r5
 800b158:	47b0      	blx	r6
 800b15a:	2800      	cmp	r0, #0
 800b15c:	dc08      	bgt.n	800b170 <__sflush_r+0xfc>
 800b15e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b166:	81a3      	strh	r3, [r4, #12]
 800b168:	f04f 30ff 	mov.w	r0, #4294967295
 800b16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b170:	4407      	add	r7, r0
 800b172:	eba8 0800 	sub.w	r8, r8, r0
 800b176:	e7e7      	b.n	800b148 <__sflush_r+0xd4>
 800b178:	dfbffffe 	.word	0xdfbffffe

0800b17c <_fflush_r>:
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	690b      	ldr	r3, [r1, #16]
 800b180:	4605      	mov	r5, r0
 800b182:	460c      	mov	r4, r1
 800b184:	b913      	cbnz	r3, 800b18c <_fflush_r+0x10>
 800b186:	2500      	movs	r5, #0
 800b188:	4628      	mov	r0, r5
 800b18a:	bd38      	pop	{r3, r4, r5, pc}
 800b18c:	b118      	cbz	r0, 800b196 <_fflush_r+0x1a>
 800b18e:	6a03      	ldr	r3, [r0, #32]
 800b190:	b90b      	cbnz	r3, 800b196 <_fflush_r+0x1a>
 800b192:	f7fe f8cd 	bl	8009330 <__sinit>
 800b196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d0f3      	beq.n	800b186 <_fflush_r+0xa>
 800b19e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1a0:	07d0      	lsls	r0, r2, #31
 800b1a2:	d404      	bmi.n	800b1ae <_fflush_r+0x32>
 800b1a4:	0599      	lsls	r1, r3, #22
 800b1a6:	d402      	bmi.n	800b1ae <_fflush_r+0x32>
 800b1a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1aa:	f7fe fa96 	bl	80096da <__retarget_lock_acquire_recursive>
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	f7ff ff5f 	bl	800b074 <__sflush_r>
 800b1b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1b8:	07da      	lsls	r2, r3, #31
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	d4e4      	bmi.n	800b188 <_fflush_r+0xc>
 800b1be:	89a3      	ldrh	r3, [r4, #12]
 800b1c0:	059b      	lsls	r3, r3, #22
 800b1c2:	d4e1      	bmi.n	800b188 <_fflush_r+0xc>
 800b1c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1c6:	f7fe fa89 	bl	80096dc <__retarget_lock_release_recursive>
 800b1ca:	e7dd      	b.n	800b188 <_fflush_r+0xc>

0800b1cc <__swbuf_r>:
 800b1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ce:	460e      	mov	r6, r1
 800b1d0:	4614      	mov	r4, r2
 800b1d2:	4605      	mov	r5, r0
 800b1d4:	b118      	cbz	r0, 800b1de <__swbuf_r+0x12>
 800b1d6:	6a03      	ldr	r3, [r0, #32]
 800b1d8:	b90b      	cbnz	r3, 800b1de <__swbuf_r+0x12>
 800b1da:	f7fe f8a9 	bl	8009330 <__sinit>
 800b1de:	69a3      	ldr	r3, [r4, #24]
 800b1e0:	60a3      	str	r3, [r4, #8]
 800b1e2:	89a3      	ldrh	r3, [r4, #12]
 800b1e4:	071a      	lsls	r2, r3, #28
 800b1e6:	d501      	bpl.n	800b1ec <__swbuf_r+0x20>
 800b1e8:	6923      	ldr	r3, [r4, #16]
 800b1ea:	b943      	cbnz	r3, 800b1fe <__swbuf_r+0x32>
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f000 f82a 	bl	800b248 <__swsetup_r>
 800b1f4:	b118      	cbz	r0, 800b1fe <__swbuf_r+0x32>
 800b1f6:	f04f 37ff 	mov.w	r7, #4294967295
 800b1fa:	4638      	mov	r0, r7
 800b1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	6922      	ldr	r2, [r4, #16]
 800b202:	1a98      	subs	r0, r3, r2
 800b204:	6963      	ldr	r3, [r4, #20]
 800b206:	b2f6      	uxtb	r6, r6
 800b208:	4283      	cmp	r3, r0
 800b20a:	4637      	mov	r7, r6
 800b20c:	dc05      	bgt.n	800b21a <__swbuf_r+0x4e>
 800b20e:	4621      	mov	r1, r4
 800b210:	4628      	mov	r0, r5
 800b212:	f7ff ffb3 	bl	800b17c <_fflush_r>
 800b216:	2800      	cmp	r0, #0
 800b218:	d1ed      	bne.n	800b1f6 <__swbuf_r+0x2a>
 800b21a:	68a3      	ldr	r3, [r4, #8]
 800b21c:	3b01      	subs	r3, #1
 800b21e:	60a3      	str	r3, [r4, #8]
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	1c5a      	adds	r2, r3, #1
 800b224:	6022      	str	r2, [r4, #0]
 800b226:	701e      	strb	r6, [r3, #0]
 800b228:	6962      	ldr	r2, [r4, #20]
 800b22a:	1c43      	adds	r3, r0, #1
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d004      	beq.n	800b23a <__swbuf_r+0x6e>
 800b230:	89a3      	ldrh	r3, [r4, #12]
 800b232:	07db      	lsls	r3, r3, #31
 800b234:	d5e1      	bpl.n	800b1fa <__swbuf_r+0x2e>
 800b236:	2e0a      	cmp	r6, #10
 800b238:	d1df      	bne.n	800b1fa <__swbuf_r+0x2e>
 800b23a:	4621      	mov	r1, r4
 800b23c:	4628      	mov	r0, r5
 800b23e:	f7ff ff9d 	bl	800b17c <_fflush_r>
 800b242:	2800      	cmp	r0, #0
 800b244:	d0d9      	beq.n	800b1fa <__swbuf_r+0x2e>
 800b246:	e7d6      	b.n	800b1f6 <__swbuf_r+0x2a>

0800b248 <__swsetup_r>:
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	4b29      	ldr	r3, [pc, #164]	@ (800b2f0 <__swsetup_r+0xa8>)
 800b24c:	4605      	mov	r5, r0
 800b24e:	6818      	ldr	r0, [r3, #0]
 800b250:	460c      	mov	r4, r1
 800b252:	b118      	cbz	r0, 800b25c <__swsetup_r+0x14>
 800b254:	6a03      	ldr	r3, [r0, #32]
 800b256:	b90b      	cbnz	r3, 800b25c <__swsetup_r+0x14>
 800b258:	f7fe f86a 	bl	8009330 <__sinit>
 800b25c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b260:	0719      	lsls	r1, r3, #28
 800b262:	d422      	bmi.n	800b2aa <__swsetup_r+0x62>
 800b264:	06da      	lsls	r2, r3, #27
 800b266:	d407      	bmi.n	800b278 <__swsetup_r+0x30>
 800b268:	2209      	movs	r2, #9
 800b26a:	602a      	str	r2, [r5, #0]
 800b26c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b270:	81a3      	strh	r3, [r4, #12]
 800b272:	f04f 30ff 	mov.w	r0, #4294967295
 800b276:	e033      	b.n	800b2e0 <__swsetup_r+0x98>
 800b278:	0758      	lsls	r0, r3, #29
 800b27a:	d512      	bpl.n	800b2a2 <__swsetup_r+0x5a>
 800b27c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b27e:	b141      	cbz	r1, 800b292 <__swsetup_r+0x4a>
 800b280:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b284:	4299      	cmp	r1, r3
 800b286:	d002      	beq.n	800b28e <__swsetup_r+0x46>
 800b288:	4628      	mov	r0, r5
 800b28a:	f7ff f88d 	bl	800a3a8 <_free_r>
 800b28e:	2300      	movs	r3, #0
 800b290:	6363      	str	r3, [r4, #52]	@ 0x34
 800b292:	89a3      	ldrh	r3, [r4, #12]
 800b294:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b298:	81a3      	strh	r3, [r4, #12]
 800b29a:	2300      	movs	r3, #0
 800b29c:	6063      	str	r3, [r4, #4]
 800b29e:	6923      	ldr	r3, [r4, #16]
 800b2a0:	6023      	str	r3, [r4, #0]
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	f043 0308 	orr.w	r3, r3, #8
 800b2a8:	81a3      	strh	r3, [r4, #12]
 800b2aa:	6923      	ldr	r3, [r4, #16]
 800b2ac:	b94b      	cbnz	r3, 800b2c2 <__swsetup_r+0x7a>
 800b2ae:	89a3      	ldrh	r3, [r4, #12]
 800b2b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2b8:	d003      	beq.n	800b2c2 <__swsetup_r+0x7a>
 800b2ba:	4621      	mov	r1, r4
 800b2bc:	4628      	mov	r0, r5
 800b2be:	f000 f8eb 	bl	800b498 <__smakebuf_r>
 800b2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2c6:	f013 0201 	ands.w	r2, r3, #1
 800b2ca:	d00a      	beq.n	800b2e2 <__swsetup_r+0x9a>
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	60a2      	str	r2, [r4, #8]
 800b2d0:	6962      	ldr	r2, [r4, #20]
 800b2d2:	4252      	negs	r2, r2
 800b2d4:	61a2      	str	r2, [r4, #24]
 800b2d6:	6922      	ldr	r2, [r4, #16]
 800b2d8:	b942      	cbnz	r2, 800b2ec <__swsetup_r+0xa4>
 800b2da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b2de:	d1c5      	bne.n	800b26c <__swsetup_r+0x24>
 800b2e0:	bd38      	pop	{r3, r4, r5, pc}
 800b2e2:	0799      	lsls	r1, r3, #30
 800b2e4:	bf58      	it	pl
 800b2e6:	6962      	ldrpl	r2, [r4, #20]
 800b2e8:	60a2      	str	r2, [r4, #8]
 800b2ea:	e7f4      	b.n	800b2d6 <__swsetup_r+0x8e>
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	e7f7      	b.n	800b2e0 <__swsetup_r+0x98>
 800b2f0:	2000003c 	.word	0x2000003c

0800b2f4 <memmove>:
 800b2f4:	4288      	cmp	r0, r1
 800b2f6:	b510      	push	{r4, lr}
 800b2f8:	eb01 0402 	add.w	r4, r1, r2
 800b2fc:	d902      	bls.n	800b304 <memmove+0x10>
 800b2fe:	4284      	cmp	r4, r0
 800b300:	4623      	mov	r3, r4
 800b302:	d807      	bhi.n	800b314 <memmove+0x20>
 800b304:	1e43      	subs	r3, r0, #1
 800b306:	42a1      	cmp	r1, r4
 800b308:	d008      	beq.n	800b31c <memmove+0x28>
 800b30a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b30e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b312:	e7f8      	b.n	800b306 <memmove+0x12>
 800b314:	4402      	add	r2, r0
 800b316:	4601      	mov	r1, r0
 800b318:	428a      	cmp	r2, r1
 800b31a:	d100      	bne.n	800b31e <memmove+0x2a>
 800b31c:	bd10      	pop	{r4, pc}
 800b31e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b326:	e7f7      	b.n	800b318 <memmove+0x24>

0800b328 <__assert_func>:
 800b328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b32a:	4614      	mov	r4, r2
 800b32c:	461a      	mov	r2, r3
 800b32e:	4b09      	ldr	r3, [pc, #36]	@ (800b354 <__assert_func+0x2c>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4605      	mov	r5, r0
 800b334:	68d8      	ldr	r0, [r3, #12]
 800b336:	b954      	cbnz	r4, 800b34e <__assert_func+0x26>
 800b338:	4b07      	ldr	r3, [pc, #28]	@ (800b358 <__assert_func+0x30>)
 800b33a:	461c      	mov	r4, r3
 800b33c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b340:	9100      	str	r1, [sp, #0]
 800b342:	462b      	mov	r3, r5
 800b344:	4905      	ldr	r1, [pc, #20]	@ (800b35c <__assert_func+0x34>)
 800b346:	f000 f86f 	bl	800b428 <fiprintf>
 800b34a:	f000 f903 	bl	800b554 <abort>
 800b34e:	4b04      	ldr	r3, [pc, #16]	@ (800b360 <__assert_func+0x38>)
 800b350:	e7f4      	b.n	800b33c <__assert_func+0x14>
 800b352:	bf00      	nop
 800b354:	2000003c 	.word	0x2000003c
 800b358:	0800be16 	.word	0x0800be16
 800b35c:	0800bde8 	.word	0x0800bde8
 800b360:	0800bddb 	.word	0x0800bddb

0800b364 <_calloc_r>:
 800b364:	b570      	push	{r4, r5, r6, lr}
 800b366:	fba1 5402 	umull	r5, r4, r1, r2
 800b36a:	b93c      	cbnz	r4, 800b37c <_calloc_r+0x18>
 800b36c:	4629      	mov	r1, r5
 800b36e:	f7fd f9eb 	bl	8008748 <_malloc_r>
 800b372:	4606      	mov	r6, r0
 800b374:	b928      	cbnz	r0, 800b382 <_calloc_r+0x1e>
 800b376:	2600      	movs	r6, #0
 800b378:	4630      	mov	r0, r6
 800b37a:	bd70      	pop	{r4, r5, r6, pc}
 800b37c:	220c      	movs	r2, #12
 800b37e:	6002      	str	r2, [r0, #0]
 800b380:	e7f9      	b.n	800b376 <_calloc_r+0x12>
 800b382:	462a      	mov	r2, r5
 800b384:	4621      	mov	r1, r4
 800b386:	f7fe f8a0 	bl	80094ca <memset>
 800b38a:	e7f5      	b.n	800b378 <_calloc_r+0x14>

0800b38c <__ascii_mbtowc>:
 800b38c:	b082      	sub	sp, #8
 800b38e:	b901      	cbnz	r1, 800b392 <__ascii_mbtowc+0x6>
 800b390:	a901      	add	r1, sp, #4
 800b392:	b142      	cbz	r2, 800b3a6 <__ascii_mbtowc+0x1a>
 800b394:	b14b      	cbz	r3, 800b3aa <__ascii_mbtowc+0x1e>
 800b396:	7813      	ldrb	r3, [r2, #0]
 800b398:	600b      	str	r3, [r1, #0]
 800b39a:	7812      	ldrb	r2, [r2, #0]
 800b39c:	1e10      	subs	r0, r2, #0
 800b39e:	bf18      	it	ne
 800b3a0:	2001      	movne	r0, #1
 800b3a2:	b002      	add	sp, #8
 800b3a4:	4770      	bx	lr
 800b3a6:	4610      	mov	r0, r2
 800b3a8:	e7fb      	b.n	800b3a2 <__ascii_mbtowc+0x16>
 800b3aa:	f06f 0001 	mvn.w	r0, #1
 800b3ae:	e7f8      	b.n	800b3a2 <__ascii_mbtowc+0x16>

0800b3b0 <_realloc_r>:
 800b3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b4:	4680      	mov	r8, r0
 800b3b6:	4615      	mov	r5, r2
 800b3b8:	460c      	mov	r4, r1
 800b3ba:	b921      	cbnz	r1, 800b3c6 <_realloc_r+0x16>
 800b3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	f7fd b9c1 	b.w	8008748 <_malloc_r>
 800b3c6:	b92a      	cbnz	r2, 800b3d4 <_realloc_r+0x24>
 800b3c8:	f7fe ffee 	bl	800a3a8 <_free_r>
 800b3cc:	2400      	movs	r4, #0
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d4:	f000 f8c5 	bl	800b562 <_malloc_usable_size_r>
 800b3d8:	4285      	cmp	r5, r0
 800b3da:	4606      	mov	r6, r0
 800b3dc:	d802      	bhi.n	800b3e4 <_realloc_r+0x34>
 800b3de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b3e2:	d8f4      	bhi.n	800b3ce <_realloc_r+0x1e>
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	f7fd f9ae 	bl	8008748 <_malloc_r>
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	d0ec      	beq.n	800b3cc <_realloc_r+0x1c>
 800b3f2:	42b5      	cmp	r5, r6
 800b3f4:	462a      	mov	r2, r5
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	bf28      	it	cs
 800b3fa:	4632      	movcs	r2, r6
 800b3fc:	f7fe f977 	bl	80096ee <memcpy>
 800b400:	4621      	mov	r1, r4
 800b402:	4640      	mov	r0, r8
 800b404:	f7fe ffd0 	bl	800a3a8 <_free_r>
 800b408:	463c      	mov	r4, r7
 800b40a:	e7e0      	b.n	800b3ce <_realloc_r+0x1e>

0800b40c <__ascii_wctomb>:
 800b40c:	4603      	mov	r3, r0
 800b40e:	4608      	mov	r0, r1
 800b410:	b141      	cbz	r1, 800b424 <__ascii_wctomb+0x18>
 800b412:	2aff      	cmp	r2, #255	@ 0xff
 800b414:	d904      	bls.n	800b420 <__ascii_wctomb+0x14>
 800b416:	228a      	movs	r2, #138	@ 0x8a
 800b418:	601a      	str	r2, [r3, #0]
 800b41a:	f04f 30ff 	mov.w	r0, #4294967295
 800b41e:	4770      	bx	lr
 800b420:	700a      	strb	r2, [r1, #0]
 800b422:	2001      	movs	r0, #1
 800b424:	4770      	bx	lr
	...

0800b428 <fiprintf>:
 800b428:	b40e      	push	{r1, r2, r3}
 800b42a:	b503      	push	{r0, r1, lr}
 800b42c:	4601      	mov	r1, r0
 800b42e:	ab03      	add	r3, sp, #12
 800b430:	4805      	ldr	r0, [pc, #20]	@ (800b448 <fiprintf+0x20>)
 800b432:	f853 2b04 	ldr.w	r2, [r3], #4
 800b436:	6800      	ldr	r0, [r0, #0]
 800b438:	9301      	str	r3, [sp, #4]
 800b43a:	f7ff fd03 	bl	800ae44 <_vfiprintf_r>
 800b43e:	b002      	add	sp, #8
 800b440:	f85d eb04 	ldr.w	lr, [sp], #4
 800b444:	b003      	add	sp, #12
 800b446:	4770      	bx	lr
 800b448:	2000003c 	.word	0x2000003c

0800b44c <__swhatbuf_r>:
 800b44c:	b570      	push	{r4, r5, r6, lr}
 800b44e:	460c      	mov	r4, r1
 800b450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b454:	2900      	cmp	r1, #0
 800b456:	b096      	sub	sp, #88	@ 0x58
 800b458:	4615      	mov	r5, r2
 800b45a:	461e      	mov	r6, r3
 800b45c:	da0d      	bge.n	800b47a <__swhatbuf_r+0x2e>
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b464:	f04f 0100 	mov.w	r1, #0
 800b468:	bf14      	ite	ne
 800b46a:	2340      	movne	r3, #64	@ 0x40
 800b46c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b470:	2000      	movs	r0, #0
 800b472:	6031      	str	r1, [r6, #0]
 800b474:	602b      	str	r3, [r5, #0]
 800b476:	b016      	add	sp, #88	@ 0x58
 800b478:	bd70      	pop	{r4, r5, r6, pc}
 800b47a:	466a      	mov	r2, sp
 800b47c:	f000 f848 	bl	800b510 <_fstat_r>
 800b480:	2800      	cmp	r0, #0
 800b482:	dbec      	blt.n	800b45e <__swhatbuf_r+0x12>
 800b484:	9901      	ldr	r1, [sp, #4]
 800b486:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b48a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b48e:	4259      	negs	r1, r3
 800b490:	4159      	adcs	r1, r3
 800b492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b496:	e7eb      	b.n	800b470 <__swhatbuf_r+0x24>

0800b498 <__smakebuf_r>:
 800b498:	898b      	ldrh	r3, [r1, #12]
 800b49a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b49c:	079d      	lsls	r5, r3, #30
 800b49e:	4606      	mov	r6, r0
 800b4a0:	460c      	mov	r4, r1
 800b4a2:	d507      	bpl.n	800b4b4 <__smakebuf_r+0x1c>
 800b4a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	6123      	str	r3, [r4, #16]
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	6163      	str	r3, [r4, #20]
 800b4b0:	b003      	add	sp, #12
 800b4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4b4:	ab01      	add	r3, sp, #4
 800b4b6:	466a      	mov	r2, sp
 800b4b8:	f7ff ffc8 	bl	800b44c <__swhatbuf_r>
 800b4bc:	9f00      	ldr	r7, [sp, #0]
 800b4be:	4605      	mov	r5, r0
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	f7fd f940 	bl	8008748 <_malloc_r>
 800b4c8:	b948      	cbnz	r0, 800b4de <__smakebuf_r+0x46>
 800b4ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ce:	059a      	lsls	r2, r3, #22
 800b4d0:	d4ee      	bmi.n	800b4b0 <__smakebuf_r+0x18>
 800b4d2:	f023 0303 	bic.w	r3, r3, #3
 800b4d6:	f043 0302 	orr.w	r3, r3, #2
 800b4da:	81a3      	strh	r3, [r4, #12]
 800b4dc:	e7e2      	b.n	800b4a4 <__smakebuf_r+0xc>
 800b4de:	89a3      	ldrh	r3, [r4, #12]
 800b4e0:	6020      	str	r0, [r4, #0]
 800b4e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4e6:	81a3      	strh	r3, [r4, #12]
 800b4e8:	9b01      	ldr	r3, [sp, #4]
 800b4ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b4ee:	b15b      	cbz	r3, 800b508 <__smakebuf_r+0x70>
 800b4f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	f000 f81d 	bl	800b534 <_isatty_r>
 800b4fa:	b128      	cbz	r0, 800b508 <__smakebuf_r+0x70>
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	f023 0303 	bic.w	r3, r3, #3
 800b502:	f043 0301 	orr.w	r3, r3, #1
 800b506:	81a3      	strh	r3, [r4, #12]
 800b508:	89a3      	ldrh	r3, [r4, #12]
 800b50a:	431d      	orrs	r5, r3
 800b50c:	81a5      	strh	r5, [r4, #12]
 800b50e:	e7cf      	b.n	800b4b0 <__smakebuf_r+0x18>

0800b510 <_fstat_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4d07      	ldr	r5, [pc, #28]	@ (800b530 <_fstat_r+0x20>)
 800b514:	2300      	movs	r3, #0
 800b516:	4604      	mov	r4, r0
 800b518:	4608      	mov	r0, r1
 800b51a:	4611      	mov	r1, r2
 800b51c:	602b      	str	r3, [r5, #0]
 800b51e:	f7f8 f88b 	bl	8003638 <_fstat>
 800b522:	1c43      	adds	r3, r0, #1
 800b524:	d102      	bne.n	800b52c <_fstat_r+0x1c>
 800b526:	682b      	ldr	r3, [r5, #0]
 800b528:	b103      	cbz	r3, 800b52c <_fstat_r+0x1c>
 800b52a:	6023      	str	r3, [r4, #0]
 800b52c:	bd38      	pop	{r3, r4, r5, pc}
 800b52e:	bf00      	nop
 800b530:	20000c54 	.word	0x20000c54

0800b534 <_isatty_r>:
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	4d06      	ldr	r5, [pc, #24]	@ (800b550 <_isatty_r+0x1c>)
 800b538:	2300      	movs	r3, #0
 800b53a:	4604      	mov	r4, r0
 800b53c:	4608      	mov	r0, r1
 800b53e:	602b      	str	r3, [r5, #0]
 800b540:	f7f8 f88a 	bl	8003658 <_isatty>
 800b544:	1c43      	adds	r3, r0, #1
 800b546:	d102      	bne.n	800b54e <_isatty_r+0x1a>
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	b103      	cbz	r3, 800b54e <_isatty_r+0x1a>
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	bd38      	pop	{r3, r4, r5, pc}
 800b550:	20000c54 	.word	0x20000c54

0800b554 <abort>:
 800b554:	b508      	push	{r3, lr}
 800b556:	2006      	movs	r0, #6
 800b558:	f000 f834 	bl	800b5c4 <raise>
 800b55c:	2001      	movs	r0, #1
 800b55e:	f7f8 f81b 	bl	8003598 <_exit>

0800b562 <_malloc_usable_size_r>:
 800b562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b566:	1f18      	subs	r0, r3, #4
 800b568:	2b00      	cmp	r3, #0
 800b56a:	bfbc      	itt	lt
 800b56c:	580b      	ldrlt	r3, [r1, r0]
 800b56e:	18c0      	addlt	r0, r0, r3
 800b570:	4770      	bx	lr

0800b572 <_raise_r>:
 800b572:	291f      	cmp	r1, #31
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	4605      	mov	r5, r0
 800b578:	460c      	mov	r4, r1
 800b57a:	d904      	bls.n	800b586 <_raise_r+0x14>
 800b57c:	2316      	movs	r3, #22
 800b57e:	6003      	str	r3, [r0, #0]
 800b580:	f04f 30ff 	mov.w	r0, #4294967295
 800b584:	bd38      	pop	{r3, r4, r5, pc}
 800b586:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b588:	b112      	cbz	r2, 800b590 <_raise_r+0x1e>
 800b58a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b58e:	b94b      	cbnz	r3, 800b5a4 <_raise_r+0x32>
 800b590:	4628      	mov	r0, r5
 800b592:	f000 f831 	bl	800b5f8 <_getpid_r>
 800b596:	4622      	mov	r2, r4
 800b598:	4601      	mov	r1, r0
 800b59a:	4628      	mov	r0, r5
 800b59c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5a0:	f000 b818 	b.w	800b5d4 <_kill_r>
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d00a      	beq.n	800b5be <_raise_r+0x4c>
 800b5a8:	1c59      	adds	r1, r3, #1
 800b5aa:	d103      	bne.n	800b5b4 <_raise_r+0x42>
 800b5ac:	2316      	movs	r3, #22
 800b5ae:	6003      	str	r3, [r0, #0]
 800b5b0:	2001      	movs	r0, #1
 800b5b2:	e7e7      	b.n	800b584 <_raise_r+0x12>
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	4798      	blx	r3
 800b5be:	2000      	movs	r0, #0
 800b5c0:	e7e0      	b.n	800b584 <_raise_r+0x12>
	...

0800b5c4 <raise>:
 800b5c4:	4b02      	ldr	r3, [pc, #8]	@ (800b5d0 <raise+0xc>)
 800b5c6:	4601      	mov	r1, r0
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	f7ff bfd2 	b.w	800b572 <_raise_r>
 800b5ce:	bf00      	nop
 800b5d0:	2000003c 	.word	0x2000003c

0800b5d4 <_kill_r>:
 800b5d4:	b538      	push	{r3, r4, r5, lr}
 800b5d6:	4d07      	ldr	r5, [pc, #28]	@ (800b5f4 <_kill_r+0x20>)
 800b5d8:	2300      	movs	r3, #0
 800b5da:	4604      	mov	r4, r0
 800b5dc:	4608      	mov	r0, r1
 800b5de:	4611      	mov	r1, r2
 800b5e0:	602b      	str	r3, [r5, #0]
 800b5e2:	f7f7 ffc9 	bl	8003578 <_kill>
 800b5e6:	1c43      	adds	r3, r0, #1
 800b5e8:	d102      	bne.n	800b5f0 <_kill_r+0x1c>
 800b5ea:	682b      	ldr	r3, [r5, #0]
 800b5ec:	b103      	cbz	r3, 800b5f0 <_kill_r+0x1c>
 800b5ee:	6023      	str	r3, [r4, #0]
 800b5f0:	bd38      	pop	{r3, r4, r5, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20000c54 	.word	0x20000c54

0800b5f8 <_getpid_r>:
 800b5f8:	f7f7 bfb6 	b.w	8003568 <_getpid>

0800b5fc <_init>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	bf00      	nop
 800b600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b602:	bc08      	pop	{r3}
 800b604:	469e      	mov	lr, r3
 800b606:	4770      	bx	lr

0800b608 <_fini>:
 800b608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b60a:	bf00      	nop
 800b60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b60e:	bc08      	pop	{r3}
 800b610:	469e      	mov	lr, r3
 800b612:	4770      	bx	lr
